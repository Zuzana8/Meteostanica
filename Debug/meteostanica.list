
meteostanica.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000390c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  08003a94  08003a94  00004a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d24  08003d24  00005028  2**0
                  CONTENTS
  4 .ARM          00000000  08003d24  08003d24  00005028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d24  08003d24  00005028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d24  08003d24  00004d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003d28  08003d28  00004d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  08003d2c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005028  2**0
                  CONTENTS
 10 .bss          000000a4  20000028  20000028  00005028  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000cc  200000cc  00005028  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005028  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009bca  00000000  00000000  00005058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002524  00000000  00000000  0000ec22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000950  00000000  00000000  00011148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006bf  00000000  00000000  00011a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d266  00000000  00000000  00012157  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e4d8  00000000  00000000  0002f3bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a1559  00000000  00000000  0003d895  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000dedee  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000022a8  00000000  00000000  000dee34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  000e10dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000028 	.word	0x20000028
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003a7c 	.word	0x08003a7c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000002c 	.word	0x2000002c
 80001c4:	08003a7c 	.word	0x08003a7c

080001c8 <GFX_Init>:
// Premenné pre kurzor a farbu textu
static int16_t cursor_x = 0, cursor_y = 0;
static uint16_t text_color = COLOR_WHITE;

// Inicializácia GFX knižnice
void GFX_Init(void) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
    ILI9341_Init(); // Inicializácia ovládača displeja
 80001cc:	f000 f8b6 	bl	800033c <ILI9341_Init>
    GFX_FillScreen(COLOR_BLACK); // Vyčistenie obrazovky
 80001d0:	2000      	movs	r0, #0
 80001d2:	f000 f802 	bl	80001da <GFX_FillScreen>
}
 80001d6:	bf00      	nop
 80001d8:	bd80      	pop	{r7, pc}

080001da <GFX_FillScreen>:

// Vyplnenie celej obrazovky jednou farbou
void GFX_FillScreen(uint16_t color) {
 80001da:	b580      	push	{r7, lr}
 80001dc:	b082      	sub	sp, #8
 80001de:	af00      	add	r7, sp, #0
 80001e0:	4603      	mov	r3, r0
 80001e2:	80fb      	strh	r3, [r7, #6]
    ILI9341_FillScreen(color);
 80001e4:	88fb      	ldrh	r3, [r7, #6]
 80001e6:	4618      	mov	r0, r3
 80001e8:	f000 f95e 	bl	80004a8 <ILI9341_FillScreen>
}
 80001ec:	bf00      	nop
 80001ee:	3708      	adds	r7, #8
 80001f0:	46bd      	mov	sp, r7
 80001f2:	bd80      	pop	{r7, pc}

080001f4 <GFX_SetCursor>:
        if (e2 < dx) { err += dx; y0 += sy; }
    }
}

// Nastavenie kurzora
void GFX_SetCursor(int16_t x, int16_t y) {
 80001f4:	b480      	push	{r7}
 80001f6:	b083      	sub	sp, #12
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	4603      	mov	r3, r0
 80001fc:	460a      	mov	r2, r1
 80001fe:	80fb      	strh	r3, [r7, #6]
 8000200:	4613      	mov	r3, r2
 8000202:	80bb      	strh	r3, [r7, #4]
    cursor_x = x;
 8000204:	4a05      	ldr	r2, [pc, #20]	@ (800021c <GFX_SetCursor+0x28>)
 8000206:	88fb      	ldrh	r3, [r7, #6]
 8000208:	8013      	strh	r3, [r2, #0]
    cursor_y = y;
 800020a:	4a05      	ldr	r2, [pc, #20]	@ (8000220 <GFX_SetCursor+0x2c>)
 800020c:	88bb      	ldrh	r3, [r7, #4]
 800020e:	8013      	strh	r3, [r2, #0]
}
 8000210:	bf00      	nop
 8000212:	370c      	adds	r7, #12
 8000214:	46bd      	mov	sp, r7
 8000216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021a:	4770      	bx	lr
 800021c:	20000044 	.word	0x20000044
 8000220:	20000046 	.word	0x20000046

08000224 <GFX_SetTextColor>:

// Nastavenie farby textu
void GFX_SetTextColor(uint16_t color) {
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
 800022a:	4603      	mov	r3, r0
 800022c:	80fb      	strh	r3, [r7, #6]
    text_color = color;
 800022e:	4a04      	ldr	r2, [pc, #16]	@ (8000240 <GFX_SetTextColor+0x1c>)
 8000230:	88fb      	ldrh	r3, [r7, #6]
 8000232:	8013      	strh	r3, [r2, #0]
}
 8000234:	bf00      	nop
 8000236:	370c      	adds	r7, #12
 8000238:	46bd      	mov	sp, r7
 800023a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023e:	4770      	bx	lr
 8000240:	20000000 	.word	0x20000000

08000244 <GFX_Print>:

// Tlač textu
void GFX_Print(const char* text) {
 8000244:	b590      	push	{r4, r7, lr}
 8000246:	b085      	sub	sp, #20
 8000248:	af02      	add	r7, sp, #8
 800024a:	6078      	str	r0, [r7, #4]
    while (*text) {
 800024c:	e01b      	b.n	8000286 <GFX_Print+0x42>
        ILI9341_DrawChar(cursor_x, cursor_y, *text, text_color, COLOR_BLACK, 1);
 800024e:	4b12      	ldr	r3, [pc, #72]	@ (8000298 <GFX_Print+0x54>)
 8000250:	f9b3 0000 	ldrsh.w	r0, [r3]
 8000254:	4b11      	ldr	r3, [pc, #68]	@ (800029c <GFX_Print+0x58>)
 8000256:	f9b3 1000 	ldrsh.w	r1, [r3]
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	781a      	ldrb	r2, [r3, #0]
 800025e:	4b10      	ldr	r3, [pc, #64]	@ (80002a0 <GFX_Print+0x5c>)
 8000260:	881b      	ldrh	r3, [r3, #0]
 8000262:	2401      	movs	r4, #1
 8000264:	9401      	str	r4, [sp, #4]
 8000266:	2400      	movs	r4, #0
 8000268:	9400      	str	r4, [sp, #0]
 800026a:	f000 f95f 	bl	800052c <ILI9341_DrawChar>
        cursor_x += 6; // Posunutie kurzora (prispôsobte veľkosť fontu)
 800026e:	4b0a      	ldr	r3, [pc, #40]	@ (8000298 <GFX_Print+0x54>)
 8000270:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000274:	b29b      	uxth	r3, r3
 8000276:	3306      	adds	r3, #6
 8000278:	b29b      	uxth	r3, r3
 800027a:	b21a      	sxth	r2, r3
 800027c:	4b06      	ldr	r3, [pc, #24]	@ (8000298 <GFX_Print+0x54>)
 800027e:	801a      	strh	r2, [r3, #0]
        text++;
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	3301      	adds	r3, #1
 8000284:	607b      	str	r3, [r7, #4]
    while (*text) {
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	2b00      	cmp	r3, #0
 800028c:	d1df      	bne.n	800024e <GFX_Print+0xa>
    }
}
 800028e:	bf00      	nop
 8000290:	bf00      	nop
 8000292:	370c      	adds	r7, #12
 8000294:	46bd      	mov	sp, r7
 8000296:	bd90      	pop	{r4, r7, pc}
 8000298:	20000044 	.word	0x20000044
 800029c:	20000046 	.word	0x20000046
 80002a0:	20000000 	.word	0x20000000

080002a4 <ILI9341_SendCommand>:
#define ILI9341_CMD_MEMORY_WRITE 0x2C
#define ILI9341_CMD_COLUMN_ADDRESS_SET 0x2A
#define ILI9341_CMD_PAGE_ADDRESS_SET 0x2B

// Pomocná funkcia na poslanie príkazu
void ILI9341_SendCommand(uint8_t cmd) {
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DCX_GPIO_Port, DCX_Pin, GPIO_PIN_RESET); // DCX = Command
 80002ae:	2200      	movs	r2, #0
 80002b0:	2108      	movs	r1, #8
 80002b2:	480d      	ldr	r0, [pc, #52]	@ (80002e8 <ILI9341_SendCommand+0x44>)
 80002b4:	f001 f8a0 	bl	80013f8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_RESET); // CSX = Enable
 80002b8:	2200      	movs	r2, #0
 80002ba:	2110      	movs	r1, #16
 80002bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002c0:	f001 f89a 	bl	80013f8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 80002c4:	1df9      	adds	r1, r7, #7
 80002c6:	f04f 33ff 	mov.w	r3, #4294967295
 80002ca:	2201      	movs	r2, #1
 80002cc:	4807      	ldr	r0, [pc, #28]	@ (80002ec <ILI9341_SendCommand+0x48>)
 80002ce:	f002 fc82 	bl	8002bd6 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_SET);   // CSX = Disable
 80002d2:	2201      	movs	r2, #1
 80002d4:	2110      	movs	r1, #16
 80002d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002da:	f001 f88d 	bl	80013f8 <HAL_GPIO_WritePin>
}
 80002de:	bf00      	nop
 80002e0:	3708      	adds	r7, #8
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	48000400 	.word	0x48000400
 80002ec:	20000050 	.word	0x20000050

080002f0 <ILI9341_SendData>:

// Pomocná funkcia na poslanie dát
void ILI9341_SendData(uint8_t* data, size_t size) {
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
 80002f8:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DCX_GPIO_Port, DCX_Pin, GPIO_PIN_SET);   // DCX = Data
 80002fa:	2201      	movs	r2, #1
 80002fc:	2108      	movs	r1, #8
 80002fe:	480d      	ldr	r0, [pc, #52]	@ (8000334 <ILI9341_SendData+0x44>)
 8000300:	f001 f87a 	bl	80013f8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_RESET); // CSX = Enable
 8000304:	2200      	movs	r2, #0
 8000306:	2110      	movs	r1, #16
 8000308:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800030c:	f001 f874 	bl	80013f8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000310:	683b      	ldr	r3, [r7, #0]
 8000312:	b29a      	uxth	r2, r3
 8000314:	f04f 33ff 	mov.w	r3, #4294967295
 8000318:	6879      	ldr	r1, [r7, #4]
 800031a:	4807      	ldr	r0, [pc, #28]	@ (8000338 <ILI9341_SendData+0x48>)
 800031c:	f002 fc5b 	bl	8002bd6 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_SET);   // CSX = Disable
 8000320:	2201      	movs	r2, #1
 8000322:	2110      	movs	r1, #16
 8000324:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000328:	f001 f866 	bl	80013f8 <HAL_GPIO_WritePin>
}
 800032c:	bf00      	nop
 800032e:	3708      	adds	r7, #8
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}
 8000334:	48000400 	.word	0x48000400
 8000338:	20000050 	.word	0x20000050

0800033c <ILI9341_Init>:

// Inicializácia displeja
void ILI9341_Init(void) {
 800033c:	b580      	push	{r7, lr}
 800033e:	b09e      	sub	sp, #120	@ 0x78
 8000340:	af00      	add	r7, sp, #0
    // Reset displeja
    HAL_GPIO_WritePin(RESX_GPIO_Port, RESX_Pin, GPIO_PIN_RESET);
 8000342:	2200      	movs	r2, #0
 8000344:	2140      	movs	r1, #64	@ 0x40
 8000346:	4822      	ldr	r0, [pc, #136]	@ (80003d0 <ILI9341_Init+0x94>)
 8000348:	f001 f856 	bl	80013f8 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800034c:	200a      	movs	r0, #10
 800034e:	f000 fdd7 	bl	8000f00 <HAL_Delay>
    HAL_GPIO_WritePin(RESX_GPIO_Port, RESX_Pin, GPIO_PIN_SET);
 8000352:	2201      	movs	r2, #1
 8000354:	2140      	movs	r1, #64	@ 0x40
 8000356:	481e      	ldr	r0, [pc, #120]	@ (80003d0 <ILI9341_Init+0x94>)
 8000358:	f001 f84e 	bl	80013f8 <HAL_GPIO_WritePin>
    HAL_Delay(120);
 800035c:	2078      	movs	r0, #120	@ 0x78
 800035e:	f000 fdcf 	bl	8000f00 <HAL_Delay>

    // Posielanie inicializačných príkazov podľa datasheetu
    uint8_t initCommands[] = {
 8000362:	4a1c      	ldr	r2, [pc, #112]	@ (80003d4 <ILI9341_Init+0x98>)
 8000364:	1d3b      	adds	r3, r7, #4
 8000366:	4611      	mov	r1, r2
 8000368:	226b      	movs	r2, #107	@ 0x6b
 800036a:	4618      	mov	r0, r3
 800036c:	f003 fb78 	bl	8003a60 <memcpy>
        0xE1, 15, 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1, 0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F, // Negative Gamma
        0x11, 0, // Exit Sleep
        0x29, 0  // Display ON
    };

    for (size_t i = 0; i < sizeof(initCommands);) {
 8000370:	2300      	movs	r3, #0
 8000372:	677b      	str	r3, [r7, #116]	@ 0x74
 8000374:	e024      	b.n	80003c0 <ILI9341_Init+0x84>
        uint8_t cmd = initCommands[i++];
 8000376:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000378:	1c5a      	adds	r2, r3, #1
 800037a:	677a      	str	r2, [r7, #116]	@ 0x74
 800037c:	3378      	adds	r3, #120	@ 0x78
 800037e:	443b      	add	r3, r7
 8000380:	f813 3c74 	ldrb.w	r3, [r3, #-116]
 8000384:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
        uint8_t numArgs = initCommands[i++];
 8000388:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800038a:	1c5a      	adds	r2, r3, #1
 800038c:	677a      	str	r2, [r7, #116]	@ 0x74
 800038e:	3378      	adds	r3, #120	@ 0x78
 8000390:	443b      	add	r3, r7
 8000392:	f813 3c74 	ldrb.w	r3, [r3, #-116]
 8000396:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
        ILI9341_SendCommand(cmd);
 800039a:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800039e:	4618      	mov	r0, r3
 80003a0:	f7ff ff80 	bl	80002a4 <ILI9341_SendCommand>
        ILI9341_SendData(&initCommands[i], numArgs);
 80003a4:	1d3a      	adds	r2, r7, #4
 80003a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80003a8:	4413      	add	r3, r2
 80003aa:	f897 2072 	ldrb.w	r2, [r7, #114]	@ 0x72
 80003ae:	4611      	mov	r1, r2
 80003b0:	4618      	mov	r0, r3
 80003b2:	f7ff ff9d 	bl	80002f0 <ILI9341_SendData>
        i += numArgs;
 80003b6:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80003ba:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80003bc:	4413      	add	r3, r2
 80003be:	677b      	str	r3, [r7, #116]	@ 0x74
    for (size_t i = 0; i < sizeof(initCommands);) {
 80003c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80003c2:	2b6a      	cmp	r3, #106	@ 0x6a
 80003c4:	d9d7      	bls.n	8000376 <ILI9341_Init+0x3a>
    }
}
 80003c6:	bf00      	nop
 80003c8:	bf00      	nop
 80003ca:	3778      	adds	r7, #120	@ 0x78
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	48000400 	.word	0x48000400
 80003d4:	08003a94 	.word	0x08003a94

080003d8 <ILI9341_DrawPixel>:

// Vykreslenie bodu
void ILI9341_DrawPixel(int16_t x, int16_t y, uint16_t color) {
 80003d8:	b580      	push	{r7, lr}
 80003da:	b086      	sub	sp, #24
 80003dc:	af00      	add	r7, sp, #0
 80003de:	4603      	mov	r3, r0
 80003e0:	80fb      	strh	r3, [r7, #6]
 80003e2:	460b      	mov	r3, r1
 80003e4:	80bb      	strh	r3, [r7, #4]
 80003e6:	4613      	mov	r3, r2
 80003e8:	807b      	strh	r3, [r7, #2]
    if (x < 0 || x >= ILI9341_WIDTH || y < 0 || y >= ILI9341_HEIGHT)
 80003ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	db55      	blt.n	800049e <ILI9341_DrawPixel+0xc6>
 80003f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80003f6:	2bef      	cmp	r3, #239	@ 0xef
 80003f8:	dc51      	bgt.n	800049e <ILI9341_DrawPixel+0xc6>
 80003fa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80003fe:	2b00      	cmp	r3, #0
 8000400:	db4d      	blt.n	800049e <ILI9341_DrawPixel+0xc6>
 8000402:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000406:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800040a:	da48      	bge.n	800049e <ILI9341_DrawPixel+0xc6>
        return;

    uint8_t data[] = {
 800040c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000410:	121b      	asrs	r3, r3, #8
 8000412:	b21b      	sxth	r3, r3
 8000414:	b2db      	uxtb	r3, r3
 8000416:	743b      	strb	r3, [r7, #16]
 8000418:	88fb      	ldrh	r3, [r7, #6]
 800041a:	b2db      	uxtb	r3, r3
 800041c:	747b      	strb	r3, [r7, #17]
 800041e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000422:	121b      	asrs	r3, r3, #8
 8000424:	b21b      	sxth	r3, r3
 8000426:	b2db      	uxtb	r3, r3
 8000428:	74bb      	strb	r3, [r7, #18]
 800042a:	88fb      	ldrh	r3, [r7, #6]
 800042c:	b2db      	uxtb	r3, r3
 800042e:	74fb      	strb	r3, [r7, #19]
 8000430:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000434:	121b      	asrs	r3, r3, #8
 8000436:	b21b      	sxth	r3, r3
 8000438:	b2db      	uxtb	r3, r3
 800043a:	753b      	strb	r3, [r7, #20]
 800043c:	88bb      	ldrh	r3, [r7, #4]
 800043e:	b2db      	uxtb	r3, r3
 8000440:	757b      	strb	r3, [r7, #21]
 8000442:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000446:	121b      	asrs	r3, r3, #8
 8000448:	b21b      	sxth	r3, r3
 800044a:	b2db      	uxtb	r3, r3
 800044c:	75bb      	strb	r3, [r7, #22]
 800044e:	88bb      	ldrh	r3, [r7, #4]
 8000450:	b2db      	uxtb	r3, r3
 8000452:	75fb      	strb	r3, [r7, #23]
        (x >> 8) & 0xFF, x & 0xFF, (x >> 8) & 0xFF, x & 0xFF,
        (y >> 8) & 0xFF, y & 0xFF, (y >> 8) & 0xFF, y & 0xFF
    };

    ILI9341_SendCommand(ILI9341_CMD_COLUMN_ADDRESS_SET);
 8000454:	202a      	movs	r0, #42	@ 0x2a
 8000456:	f7ff ff25 	bl	80002a4 <ILI9341_SendCommand>
    ILI9341_SendData(data, 4);
 800045a:	f107 0310 	add.w	r3, r7, #16
 800045e:	2104      	movs	r1, #4
 8000460:	4618      	mov	r0, r3
 8000462:	f7ff ff45 	bl	80002f0 <ILI9341_SendData>

    ILI9341_SendCommand(ILI9341_CMD_PAGE_ADDRESS_SET);
 8000466:	202b      	movs	r0, #43	@ 0x2b
 8000468:	f7ff ff1c 	bl	80002a4 <ILI9341_SendCommand>
    ILI9341_SendData(&data[4], 4);
 800046c:	f107 0310 	add.w	r3, r7, #16
 8000470:	3304      	adds	r3, #4
 8000472:	2104      	movs	r1, #4
 8000474:	4618      	mov	r0, r3
 8000476:	f7ff ff3b 	bl	80002f0 <ILI9341_SendData>

    ILI9341_SendCommand(ILI9341_CMD_MEMORY_WRITE);
 800047a:	202c      	movs	r0, #44	@ 0x2c
 800047c:	f7ff ff12 	bl	80002a4 <ILI9341_SendCommand>
    uint8_t colorData[] = { color >> 8, color & 0xFF };
 8000480:	887b      	ldrh	r3, [r7, #2]
 8000482:	0a1b      	lsrs	r3, r3, #8
 8000484:	b29b      	uxth	r3, r3
 8000486:	b2db      	uxtb	r3, r3
 8000488:	733b      	strb	r3, [r7, #12]
 800048a:	887b      	ldrh	r3, [r7, #2]
 800048c:	b2db      	uxtb	r3, r3
 800048e:	737b      	strb	r3, [r7, #13]
    ILI9341_SendData(colorData, 2);
 8000490:	f107 030c 	add.w	r3, r7, #12
 8000494:	2102      	movs	r1, #2
 8000496:	4618      	mov	r0, r3
 8000498:	f7ff ff2a 	bl	80002f0 <ILI9341_SendData>
 800049c:	e000      	b.n	80004a0 <ILI9341_DrawPixel+0xc8>
        return;
 800049e:	bf00      	nop
}
 80004a0:	3718      	adds	r7, #24
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
	...

080004a8 <ILI9341_FillScreen>:

// Vyplnenie celej obrazovky
void ILI9341_FillScreen(uint16_t color) {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b086      	sub	sp, #24
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	4603      	mov	r3, r0
 80004b0:	80fb      	strh	r3, [r7, #6]
    uint8_t data[] = {
 80004b2:	4a1d      	ldr	r2, [pc, #116]	@ (8000528 <ILI9341_FillScreen+0x80>)
 80004b4:	f107 030c 	add.w	r3, r7, #12
 80004b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004bc:	e883 0003 	stmia.w	r3, {r0, r1}
        0, 0, (ILI9341_WIDTH - 1) >> 8, (ILI9341_WIDTH - 1) & 0xFF,
        0, 0, (ILI9341_HEIGHT - 1) >> 8, (ILI9341_HEIGHT - 1) & 0xFF
    };

    ILI9341_SendCommand(ILI9341_CMD_COLUMN_ADDRESS_SET);
 80004c0:	202a      	movs	r0, #42	@ 0x2a
 80004c2:	f7ff feef 	bl	80002a4 <ILI9341_SendCommand>
    ILI9341_SendData(data, 4);
 80004c6:	f107 030c 	add.w	r3, r7, #12
 80004ca:	2104      	movs	r1, #4
 80004cc:	4618      	mov	r0, r3
 80004ce:	f7ff ff0f 	bl	80002f0 <ILI9341_SendData>

    ILI9341_SendCommand(ILI9341_CMD_PAGE_ADDRESS_SET);
 80004d2:	202b      	movs	r0, #43	@ 0x2b
 80004d4:	f7ff fee6 	bl	80002a4 <ILI9341_SendCommand>
    ILI9341_SendData(&data[4], 4);
 80004d8:	f107 030c 	add.w	r3, r7, #12
 80004dc:	3304      	adds	r3, #4
 80004de:	2104      	movs	r1, #4
 80004e0:	4618      	mov	r0, r3
 80004e2:	f7ff ff05 	bl	80002f0 <ILI9341_SendData>

    ILI9341_SendCommand(ILI9341_CMD_MEMORY_WRITE);
 80004e6:	202c      	movs	r0, #44	@ 0x2c
 80004e8:	f7ff fedc 	bl	80002a4 <ILI9341_SendCommand>
    uint8_t colorData[] = { color >> 8, color & 0xFF };
 80004ec:	88fb      	ldrh	r3, [r7, #6]
 80004ee:	0a1b      	lsrs	r3, r3, #8
 80004f0:	b29b      	uxth	r3, r3
 80004f2:	b2db      	uxtb	r3, r3
 80004f4:	723b      	strb	r3, [r7, #8]
 80004f6:	88fb      	ldrh	r3, [r7, #6]
 80004f8:	b2db      	uxtb	r3, r3
 80004fa:	727b      	strb	r3, [r7, #9]
    for (int i = 0; i < ILI9341_WIDTH * ILI9341_HEIGHT; i++) {
 80004fc:	2300      	movs	r3, #0
 80004fe:	617b      	str	r3, [r7, #20]
 8000500:	e008      	b.n	8000514 <ILI9341_FillScreen+0x6c>
        ILI9341_SendData(colorData, 2);
 8000502:	f107 0308 	add.w	r3, r7, #8
 8000506:	2102      	movs	r1, #2
 8000508:	4618      	mov	r0, r3
 800050a:	f7ff fef1 	bl	80002f0 <ILI9341_SendData>
    for (int i = 0; i < ILI9341_WIDTH * ILI9341_HEIGHT; i++) {
 800050e:	697b      	ldr	r3, [r7, #20]
 8000510:	3301      	adds	r3, #1
 8000512:	617b      	str	r3, [r7, #20]
 8000514:	697b      	ldr	r3, [r7, #20]
 8000516:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 800051a:	dbf2      	blt.n	8000502 <ILI9341_FillScreen+0x5a>
    }
}
 800051c:	bf00      	nop
 800051e:	bf00      	nop
 8000520:	3718      	adds	r7, #24
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	08003b00 	.word	0x08003b00

0800052c <ILI9341_DrawChar>:

// Vykreslenie znaku
void ILI9341_DrawChar(int16_t x, int16_t y, char c, uint16_t color, uint16_t bg, uint8_t size) {
 800052c:	b590      	push	{r4, r7, lr}
 800052e:	b085      	sub	sp, #20
 8000530:	af00      	add	r7, sp, #0
 8000532:	4604      	mov	r4, r0
 8000534:	4608      	mov	r0, r1
 8000536:	4611      	mov	r1, r2
 8000538:	461a      	mov	r2, r3
 800053a:	4623      	mov	r3, r4
 800053c:	80fb      	strh	r3, [r7, #6]
 800053e:	4603      	mov	r3, r0
 8000540:	80bb      	strh	r3, [r7, #4]
 8000542:	460b      	mov	r3, r1
 8000544:	70fb      	strb	r3, [r7, #3]
 8000546:	4613      	mov	r3, r2
 8000548:	803b      	strh	r3, [r7, #0]
   const  uint8_t *fontData = font[c - 32];
 800054a:	78fb      	ldrb	r3, [r7, #3]
 800054c:	f1a3 0220 	sub.w	r2, r3, #32
 8000550:	4613      	mov	r3, r2
 8000552:	009b      	lsls	r3, r3, #2
 8000554:	4413      	add	r3, r2
 8000556:	4a36      	ldr	r2, [pc, #216]	@ (8000630 <ILI9341_DrawChar+0x104>)
 8000558:	4413      	add	r3, r2
 800055a:	60bb      	str	r3, [r7, #8]
    for (int8_t i = 0; i < 5; i++) {
 800055c:	2300      	movs	r3, #0
 800055e:	73fb      	strb	r3, [r7, #15]
 8000560:	e05d      	b.n	800061e <ILI9341_DrawChar+0xf2>
        uint8_t line = fontData[i];
 8000562:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000566:	68ba      	ldr	r2, [r7, #8]
 8000568:	4413      	add	r3, r2
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	73bb      	strb	r3, [r7, #14]
        for (int8_t j = 0; j < 8; j++) {
 800056e:	2300      	movs	r3, #0
 8000570:	737b      	strb	r3, [r7, #13]
 8000572:	e04a      	b.n	800060a <ILI9341_DrawChar+0xde>
            if (line & 0x1) {
 8000574:	7bbb      	ldrb	r3, [r7, #14]
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	2b00      	cmp	r3, #0
 800057c:	d01e      	beq.n	80005bc <ILI9341_DrawChar+0x90>
                ILI9341_DrawPixel(x + i * size, y + j * size, color);
 800057e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000582:	b29a      	uxth	r2, r3
 8000584:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000588:	b29b      	uxth	r3, r3
 800058a:	fb12 f303 	smulbb	r3, r2, r3
 800058e:	b29a      	uxth	r2, r3
 8000590:	88fb      	ldrh	r3, [r7, #6]
 8000592:	4413      	add	r3, r2
 8000594:	b29b      	uxth	r3, r3
 8000596:	b218      	sxth	r0, r3
 8000598:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800059c:	b29a      	uxth	r2, r3
 800059e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80005a2:	b29b      	uxth	r3, r3
 80005a4:	fb12 f303 	smulbb	r3, r2, r3
 80005a8:	b29a      	uxth	r2, r3
 80005aa:	88bb      	ldrh	r3, [r7, #4]
 80005ac:	4413      	add	r3, r2
 80005ae:	b29b      	uxth	r3, r3
 80005b0:	b21b      	sxth	r3, r3
 80005b2:	883a      	ldrh	r2, [r7, #0]
 80005b4:	4619      	mov	r1, r3
 80005b6:	f7ff ff0f 	bl	80003d8 <ILI9341_DrawPixel>
 80005ba:	e01d      	b.n	80005f8 <ILI9341_DrawChar+0xcc>
            } else {
                ILI9341_DrawPixel(x + i * size, y + j * size, bg);
 80005bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005c0:	b29a      	uxth	r2, r3
 80005c2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80005c6:	b29b      	uxth	r3, r3
 80005c8:	fb12 f303 	smulbb	r3, r2, r3
 80005cc:	b29a      	uxth	r2, r3
 80005ce:	88fb      	ldrh	r3, [r7, #6]
 80005d0:	4413      	add	r3, r2
 80005d2:	b29b      	uxth	r3, r3
 80005d4:	b218      	sxth	r0, r3
 80005d6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80005da:	b29a      	uxth	r2, r3
 80005dc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80005e0:	b29b      	uxth	r3, r3
 80005e2:	fb12 f303 	smulbb	r3, r2, r3
 80005e6:	b29a      	uxth	r2, r3
 80005e8:	88bb      	ldrh	r3, [r7, #4]
 80005ea:	4413      	add	r3, r2
 80005ec:	b29b      	uxth	r3, r3
 80005ee:	b21b      	sxth	r3, r3
 80005f0:	8c3a      	ldrh	r2, [r7, #32]
 80005f2:	4619      	mov	r1, r3
 80005f4:	f7ff fef0 	bl	80003d8 <ILI9341_DrawPixel>
            }
            line >>= 1;
 80005f8:	7bbb      	ldrb	r3, [r7, #14]
 80005fa:	085b      	lsrs	r3, r3, #1
 80005fc:	73bb      	strb	r3, [r7, #14]
        for (int8_t j = 0; j < 8; j++) {
 80005fe:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000602:	b2db      	uxtb	r3, r3
 8000604:	3301      	adds	r3, #1
 8000606:	b2db      	uxtb	r3, r3
 8000608:	737b      	strb	r3, [r7, #13]
 800060a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800060e:	2b07      	cmp	r3, #7
 8000610:	ddb0      	ble.n	8000574 <ILI9341_DrawChar+0x48>
    for (int8_t i = 0; i < 5; i++) {
 8000612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000616:	b2db      	uxtb	r3, r3
 8000618:	3301      	adds	r3, #1
 800061a:	b2db      	uxtb	r3, r3
 800061c:	73fb      	strb	r3, [r7, #15]
 800061e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000622:	2b04      	cmp	r3, #4
 8000624:	dd9d      	ble.n	8000562 <ILI9341_DrawChar+0x36>
        }
    }
}
 8000626:	bf00      	nop
 8000628:	bf00      	nop
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	bd90      	pop	{r4, r7, pc}
 8000630:	08003b18 	.word	0x08003b18

08000634 <MX_GPIO_Init>:
 */

#include "gpio.h"

void MX_GPIO_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b088      	sub	sp, #32
 8000638:	af00      	add	r7, sp, #0
    // GPIO Initialization Structure
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063a:	f107 030c 	add.w	r3, r7, #12
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
 8000646:	60da      	str	r2, [r3, #12]
 8000648:	611a      	str	r2, [r3, #16]

    // Enable GPIO clocks for the necessary ports
    __HAL_RCC_GPIOA_CLK_ENABLE();  // For SPI pins (SCK, MOSI, MISO)
 800064a:	4b38      	ldr	r3, [pc, #224]	@ (800072c <MX_GPIO_Init+0xf8>)
 800064c:	695b      	ldr	r3, [r3, #20]
 800064e:	4a37      	ldr	r2, [pc, #220]	@ (800072c <MX_GPIO_Init+0xf8>)
 8000650:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000654:	6153      	str	r3, [r2, #20]
 8000656:	4b35      	ldr	r3, [pc, #212]	@ (800072c <MX_GPIO_Init+0xf8>)
 8000658:	695b      	ldr	r3, [r3, #20]
 800065a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();  // For control pins (CSX, DCX, RESX)
 8000662:	4b32      	ldr	r3, [pc, #200]	@ (800072c <MX_GPIO_Init+0xf8>)
 8000664:	695b      	ldr	r3, [r3, #20]
 8000666:	4a31      	ldr	r2, [pc, #196]	@ (800072c <MX_GPIO_Init+0xf8>)
 8000668:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800066c:	6153      	str	r3, [r2, #20]
 800066e:	4b2f      	ldr	r3, [pc, #188]	@ (800072c <MX_GPIO_Init+0xf8>)
 8000670:	695b      	ldr	r3, [r3, #20]
 8000672:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]

    // Configure SPI SCK Pin (PA5)
    GPIO_InitStruct.Pin = GPIO_PIN_5;  // SCK
 800067a:	2320      	movs	r3, #32
 800067c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;  // Alternate function, push-pull
 800067e:	2302      	movs	r3, #2
 8000680:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	2300      	movs	r3, #0
 8000684:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000686:	2303      	movs	r3, #3
 8000688:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;  // SPI1 alternate function
 800068a:	2305      	movs	r3, #5
 800068c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800068e:	f107 030c 	add.w	r3, r7, #12
 8000692:	4619      	mov	r1, r3
 8000694:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000698:	f000 fd3c 	bl	8001114 <HAL_GPIO_Init>

    // Configure SPI MOSI Pin (PA7)
    GPIO_InitStruct.Pin = GPIO_PIN_7;  // MOSI
 800069c:	2380      	movs	r3, #128	@ 0x80
 800069e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	4619      	mov	r1, r3
 80006a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006aa:	f000 fd33 	bl	8001114 <HAL_GPIO_Init>

    // Configure SPI MISO Pin (PA6) (if reading from the display is required)
    GPIO_InitStruct.Pin = GPIO_PIN_6;  // MISO
 80006ae:	2340      	movs	r3, #64	@ 0x40
 80006b0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;  // Alternate function, push-pull
 80006b2:	2302      	movs	r3, #2
 80006b4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b6:	f107 030c 	add.w	r3, r7, #12
 80006ba:	4619      	mov	r1, r3
 80006bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006c0:	f000 fd28 	bl	8001114 <HAL_GPIO_Init>

    // Configure CSX Pin (Chip Select)
    GPIO_InitStruct.Pin = CSX_Pin;  // Example: GPIO_PIN_4
 80006c4:	2310      	movs	r3, #16
 80006c6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;  // Push-pull mode
 80006c8:	2301      	movs	r3, #1
 80006ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006d0:	2303      	movs	r3, #3
 80006d2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(CSX_GPIO_Port, &GPIO_InitStruct);
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	4619      	mov	r1, r3
 80006da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006de:	f000 fd19 	bl	8001114 <HAL_GPIO_Init>

    // Configure DCX Pin (Data/Command Select)
    GPIO_InitStruct.Pin = DCX_Pin;  // Example: GPIO_PIN_0
 80006e2:	2308      	movs	r3, #8
 80006e4:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(DCX_GPIO_Port, &GPIO_InitStruct);
 80006e6:	f107 030c 	add.w	r3, r7, #12
 80006ea:	4619      	mov	r1, r3
 80006ec:	4810      	ldr	r0, [pc, #64]	@ (8000730 <MX_GPIO_Init+0xfc>)
 80006ee:	f000 fd11 	bl	8001114 <HAL_GPIO_Init>

    // Configure RESX Pin (Reset)
    GPIO_InitStruct.Pin = RESX_Pin;  // Example: GPIO_PIN_1
 80006f2:	2340      	movs	r3, #64	@ 0x40
 80006f4:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(RESX_GPIO_Port, &GPIO_InitStruct);
 80006f6:	f107 030c 	add.w	r3, r7, #12
 80006fa:	4619      	mov	r1, r3
 80006fc:	480c      	ldr	r0, [pc, #48]	@ (8000730 <MX_GPIO_Init+0xfc>)
 80006fe:	f000 fd09 	bl	8001114 <HAL_GPIO_Init>

    // Set initial pin states (if needed)
    HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_SET);  // CSX high (inactive)
 8000702:	2201      	movs	r2, #1
 8000704:	2110      	movs	r1, #16
 8000706:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800070a:	f000 fe75 	bl	80013f8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DCX_GPIO_Port, DCX_Pin, GPIO_PIN_SET);  // DCX high
 800070e:	2201      	movs	r2, #1
 8000710:	2108      	movs	r1, #8
 8000712:	4807      	ldr	r0, [pc, #28]	@ (8000730 <MX_GPIO_Init+0xfc>)
 8000714:	f000 fe70 	bl	80013f8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RESX_GPIO_Port, RESX_Pin, GPIO_PIN_SET);  // RESX high (inactive)
 8000718:	2201      	movs	r2, #1
 800071a:	2140      	movs	r1, #64	@ 0x40
 800071c:	4804      	ldr	r0, [pc, #16]	@ (8000730 <MX_GPIO_Init+0xfc>)
 800071e:	f000 fe6b 	bl	80013f8 <HAL_GPIO_WritePin>
}
 8000722:	bf00      	nop
 8000724:	3720      	adds	r7, #32
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40021000 	.word	0x40021000
 8000730:	48000400 	.word	0x48000400

08000734 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000738:	4b04      	ldr	r3, [pc, #16]	@ (800074c <__NVIC_GetPriorityGrouping+0x18>)
 800073a:	68db      	ldr	r3, [r3, #12]
 800073c:	0a1b      	lsrs	r3, r3, #8
 800073e:	f003 0307 	and.w	r3, r3, #7
}
 8000742:	4618      	mov	r0, r3
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr
 800074c:	e000ed00 	.word	0xe000ed00

08000750 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800075a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075e:	2b00      	cmp	r3, #0
 8000760:	db0b      	blt.n	800077a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000762:	79fb      	ldrb	r3, [r7, #7]
 8000764:	f003 021f 	and.w	r2, r3, #31
 8000768:	4907      	ldr	r1, [pc, #28]	@ (8000788 <__NVIC_EnableIRQ+0x38>)
 800076a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076e:	095b      	lsrs	r3, r3, #5
 8000770:	2001      	movs	r0, #1
 8000772:	fa00 f202 	lsl.w	r2, r0, r2
 8000776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800077a:	bf00      	nop
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	e000e100 	.word	0xe000e100

0800078c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	6039      	str	r1, [r7, #0]
 8000796:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079c:	2b00      	cmp	r3, #0
 800079e:	db0a      	blt.n	80007b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	b2da      	uxtb	r2, r3
 80007a4:	490c      	ldr	r1, [pc, #48]	@ (80007d8 <__NVIC_SetPriority+0x4c>)
 80007a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007aa:	0112      	lsls	r2, r2, #4
 80007ac:	b2d2      	uxtb	r2, r2
 80007ae:	440b      	add	r3, r1
 80007b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007b4:	e00a      	b.n	80007cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	b2da      	uxtb	r2, r3
 80007ba:	4908      	ldr	r1, [pc, #32]	@ (80007dc <__NVIC_SetPriority+0x50>)
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	f003 030f 	and.w	r3, r3, #15
 80007c2:	3b04      	subs	r3, #4
 80007c4:	0112      	lsls	r2, r2, #4
 80007c6:	b2d2      	uxtb	r2, r2
 80007c8:	440b      	add	r3, r1
 80007ca:	761a      	strb	r2, [r3, #24]
}
 80007cc:	bf00      	nop
 80007ce:	370c      	adds	r7, #12
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr
 80007d8:	e000e100 	.word	0xe000e100
 80007dc:	e000ed00 	.word	0xe000ed00

080007e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b089      	sub	sp, #36	@ 0x24
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	60f8      	str	r0, [r7, #12]
 80007e8:	60b9      	str	r1, [r7, #8]
 80007ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	f003 0307 	and.w	r3, r3, #7
 80007f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007f4:	69fb      	ldr	r3, [r7, #28]
 80007f6:	f1c3 0307 	rsb	r3, r3, #7
 80007fa:	2b04      	cmp	r3, #4
 80007fc:	bf28      	it	cs
 80007fe:	2304      	movcs	r3, #4
 8000800:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000802:	69fb      	ldr	r3, [r7, #28]
 8000804:	3304      	adds	r3, #4
 8000806:	2b06      	cmp	r3, #6
 8000808:	d902      	bls.n	8000810 <NVIC_EncodePriority+0x30>
 800080a:	69fb      	ldr	r3, [r7, #28]
 800080c:	3b03      	subs	r3, #3
 800080e:	e000      	b.n	8000812 <NVIC_EncodePriority+0x32>
 8000810:	2300      	movs	r3, #0
 8000812:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000814:	f04f 32ff 	mov.w	r2, #4294967295
 8000818:	69bb      	ldr	r3, [r7, #24]
 800081a:	fa02 f303 	lsl.w	r3, r2, r3
 800081e:	43da      	mvns	r2, r3
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	401a      	ands	r2, r3
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000828:	f04f 31ff 	mov.w	r1, #4294967295
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	fa01 f303 	lsl.w	r3, r1, r3
 8000832:	43d9      	mvns	r1, r3
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000838:	4313      	orrs	r3, r2
         );
}
 800083a:	4618      	mov	r0, r3
 800083c:	3724      	adds	r7, #36	@ 0x24
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr

08000846 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8000846:	b480      	push	{r7}
 8000848:	b083      	sub	sp, #12
 800084a:	af00      	add	r7, sp, #0
 800084c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	f043 0201 	orr.w	r2, r3, #1
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	601a      	str	r2, [r3, #0]
}
 800085a:	bf00      	nop
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr

08000866 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8000866:	b480      	push	{r7}
 8000868:	b083      	sub	sp, #12
 800086a:	af00      	add	r7, sp, #0
 800086c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	601a      	str	r2, [r3, #0]
}
 800087a:	bf00      	nop
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr

08000886 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8000886:	b480      	push	{r7}
 8000888:	b083      	sub	sp, #12
 800088a:	af00      	add	r7, sp, #0
 800088c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	601a      	str	r2, [r3, #0]
}
 800089a:	bf00      	nop
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr

080008a6 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 80008a6:	b480      	push	{r7}
 80008a8:	b085      	sub	sp, #20
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	60f8      	str	r0, [r7, #12]
 80008ae:	60b9      	str	r1, [r7, #8]
 80008b0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	68db      	ldr	r3, [r3, #12]
 80008b6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80008ba:	f023 0306 	bic.w	r3, r3, #6
 80008be:	68b9      	ldr	r1, [r7, #8]
 80008c0:	687a      	ldr	r2, [r7, #4]
 80008c2:	430a      	orrs	r2, r1
 80008c4:	431a      	orrs	r2, r3
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	60da      	str	r2, [r3, #12]
}
 80008ca:	bf00      	nop
 80008cc:	3714      	adds	r7, #20
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr

080008d6 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 80008d6:	b480      	push	{r7}
 80008d8:	b083      	sub	sp, #12
 80008da:	af00      	add	r7, sp, #0
 80008dc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	68db      	ldr	r3, [r3, #12]
 80008e2:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	60da      	str	r2, [r3, #12]
}
 80008ea:	bf00      	nop
 80008ec:	370c      	adds	r7, #12
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr

080008f6 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(const I2C_TypeDef *I2Cx)
{
 80008f6:	b480      	push	{r7}
 80008f8:	b083      	sub	sp, #12
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	699b      	ldr	r3, [r3, #24]
 8000902:	f003 0304 	and.w	r3, r3, #4
 8000906:	2b04      	cmp	r3, #4
 8000908:	d101      	bne.n	800090e <LL_I2C_IsActiveFlag_RXNE+0x18>
 800090a:	2301      	movs	r3, #1
 800090c:	e000      	b.n	8000910 <LL_I2C_IsActiveFlag_RXNE+0x1a>
 800090e:	2300      	movs	r3, #0
}
 8000910:	4618      	mov	r0, r3
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr

0800091c <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	605a      	str	r2, [r3, #4]
}
 8000930:	bf00      	nop
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr

0800093c <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(const I2C_TypeDef *I2Cx)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000948:	b2db      	uxtb	r3, r3
}
 800094a:	4618      	mov	r0, r3
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
	...

08000958 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000960:	4b08      	ldr	r3, [pc, #32]	@ (8000984 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000962:	695a      	ldr	r2, [r3, #20]
 8000964:	4907      	ldr	r1, [pc, #28]	@ (8000984 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4313      	orrs	r3, r2
 800096a:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800096c:	4b05      	ldr	r3, [pc, #20]	@ (8000984 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800096e:	695a      	ldr	r2, [r3, #20]
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	4013      	ands	r3, r2
 8000974:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000976:	68fb      	ldr	r3, [r7, #12]
}
 8000978:	bf00      	nop
 800097a:	3714      	adds	r7, #20
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr
 8000984:	40021000 	.word	0x40021000

08000988 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000988:	b480      	push	{r7}
 800098a:	b085      	sub	sp, #20
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000990:	4b08      	ldr	r3, [pc, #32]	@ (80009b4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000992:	69da      	ldr	r2, [r3, #28]
 8000994:	4907      	ldr	r1, [pc, #28]	@ (80009b4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4313      	orrs	r3, r2
 800099a:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800099c:	4b05      	ldr	r3, [pc, #20]	@ (80009b4 <LL_APB1_GRP1_EnableClock+0x2c>)
 800099e:	69da      	ldr	r2, [r3, #28]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	4013      	ands	r3, r2
 80009a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009a6:	68fb      	ldr	r3, [r7, #12]
}
 80009a8:	bf00      	nop
 80009aa:	3714      	adds	r7, #20
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr
 80009b4:	40021000 	.word	0x40021000

080009b8 <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08e      	sub	sp, #56	@ 0x38
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
 80009cc:	611a      	str	r2, [r3, #16]
 80009ce:	615a      	str	r2, [r3, #20]
 80009d0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d2:	1d3b      	adds	r3, r7, #4
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
 80009e0:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80009e2:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80009e6:	f7ff ffb7 	bl	8000958 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80009ea:	23c0      	movs	r3, #192	@ 0xc0
 80009ec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80009ee:	2302      	movs	r3, #2
 80009f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80009f2:	2303      	movs	r3, #3
 80009f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80009f6:	2301      	movs	r3, #1
 80009f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80009fa:	2301      	movs	r3, #1
 80009fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80009fe:	2304      	movs	r3, #4
 8000a00:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a02:	1d3b      	adds	r3, r7, #4
 8000a04:	4619      	mov	r1, r3
 8000a06:	4821      	ldr	r0, [pc, #132]	@ (8000a8c <MX_I2C1_Init+0xd4>)
 8000a08:	f002 fde8 	bl	80035dc <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8000a0c:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8000a10:	f7ff ffba 	bl	8000988 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000a14:	f7ff fe8e 	bl	8000734 <__NVIC_GetPriorityGrouping>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff fede 	bl	80007e0 <NVIC_EncodePriority>
 8000a24:	4603      	mov	r3, r0
 8000a26:	4619      	mov	r1, r3
 8000a28:	201f      	movs	r0, #31
 8000a2a:	f7ff feaf 	bl	800078c <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000a2e:	201f      	movs	r0, #31
 8000a30:	f7ff fe8e 	bl	8000750 <__NVIC_EnableIRQ>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8000a34:	4816      	ldr	r0, [pc, #88]	@ (8000a90 <MX_I2C1_Init+0xd8>)
 8000a36:	f7ff ff71 	bl	800091c <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 8000a3a:	4815      	ldr	r0, [pc, #84]	@ (8000a90 <MX_I2C1_Init+0xd8>)
 8000a3c:	f7ff ff4b 	bl	80008d6 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8000a40:	4813      	ldr	r0, [pc, #76]	@ (8000a90 <MX_I2C1_Init+0xd8>)
 8000a42:	f7ff ff20 	bl	8000886 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8000a46:	4812      	ldr	r0, [pc, #72]	@ (8000a90 <MX_I2C1_Init+0xd8>)
 8000a48:	f7ff ff0d 	bl	8000866 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 8000a50:	4b10      	ldr	r3, [pc, #64]	@ (8000a94 <MX_I2C1_Init+0xdc>)
 8000a52:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8000a54:	2300      	movs	r3, #0
 8000a56:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8000a60:	2300      	movs	r3, #0
 8000a62:	633b      	str	r3, [r7, #48]	@ 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8000a64:	2300      	movs	r3, #0
 8000a66:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8000a68:	f107 031c 	add.w	r3, r7, #28
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4808      	ldr	r0, [pc, #32]	@ (8000a90 <MX_I2C1_Init+0xd8>)
 8000a70:	f002 fec7 	bl	8003802 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8000a74:	2200      	movs	r2, #0
 8000a76:	2100      	movs	r1, #0
 8000a78:	4805      	ldr	r0, [pc, #20]	@ (8000a90 <MX_I2C1_Init+0xd8>)
 8000a7a:	f7ff ff14 	bl	80008a6 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */
  LL_I2C_Enable(I2C1);
 8000a7e:	4804      	ldr	r0, [pc, #16]	@ (8000a90 <MX_I2C1_Init+0xd8>)
 8000a80:	f7ff fee1 	bl	8000846 <LL_I2C_Enable>
  /* USER CODE END I2C1_Init 2 */

}
 8000a84:	bf00      	nop
 8000a86:	3738      	adds	r7, #56	@ 0x38
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	48000400 	.word	0x48000400
 8000a90:	40005400 	.word	0x40005400
 8000a94:	2000090e 	.word	0x2000090e

08000a98 <I2C1_EV_IRQHandler>:

	return i2c_rx_data;
}


void I2C1_EV_IRQHandler(void) {
 8000a98:	b598      	push	{r3, r4, r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
	/* Check RXNE flag value in ISR register */
	if(LL_I2C_IsActiveFlag_RXNE(I2C1)) {
 8000a9c:	4810      	ldr	r0, [pc, #64]	@ (8000ae0 <I2C1_EV_IRQHandler+0x48>)
 8000a9e:	f7ff ff2a 	bl	80008f6 <LL_I2C_IsActiveFlag_RXNE>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d019      	beq.n	8000adc <I2C1_EV_IRQHandler+0x44>
		/* Call function Master Reception Callback */
		i2c_rx_data[rx_data_index++] = LL_I2C_ReceiveData8(I2C1);
 8000aa8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae4 <I2C1_EV_IRQHandler+0x4c>)
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae8 <I2C1_EV_IRQHandler+0x50>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	1c59      	adds	r1, r3, #1
 8000ab4:	b2c8      	uxtb	r0, r1
 8000ab6:	490c      	ldr	r1, [pc, #48]	@ (8000ae8 <I2C1_EV_IRQHandler+0x50>)
 8000ab8:	7008      	strb	r0, [r1, #0]
 8000aba:	18d4      	adds	r4, r2, r3
 8000abc:	4808      	ldr	r0, [pc, #32]	@ (8000ae0 <I2C1_EV_IRQHandler+0x48>)
 8000abe:	f7ff ff3d 	bl	800093c <LL_I2C_ReceiveData8>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	7023      	strb	r3, [r4, #0]
		(rx_data_index > 19) ? rx_data_index = 0 : rx_data_index;
 8000ac6:	4b08      	ldr	r3, [pc, #32]	@ (8000ae8 <I2C1_EV_IRQHandler+0x50>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	2b13      	cmp	r3, #19
 8000ace:	d903      	bls.n	8000ad8 <I2C1_EV_IRQHandler+0x40>
 8000ad0:	4b05      	ldr	r3, [pc, #20]	@ (8000ae8 <I2C1_EV_IRQHandler+0x50>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	701a      	strb	r2, [r3, #0]
	}
}
 8000ad6:	e001      	b.n	8000adc <I2C1_EV_IRQHandler+0x44>
		(rx_data_index > 19) ? rx_data_index = 0 : rx_data_index;
 8000ad8:	4b03      	ldr	r3, [pc, #12]	@ (8000ae8 <I2C1_EV_IRQHandler+0x50>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
}
 8000adc:	bf00      	nop
 8000ade:	bd98      	pop	{r3, r4, r7, pc}
 8000ae0:	40005400 	.word	0x40005400
 8000ae4:	20000048 	.word	0x20000048
 8000ae8:	2000004c 	.word	0x2000004c

08000aec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
main(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000af0:	f000 f9a0 	bl	8000e34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000af4:	f000 f82e 	bl	8000b54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000af8:	f7ff fd9c 	bl	8000634 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000afc:	f7ff ff5c 	bl	80009b8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000b00:	f000 f88c 	bl	8000c1c <MX_SPI1_Init>
  MX_FATFS_Init();
 8000b04:	f002 feba 	bl	800387c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  	HAL_SPI_Transmit_IT(&hspi1, TX_Buffer, 1); //Sending in Interrupt mode
 8000b08:	2201      	movs	r2, #1
 8000b0a:	490f      	ldr	r1, [pc, #60]	@ (8000b48 <main+0x5c>)
 8000b0c:	480f      	ldr	r0, [pc, #60]	@ (8000b4c <main+0x60>)
 8000b0e:	f002 f9d7 	bl	8002ec0 <HAL_SPI_Transmit_IT>
    HAL_Delay(100);
 8000b12:	2064      	movs	r0, #100	@ 0x64
 8000b14:	f000 f9f4 	bl	8000f00 <HAL_Delay>
  //initialize sensors
  //HTS221_init();
  //LPS25HB_init();

  GFX_Init(); // Inicializácia Adafruit GFX
 8000b18:	f7ff fb56 	bl	80001c8 <GFX_Init>

  GFX_SetCursor(10, 10);
 8000b1c:	210a      	movs	r1, #10
 8000b1e:	200a      	movs	r0, #10
 8000b20:	f7ff fb68 	bl	80001f4 <GFX_SetCursor>
  GFX_SetTextColor(COLOR_BLACK);
 8000b24:	2000      	movs	r0, #0
 8000b26:	f7ff fb7d 	bl	8000224 <GFX_SetTextColor>
  GFX_Print("Hello, World!");
 8000b2a:	4809      	ldr	r0, [pc, #36]	@ (8000b50 <main+0x64>)
 8000b2c:	f7ff fb8a 	bl	8000244 <GFX_Print>

  /* USER CODE BEGIN 2 */
  ILI9341_Init(); // Inicializácia ILI9341 displeja
 8000b30:	f7ff fc04 	bl	800033c <ILI9341_Init>

  // Vyplnenie obrazovky čiernou farbou
  ILI9341_FillScreen(COLOR_WHITE);
 8000b34:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000b38:	f7ff fcb6 	bl	80004a8 <ILI9341_FillScreen>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_Delay(1000);
 8000b3c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b40:	f000 f9de 	bl	8000f00 <HAL_Delay>
 8000b44:	e7fa      	b.n	8000b3c <main+0x50>
 8000b46:	bf00      	nop
 8000b48:	20000004 	.word	0x20000004
 8000b4c:	20000050 	.word	0x20000050
 8000b50:	08003b08 	.word	0x08003b08

08000b54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b096      	sub	sp, #88	@ 0x58
 8000b58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b5a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b5e:	2228      	movs	r2, #40	@ 0x28
 8000b60:	2100      	movs	r1, #0
 8000b62:	4618      	mov	r0, r3
 8000b64:	f002 ff4f 	bl	8003a06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b68:	f107 031c 	add.w	r3, r7, #28
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b78:	1d3b      	adds	r3, r7, #4
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	609a      	str	r2, [r3, #8]
 8000b82:	60da      	str	r2, [r3, #12]
 8000b84:	611a      	str	r2, [r3, #16]
 8000b86:	615a      	str	r2, [r3, #20]


  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b8c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b90:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b92:	2300      	movs	r3, #0
 8000b94:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b96:	2301      	movs	r3, #1
 8000b98:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b9a:	2310      	movs	r3, #16
 8000b9c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ba2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ba6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ba8:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000bac:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bae:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f000 fc38 	bl	8001428 <HAL_RCC_OscConfig>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000bbe:	f000 f827 	bl	8000c10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bc2:	230f      	movs	r3, #15
 8000bc4:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bd8:	f107 031c 	add.w	r3, r7, #28
 8000bdc:	2102      	movs	r1, #2
 8000bde:	4618      	mov	r0, r3
 8000be0:	f001 fc60 	bl	80024a4 <HAL_RCC_ClockConfig>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000bea:	f000 f811 	bl	8000c10 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000bee:	2320      	movs	r3, #32
 8000bf0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bf6:	1d3b      	adds	r3, r7, #4
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f001 fe23 	bl	8002844 <HAL_RCCEx_PeriphCLKConfig>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000c04:	f000 f804 	bl	8000c10 <Error_Handler>
  }
}
 8000c08:	bf00      	nop
 8000c0a:	3758      	adds	r7, #88	@ 0x58
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c14:	b672      	cpsid	i
}
 8000c16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c18:	bf00      	nop
 8000c1a:	e7fd      	b.n	8000c18 <Error_Handler+0x8>

08000c1c <MX_SPI1_Init>:
extern SPI_HandleTypeDef hspi1;

SPI_HandleTypeDef hspi1;

void MX_SPI1_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
    hspi1.Instance = SPI1;
 8000c20:	4b19      	ldr	r3, [pc, #100]	@ (8000c88 <MX_SPI1_Init+0x6c>)
 8000c22:	4a1a      	ldr	r2, [pc, #104]	@ (8000c8c <MX_SPI1_Init+0x70>)
 8000c24:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c26:	4b18      	ldr	r3, [pc, #96]	@ (8000c88 <MX_SPI1_Init+0x6c>)
 8000c28:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c2c:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c2e:	4b16      	ldr	r3, [pc, #88]	@ (8000c88 <MX_SPI1_Init+0x6c>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c34:	4b14      	ldr	r3, [pc, #80]	@ (8000c88 <MX_SPI1_Init+0x6c>)
 8000c36:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000c3a:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c3c:	4b12      	ldr	r3, [pc, #72]	@ (8000c88 <MX_SPI1_Init+0x6c>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c42:	4b11      	ldr	r3, [pc, #68]	@ (8000c88 <MX_SPI1_Init+0x6c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c48:	4b0f      	ldr	r3, [pc, #60]	@ (8000c88 <MX_SPI1_Init+0x6c>)
 8000c4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c4e:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000c50:	4b0d      	ldr	r3, [pc, #52]	@ (8000c88 <MX_SPI1_Init+0x6c>)
 8000c52:	2218      	movs	r2, #24
 8000c54:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c56:	4b0c      	ldr	r3, [pc, #48]	@ (8000c88 <MX_SPI1_Init+0x6c>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c88 <MX_SPI1_Init+0x6c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	625a      	str	r2, [r3, #36]	@ 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c62:	4b09      	ldr	r3, [pc, #36]	@ (8000c88 <MX_SPI1_Init+0x6c>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	629a      	str	r2, [r3, #40]	@ 0x28
    hspi1.Init.CRCPolynomial = 10;
 8000c68:	4b07      	ldr	r3, [pc, #28]	@ (8000c88 <MX_SPI1_Init+0x6c>)
 8000c6a:	220a      	movs	r2, #10
 8000c6c:	62da      	str	r2, [r3, #44]	@ 0x2c
    HAL_SPI_Init(&hspi1);
 8000c6e:	4806      	ldr	r0, [pc, #24]	@ (8000c88 <MX_SPI1_Init+0x6c>)
 8000c70:	f001 ff0e 	bl	8002a90 <HAL_SPI_Init>

    if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000c74:	4804      	ldr	r0, [pc, #16]	@ (8000c88 <MX_SPI1_Init+0x6c>)
 8000c76:	f001 ff0b 	bl	8002a90 <HAL_SPI_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_SPI1_Init+0x68>
            Error_Handler();
 8000c80:	f7ff ffc6 	bl	8000c10 <Error_Handler>
        }
}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20000050 	.word	0x20000050
 8000c8c:	40013000 	.word	0x40013000

08000c90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c96:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd4 <HAL_MspInit+0x44>)
 8000c98:	699b      	ldr	r3, [r3, #24]
 8000c9a:	4a0e      	ldr	r2, [pc, #56]	@ (8000cd4 <HAL_MspInit+0x44>)
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	6193      	str	r3, [r2, #24]
 8000ca2:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd4 <HAL_MspInit+0x44>)
 8000ca4:	699b      	ldr	r3, [r3, #24]
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cae:	4b09      	ldr	r3, [pc, #36]	@ (8000cd4 <HAL_MspInit+0x44>)
 8000cb0:	69db      	ldr	r3, [r3, #28]
 8000cb2:	4a08      	ldr	r2, [pc, #32]	@ (8000cd4 <HAL_MspInit+0x44>)
 8000cb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cb8:	61d3      	str	r3, [r2, #28]
 8000cba:	4b06      	ldr	r3, [pc, #24]	@ (8000cd4 <HAL_MspInit+0x44>)
 8000cbc:	69db      	ldr	r3, [r3, #28]
 8000cbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cc2:	603b      	str	r3, [r7, #0]
 8000cc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	40021000 	.word	0x40021000

08000cd8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08a      	sub	sp, #40	@ 0x28
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a17      	ldr	r2, [pc, #92]	@ (8000d54 <HAL_SPI_MspInit+0x7c>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d128      	bne.n	8000d4c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cfa:	4b17      	ldr	r3, [pc, #92]	@ (8000d58 <HAL_SPI_MspInit+0x80>)
 8000cfc:	699b      	ldr	r3, [r3, #24]
 8000cfe:	4a16      	ldr	r2, [pc, #88]	@ (8000d58 <HAL_SPI_MspInit+0x80>)
 8000d00:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d04:	6193      	str	r3, [r2, #24]
 8000d06:	4b14      	ldr	r3, [pc, #80]	@ (8000d58 <HAL_SPI_MspInit+0x80>)
 8000d08:	699b      	ldr	r3, [r3, #24]
 8000d0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d0e:	613b      	str	r3, [r7, #16]
 8000d10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d12:	4b11      	ldr	r3, [pc, #68]	@ (8000d58 <HAL_SPI_MspInit+0x80>)
 8000d14:	695b      	ldr	r3, [r3, #20]
 8000d16:	4a10      	ldr	r2, [pc, #64]	@ (8000d58 <HAL_SPI_MspInit+0x80>)
 8000d18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d1c:	6153      	str	r3, [r2, #20]
 8000d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d58 <HAL_SPI_MspInit+0x80>)
 8000d20:	695b      	ldr	r3, [r3, #20]
 8000d22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000d2a:	23a0      	movs	r3, #160	@ 0xa0
 8000d2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d36:	2303      	movs	r3, #3
 8000d38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d3a:	2305      	movs	r3, #5
 8000d3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3e:	f107 0314 	add.w	r3, r7, #20
 8000d42:	4619      	mov	r1, r3
 8000d44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d48:	f000 f9e4 	bl	8001114 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000d4c:	bf00      	nop
 8000d4e:	3728      	adds	r7, #40	@ 0x28
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40013000 	.word	0x40013000
 8000d58:	40021000 	.word	0x40021000

08000d5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d60:	bf00      	nop
 8000d62:	e7fd      	b.n	8000d60 <NMI_Handler+0x4>

08000d64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d68:	bf00      	nop
 8000d6a:	e7fd      	b.n	8000d68 <HardFault_Handler+0x4>

08000d6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d70:	bf00      	nop
 8000d72:	e7fd      	b.n	8000d70 <MemManage_Handler+0x4>

08000d74 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d78:	bf00      	nop
 8000d7a:	e7fd      	b.n	8000d78 <BusFault_Handler+0x4>

08000d7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d80:	bf00      	nop
 8000d82:	e7fd      	b.n	8000d80 <UsageFault_Handler+0x4>

08000d84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr

08000dae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db2:	f000 f885 	bl	8000ec0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
	...

08000dbc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dc0:	4b06      	ldr	r3, [pc, #24]	@ (8000ddc <SystemInit+0x20>)
 8000dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dc6:	4a05      	ldr	r2, [pc, #20]	@ (8000ddc <SystemInit+0x20>)
 8000dc8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dcc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000de0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e18 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000de4:	f7ff ffea 	bl	8000dbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000de8:	480c      	ldr	r0, [pc, #48]	@ (8000e1c <LoopForever+0x6>)
  ldr r1, =_edata
 8000dea:	490d      	ldr	r1, [pc, #52]	@ (8000e20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dec:	4a0d      	ldr	r2, [pc, #52]	@ (8000e24 <LoopForever+0xe>)
  movs r3, #0
 8000dee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df0:	e002      	b.n	8000df8 <LoopCopyDataInit>

08000df2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000df2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000df6:	3304      	adds	r3, #4

08000df8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dfc:	d3f9      	bcc.n	8000df2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dfe:	4a0a      	ldr	r2, [pc, #40]	@ (8000e28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e00:	4c0a      	ldr	r4, [pc, #40]	@ (8000e2c <LoopForever+0x16>)
  movs r3, #0
 8000e02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e04:	e001      	b.n	8000e0a <LoopFillZerobss>

08000e06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e08:	3204      	adds	r2, #4

08000e0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e0c:	d3fb      	bcc.n	8000e06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e0e:	f002 fe03 	bl	8003a18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e12:	f7ff fe6b 	bl	8000aec <main>

08000e16 <LoopForever>:

LoopForever:
    b LoopForever
 8000e16:	e7fe      	b.n	8000e16 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e18:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000e1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e20:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8000e24:	08003d2c 	.word	0x08003d2c
  ldr r2, =_sbss
 8000e28:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8000e2c:	200000cc 	.word	0x200000cc

08000e30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e30:	e7fe      	b.n	8000e30 <ADC1_2_IRQHandler>
	...

08000e34 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e38:	4b08      	ldr	r3, [pc, #32]	@ (8000e5c <HAL_Init+0x28>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a07      	ldr	r2, [pc, #28]	@ (8000e5c <HAL_Init+0x28>)
 8000e3e:	f043 0310 	orr.w	r3, r3, #16
 8000e42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e44:	2003      	movs	r0, #3
 8000e46:	f000 f931 	bl	80010ac <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e4a:	200f      	movs	r0, #15
 8000e4c:	f000 f808 	bl	8000e60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e50:	f7ff ff1e 	bl	8000c90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40022000 	.word	0x40022000

08000e60 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e68:	4b12      	ldr	r3, [pc, #72]	@ (8000eb4 <HAL_InitTick+0x54>)
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	4b12      	ldr	r3, [pc, #72]	@ (8000eb8 <HAL_InitTick+0x58>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	4619      	mov	r1, r3
 8000e72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f000 f93b 	bl	80010fa <HAL_SYSTICK_Config>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e00e      	b.n	8000eac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2b0f      	cmp	r3, #15
 8000e92:	d80a      	bhi.n	8000eaa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e94:	2200      	movs	r2, #0
 8000e96:	6879      	ldr	r1, [r7, #4]
 8000e98:	f04f 30ff 	mov.w	r0, #4294967295
 8000e9c:	f000 f911 	bl	80010c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ea0:	4a06      	ldr	r2, [pc, #24]	@ (8000ebc <HAL_InitTick+0x5c>)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	e000      	b.n	8000eac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20000008 	.word	0x20000008
 8000eb8:	20000010 	.word	0x20000010
 8000ebc:	2000000c 	.word	0x2000000c

08000ec0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ec4:	4b06      	ldr	r3, [pc, #24]	@ (8000ee0 <HAL_IncTick+0x20>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4b06      	ldr	r3, [pc, #24]	@ (8000ee4 <HAL_IncTick+0x24>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4413      	add	r3, r2
 8000ed0:	4a04      	ldr	r2, [pc, #16]	@ (8000ee4 <HAL_IncTick+0x24>)
 8000ed2:	6013      	str	r3, [r2, #0]
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	20000010 	.word	0x20000010
 8000ee4:	200000b4 	.word	0x200000b4

08000ee8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  return uwTick;  
 8000eec:	4b03      	ldr	r3, [pc, #12]	@ (8000efc <HAL_GetTick+0x14>)
 8000eee:	681b      	ldr	r3, [r3, #0]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	200000b4 	.word	0x200000b4

08000f00 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f08:	f7ff ffee 	bl	8000ee8 <HAL_GetTick>
 8000f0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f18:	d005      	beq.n	8000f26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f44 <HAL_Delay+0x44>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	461a      	mov	r2, r3
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	4413      	add	r3, r2
 8000f24:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000f26:	bf00      	nop
 8000f28:	f7ff ffde 	bl	8000ee8 <HAL_GetTick>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	68fa      	ldr	r2, [r7, #12]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d8f7      	bhi.n	8000f28 <HAL_Delay+0x28>
  {
  }
}
 8000f38:	bf00      	nop
 8000f3a:	bf00      	nop
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000010 	.word	0x20000010

08000f48 <__NVIC_SetPriorityGrouping>:
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f58:	4b0c      	ldr	r3, [pc, #48]	@ (8000f8c <__NVIC_SetPriorityGrouping+0x44>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f5e:	68ba      	ldr	r2, [r7, #8]
 8000f60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f64:	4013      	ands	r3, r2
 8000f66:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f7a:	4a04      	ldr	r2, [pc, #16]	@ (8000f8c <__NVIC_SetPriorityGrouping+0x44>)
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	60d3      	str	r3, [r2, #12]
}
 8000f80:	bf00      	nop
 8000f82:	3714      	adds	r7, #20
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <__NVIC_GetPriorityGrouping>:
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f94:	4b04      	ldr	r3, [pc, #16]	@ (8000fa8 <__NVIC_GetPriorityGrouping+0x18>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	0a1b      	lsrs	r3, r3, #8
 8000f9a:	f003 0307 	and.w	r3, r3, #7
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <__NVIC_SetPriority>:
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	6039      	str	r1, [r7, #0]
 8000fb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	db0a      	blt.n	8000fd6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	490c      	ldr	r1, [pc, #48]	@ (8000ff8 <__NVIC_SetPriority+0x4c>)
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	0112      	lsls	r2, r2, #4
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	440b      	add	r3, r1
 8000fd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000fd4:	e00a      	b.n	8000fec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	4908      	ldr	r1, [pc, #32]	@ (8000ffc <__NVIC_SetPriority+0x50>)
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	f003 030f 	and.w	r3, r3, #15
 8000fe2:	3b04      	subs	r3, #4
 8000fe4:	0112      	lsls	r2, r2, #4
 8000fe6:	b2d2      	uxtb	r2, r2
 8000fe8:	440b      	add	r3, r1
 8000fea:	761a      	strb	r2, [r3, #24]
}
 8000fec:	bf00      	nop
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000e100 	.word	0xe000e100
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <NVIC_EncodePriority>:
{
 8001000:	b480      	push	{r7}
 8001002:	b089      	sub	sp, #36	@ 0x24
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	f1c3 0307 	rsb	r3, r3, #7
 800101a:	2b04      	cmp	r3, #4
 800101c:	bf28      	it	cs
 800101e:	2304      	movcs	r3, #4
 8001020:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3304      	adds	r3, #4
 8001026:	2b06      	cmp	r3, #6
 8001028:	d902      	bls.n	8001030 <NVIC_EncodePriority+0x30>
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	3b03      	subs	r3, #3
 800102e:	e000      	b.n	8001032 <NVIC_EncodePriority+0x32>
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001034:	f04f 32ff 	mov.w	r2, #4294967295
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43da      	mvns	r2, r3
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	401a      	ands	r2, r3
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001048:	f04f 31ff 	mov.w	r1, #4294967295
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	fa01 f303 	lsl.w	r3, r1, r3
 8001052:	43d9      	mvns	r1, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001058:	4313      	orrs	r3, r2
}
 800105a:	4618      	mov	r0, r3
 800105c:	3724      	adds	r7, #36	@ 0x24
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
	...

08001068 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3b01      	subs	r3, #1
 8001074:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001078:	d301      	bcc.n	800107e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800107a:	2301      	movs	r3, #1
 800107c:	e00f      	b.n	800109e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800107e:	4a0a      	ldr	r2, [pc, #40]	@ (80010a8 <SysTick_Config+0x40>)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3b01      	subs	r3, #1
 8001084:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001086:	210f      	movs	r1, #15
 8001088:	f04f 30ff 	mov.w	r0, #4294967295
 800108c:	f7ff ff8e 	bl	8000fac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001090:	4b05      	ldr	r3, [pc, #20]	@ (80010a8 <SysTick_Config+0x40>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001096:	4b04      	ldr	r3, [pc, #16]	@ (80010a8 <SysTick_Config+0x40>)
 8001098:	2207      	movs	r2, #7
 800109a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	e000e010 	.word	0xe000e010

080010ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff ff47 	bl	8000f48 <__NVIC_SetPriorityGrouping>
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b086      	sub	sp, #24
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	4603      	mov	r3, r0
 80010ca:	60b9      	str	r1, [r7, #8]
 80010cc:	607a      	str	r2, [r7, #4]
 80010ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010d4:	f7ff ff5c 	bl	8000f90 <__NVIC_GetPriorityGrouping>
 80010d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	68b9      	ldr	r1, [r7, #8]
 80010de:	6978      	ldr	r0, [r7, #20]
 80010e0:	f7ff ff8e 	bl	8001000 <NVIC_EncodePriority>
 80010e4:	4602      	mov	r2, r0
 80010e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ea:	4611      	mov	r1, r2
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff5d 	bl	8000fac <__NVIC_SetPriority>
}
 80010f2:	bf00      	nop
 80010f4:	3718      	adds	r7, #24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b082      	sub	sp, #8
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff ffb0 	bl	8001068 <SysTick_Config>
 8001108:	4603      	mov	r3, r0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
	...

08001114 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001114:	b480      	push	{r7}
 8001116:	b087      	sub	sp, #28
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001122:	e14e      	b.n	80013c2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	2101      	movs	r1, #1
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	fa01 f303 	lsl.w	r3, r1, r3
 8001130:	4013      	ands	r3, r2
 8001132:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	2b00      	cmp	r3, #0
 8001138:	f000 8140 	beq.w	80013bc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f003 0303 	and.w	r3, r3, #3
 8001144:	2b01      	cmp	r3, #1
 8001146:	d005      	beq.n	8001154 <HAL_GPIO_Init+0x40>
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 0303 	and.w	r3, r3, #3
 8001150:	2b02      	cmp	r3, #2
 8001152:	d130      	bne.n	80011b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	2203      	movs	r2, #3
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	4013      	ands	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	68da      	ldr	r2, [r3, #12]
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	4313      	orrs	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800118a:	2201      	movs	r2, #1
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	43db      	mvns	r3, r3
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	4013      	ands	r3, r2
 8001198:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	091b      	lsrs	r3, r3, #4
 80011a0:	f003 0201 	and.w	r2, r3, #1
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f003 0303 	and.w	r3, r3, #3
 80011be:	2b03      	cmp	r3, #3
 80011c0:	d017      	beq.n	80011f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	2203      	movs	r2, #3
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43db      	mvns	r3, r3
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	4013      	ands	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	689a      	ldr	r2, [r3, #8]
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f003 0303 	and.w	r3, r3, #3
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d123      	bne.n	8001246 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	08da      	lsrs	r2, r3, #3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	3208      	adds	r2, #8
 8001206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800120a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	220f      	movs	r2, #15
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43db      	mvns	r3, r3
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	4013      	ands	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	691a      	ldr	r2, [r3, #16]
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	f003 0307 	and.w	r3, r3, #7
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	4313      	orrs	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	08da      	lsrs	r2, r3, #3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3208      	adds	r2, #8
 8001240:	6939      	ldr	r1, [r7, #16]
 8001242:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	2203      	movs	r2, #3
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43db      	mvns	r3, r3
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	4013      	ands	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f003 0203 	and.w	r2, r3, #3
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	4313      	orrs	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001282:	2b00      	cmp	r3, #0
 8001284:	f000 809a 	beq.w	80013bc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001288:	4b55      	ldr	r3, [pc, #340]	@ (80013e0 <HAL_GPIO_Init+0x2cc>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	4a54      	ldr	r2, [pc, #336]	@ (80013e0 <HAL_GPIO_Init+0x2cc>)
 800128e:	f043 0301 	orr.w	r3, r3, #1
 8001292:	6193      	str	r3, [r2, #24]
 8001294:	4b52      	ldr	r3, [pc, #328]	@ (80013e0 <HAL_GPIO_Init+0x2cc>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	f003 0301 	and.w	r3, r3, #1
 800129c:	60bb      	str	r3, [r7, #8]
 800129e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012a0:	4a50      	ldr	r2, [pc, #320]	@ (80013e4 <HAL_GPIO_Init+0x2d0>)
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	089b      	lsrs	r3, r3, #2
 80012a6:	3302      	adds	r3, #2
 80012a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	f003 0303 	and.w	r3, r3, #3
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	220f      	movs	r2, #15
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	43db      	mvns	r3, r3
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	4013      	ands	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80012ca:	d013      	beq.n	80012f4 <HAL_GPIO_Init+0x1e0>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4a46      	ldr	r2, [pc, #280]	@ (80013e8 <HAL_GPIO_Init+0x2d4>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d00d      	beq.n	80012f0 <HAL_GPIO_Init+0x1dc>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4a45      	ldr	r2, [pc, #276]	@ (80013ec <HAL_GPIO_Init+0x2d8>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d007      	beq.n	80012ec <HAL_GPIO_Init+0x1d8>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4a44      	ldr	r2, [pc, #272]	@ (80013f0 <HAL_GPIO_Init+0x2dc>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d101      	bne.n	80012e8 <HAL_GPIO_Init+0x1d4>
 80012e4:	2303      	movs	r3, #3
 80012e6:	e006      	b.n	80012f6 <HAL_GPIO_Init+0x1e2>
 80012e8:	2305      	movs	r3, #5
 80012ea:	e004      	b.n	80012f6 <HAL_GPIO_Init+0x1e2>
 80012ec:	2302      	movs	r3, #2
 80012ee:	e002      	b.n	80012f6 <HAL_GPIO_Init+0x1e2>
 80012f0:	2301      	movs	r3, #1
 80012f2:	e000      	b.n	80012f6 <HAL_GPIO_Init+0x1e2>
 80012f4:	2300      	movs	r3, #0
 80012f6:	697a      	ldr	r2, [r7, #20]
 80012f8:	f002 0203 	and.w	r2, r2, #3
 80012fc:	0092      	lsls	r2, r2, #2
 80012fe:	4093      	lsls	r3, r2
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	4313      	orrs	r3, r2
 8001304:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001306:	4937      	ldr	r1, [pc, #220]	@ (80013e4 <HAL_GPIO_Init+0x2d0>)
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	089b      	lsrs	r3, r3, #2
 800130c:	3302      	adds	r3, #2
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001314:	4b37      	ldr	r3, [pc, #220]	@ (80013f4 <HAL_GPIO_Init+0x2e0>)
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	43db      	mvns	r3, r3
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	4013      	ands	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d003      	beq.n	8001338 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	4313      	orrs	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001338:	4a2e      	ldr	r2, [pc, #184]	@ (80013f4 <HAL_GPIO_Init+0x2e0>)
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800133e:	4b2d      	ldr	r3, [pc, #180]	@ (80013f4 <HAL_GPIO_Init+0x2e0>)
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	43db      	mvns	r3, r3
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	4013      	ands	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d003      	beq.n	8001362 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	4313      	orrs	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001362:	4a24      	ldr	r2, [pc, #144]	@ (80013f4 <HAL_GPIO_Init+0x2e0>)
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001368:	4b22      	ldr	r3, [pc, #136]	@ (80013f4 <HAL_GPIO_Init+0x2e0>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	43db      	mvns	r3, r3
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	4013      	ands	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d003      	beq.n	800138c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	4313      	orrs	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800138c:	4a19      	ldr	r2, [pc, #100]	@ (80013f4 <HAL_GPIO_Init+0x2e0>)
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001392:	4b18      	ldr	r3, [pc, #96]	@ (80013f4 <HAL_GPIO_Init+0x2e0>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	43db      	mvns	r3, r3
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	4013      	ands	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d003      	beq.n	80013b6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80013b6:	4a0f      	ldr	r2, [pc, #60]	@ (80013f4 <HAL_GPIO_Init+0x2e0>)
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	3301      	adds	r3, #1
 80013c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	fa22 f303 	lsr.w	r3, r2, r3
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	f47f aea9 	bne.w	8001124 <HAL_GPIO_Init+0x10>
  }
}
 80013d2:	bf00      	nop
 80013d4:	bf00      	nop
 80013d6:	371c      	adds	r7, #28
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	40021000 	.word	0x40021000
 80013e4:	40010000 	.word	0x40010000
 80013e8:	48000400 	.word	0x48000400
 80013ec:	48000800 	.word	0x48000800
 80013f0:	48000c00 	.word	0x48000c00
 80013f4:	40010400 	.word	0x40010400

080013f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	460b      	mov	r3, r1
 8001402:	807b      	strh	r3, [r7, #2]
 8001404:	4613      	mov	r3, r2
 8001406:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001408:	787b      	ldrb	r3, [r7, #1]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d003      	beq.n	8001416 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800140e:	887a      	ldrh	r2, [r7, #2]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001414:	e002      	b.n	800141c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001416:	887a      	ldrh	r2, [r7, #2]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800141c:	bf00      	nop
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800142e:	af00      	add	r7, sp, #0
 8001430:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001434:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001438:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800143a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800143e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d102      	bne.n	800144e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	f001 b823 	b.w	8002494 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800144e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001452:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	2b00      	cmp	r3, #0
 8001460:	f000 817d 	beq.w	800175e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001464:	4bbc      	ldr	r3, [pc, #752]	@ (8001758 <HAL_RCC_OscConfig+0x330>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f003 030c 	and.w	r3, r3, #12
 800146c:	2b04      	cmp	r3, #4
 800146e:	d00c      	beq.n	800148a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001470:	4bb9      	ldr	r3, [pc, #740]	@ (8001758 <HAL_RCC_OscConfig+0x330>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f003 030c 	and.w	r3, r3, #12
 8001478:	2b08      	cmp	r3, #8
 800147a:	d15c      	bne.n	8001536 <HAL_RCC_OscConfig+0x10e>
 800147c:	4bb6      	ldr	r3, [pc, #728]	@ (8001758 <HAL_RCC_OscConfig+0x330>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001484:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001488:	d155      	bne.n	8001536 <HAL_RCC_OscConfig+0x10e>
 800148a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800148e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001492:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001496:	fa93 f3a3 	rbit	r3, r3
 800149a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800149e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a2:	fab3 f383 	clz	r3, r3
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	095b      	lsrs	r3, r3, #5
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d102      	bne.n	80014bc <HAL_RCC_OscConfig+0x94>
 80014b6:	4ba8      	ldr	r3, [pc, #672]	@ (8001758 <HAL_RCC_OscConfig+0x330>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	e015      	b.n	80014e8 <HAL_RCC_OscConfig+0xc0>
 80014bc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80014c0:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80014c8:	fa93 f3a3 	rbit	r3, r3
 80014cc:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80014d0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80014d4:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80014d8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80014dc:	fa93 f3a3 	rbit	r3, r3
 80014e0:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80014e4:	4b9c      	ldr	r3, [pc, #624]	@ (8001758 <HAL_RCC_OscConfig+0x330>)
 80014e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014e8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80014ec:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80014f0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80014f4:	fa92 f2a2 	rbit	r2, r2
 80014f8:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80014fc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001500:	fab2 f282 	clz	r2, r2
 8001504:	b2d2      	uxtb	r2, r2
 8001506:	f042 0220 	orr.w	r2, r2, #32
 800150a:	b2d2      	uxtb	r2, r2
 800150c:	f002 021f 	and.w	r2, r2, #31
 8001510:	2101      	movs	r1, #1
 8001512:	fa01 f202 	lsl.w	r2, r1, r2
 8001516:	4013      	ands	r3, r2
 8001518:	2b00      	cmp	r3, #0
 800151a:	f000 811f 	beq.w	800175c <HAL_RCC_OscConfig+0x334>
 800151e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001522:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	f040 8116 	bne.w	800175c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	f000 bfaf 	b.w	8002494 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001536:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800153a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001546:	d106      	bne.n	8001556 <HAL_RCC_OscConfig+0x12e>
 8001548:	4b83      	ldr	r3, [pc, #524]	@ (8001758 <HAL_RCC_OscConfig+0x330>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a82      	ldr	r2, [pc, #520]	@ (8001758 <HAL_RCC_OscConfig+0x330>)
 800154e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001552:	6013      	str	r3, [r2, #0]
 8001554:	e036      	b.n	80015c4 <HAL_RCC_OscConfig+0x19c>
 8001556:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800155a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d10c      	bne.n	8001580 <HAL_RCC_OscConfig+0x158>
 8001566:	4b7c      	ldr	r3, [pc, #496]	@ (8001758 <HAL_RCC_OscConfig+0x330>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a7b      	ldr	r2, [pc, #492]	@ (8001758 <HAL_RCC_OscConfig+0x330>)
 800156c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001570:	6013      	str	r3, [r2, #0]
 8001572:	4b79      	ldr	r3, [pc, #484]	@ (8001758 <HAL_RCC_OscConfig+0x330>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a78      	ldr	r2, [pc, #480]	@ (8001758 <HAL_RCC_OscConfig+0x330>)
 8001578:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800157c:	6013      	str	r3, [r2, #0]
 800157e:	e021      	b.n	80015c4 <HAL_RCC_OscConfig+0x19c>
 8001580:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001584:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001590:	d10c      	bne.n	80015ac <HAL_RCC_OscConfig+0x184>
 8001592:	4b71      	ldr	r3, [pc, #452]	@ (8001758 <HAL_RCC_OscConfig+0x330>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a70      	ldr	r2, [pc, #448]	@ (8001758 <HAL_RCC_OscConfig+0x330>)
 8001598:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800159c:	6013      	str	r3, [r2, #0]
 800159e:	4b6e      	ldr	r3, [pc, #440]	@ (8001758 <HAL_RCC_OscConfig+0x330>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a6d      	ldr	r2, [pc, #436]	@ (8001758 <HAL_RCC_OscConfig+0x330>)
 80015a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015a8:	6013      	str	r3, [r2, #0]
 80015aa:	e00b      	b.n	80015c4 <HAL_RCC_OscConfig+0x19c>
 80015ac:	4b6a      	ldr	r3, [pc, #424]	@ (8001758 <HAL_RCC_OscConfig+0x330>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a69      	ldr	r2, [pc, #420]	@ (8001758 <HAL_RCC_OscConfig+0x330>)
 80015b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015b6:	6013      	str	r3, [r2, #0]
 80015b8:	4b67      	ldr	r3, [pc, #412]	@ (8001758 <HAL_RCC_OscConfig+0x330>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a66      	ldr	r2, [pc, #408]	@ (8001758 <HAL_RCC_OscConfig+0x330>)
 80015be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015c2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015c4:	4b64      	ldr	r3, [pc, #400]	@ (8001758 <HAL_RCC_OscConfig+0x330>)
 80015c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015c8:	f023 020f 	bic.w	r2, r3, #15
 80015cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015d0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	495f      	ldr	r1, [pc, #380]	@ (8001758 <HAL_RCC_OscConfig+0x330>)
 80015da:	4313      	orrs	r3, r2
 80015dc:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d059      	beq.n	80016a2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ee:	f7ff fc7b 	bl	8000ee8 <HAL_GetTick>
 80015f2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015f6:	e00a      	b.n	800160e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015f8:	f7ff fc76 	bl	8000ee8 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	2b64      	cmp	r3, #100	@ 0x64
 8001606:	d902      	bls.n	800160e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	f000 bf43 	b.w	8002494 <HAL_RCC_OscConfig+0x106c>
 800160e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001612:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001616:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800161a:	fa93 f3a3 	rbit	r3, r3
 800161e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001622:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001626:	fab3 f383 	clz	r3, r3
 800162a:	b2db      	uxtb	r3, r3
 800162c:	095b      	lsrs	r3, r3, #5
 800162e:	b2db      	uxtb	r3, r3
 8001630:	f043 0301 	orr.w	r3, r3, #1
 8001634:	b2db      	uxtb	r3, r3
 8001636:	2b01      	cmp	r3, #1
 8001638:	d102      	bne.n	8001640 <HAL_RCC_OscConfig+0x218>
 800163a:	4b47      	ldr	r3, [pc, #284]	@ (8001758 <HAL_RCC_OscConfig+0x330>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	e015      	b.n	800166c <HAL_RCC_OscConfig+0x244>
 8001640:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001644:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001648:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800164c:	fa93 f3a3 	rbit	r3, r3
 8001650:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001654:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001658:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800165c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001660:	fa93 f3a3 	rbit	r3, r3
 8001664:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001668:	4b3b      	ldr	r3, [pc, #236]	@ (8001758 <HAL_RCC_OscConfig+0x330>)
 800166a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800166c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001670:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001674:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001678:	fa92 f2a2 	rbit	r2, r2
 800167c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001680:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001684:	fab2 f282 	clz	r2, r2
 8001688:	b2d2      	uxtb	r2, r2
 800168a:	f042 0220 	orr.w	r2, r2, #32
 800168e:	b2d2      	uxtb	r2, r2
 8001690:	f002 021f 	and.w	r2, r2, #31
 8001694:	2101      	movs	r1, #1
 8001696:	fa01 f202 	lsl.w	r2, r1, r2
 800169a:	4013      	ands	r3, r2
 800169c:	2b00      	cmp	r3, #0
 800169e:	d0ab      	beq.n	80015f8 <HAL_RCC_OscConfig+0x1d0>
 80016a0:	e05d      	b.n	800175e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a2:	f7ff fc21 	bl	8000ee8 <HAL_GetTick>
 80016a6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016aa:	e00a      	b.n	80016c2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016ac:	f7ff fc1c 	bl	8000ee8 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b64      	cmp	r3, #100	@ 0x64
 80016ba:	d902      	bls.n	80016c2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	f000 bee9 	b.w	8002494 <HAL_RCC_OscConfig+0x106c>
 80016c2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80016c6:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ca:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80016ce:	fa93 f3a3 	rbit	r3, r3
 80016d2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80016d6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016da:	fab3 f383 	clz	r3, r3
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	095b      	lsrs	r3, r3, #5
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d102      	bne.n	80016f4 <HAL_RCC_OscConfig+0x2cc>
 80016ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001758 <HAL_RCC_OscConfig+0x330>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	e015      	b.n	8001720 <HAL_RCC_OscConfig+0x2f8>
 80016f4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80016f8:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016fc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001700:	fa93 f3a3 	rbit	r3, r3
 8001704:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001708:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800170c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001710:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001714:	fa93 f3a3 	rbit	r3, r3
 8001718:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800171c:	4b0e      	ldr	r3, [pc, #56]	@ (8001758 <HAL_RCC_OscConfig+0x330>)
 800171e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001720:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001724:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001728:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800172c:	fa92 f2a2 	rbit	r2, r2
 8001730:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001734:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001738:	fab2 f282 	clz	r2, r2
 800173c:	b2d2      	uxtb	r2, r2
 800173e:	f042 0220 	orr.w	r2, r2, #32
 8001742:	b2d2      	uxtb	r2, r2
 8001744:	f002 021f 	and.w	r2, r2, #31
 8001748:	2101      	movs	r1, #1
 800174a:	fa01 f202 	lsl.w	r2, r1, r2
 800174e:	4013      	ands	r3, r2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d1ab      	bne.n	80016ac <HAL_RCC_OscConfig+0x284>
 8001754:	e003      	b.n	800175e <HAL_RCC_OscConfig+0x336>
 8001756:	bf00      	nop
 8001758:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800175c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800175e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001762:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	f000 817d 	beq.w	8001a6e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001774:	4ba6      	ldr	r3, [pc, #664]	@ (8001a10 <HAL_RCC_OscConfig+0x5e8>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f003 030c 	and.w	r3, r3, #12
 800177c:	2b00      	cmp	r3, #0
 800177e:	d00b      	beq.n	8001798 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001780:	4ba3      	ldr	r3, [pc, #652]	@ (8001a10 <HAL_RCC_OscConfig+0x5e8>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f003 030c 	and.w	r3, r3, #12
 8001788:	2b08      	cmp	r3, #8
 800178a:	d172      	bne.n	8001872 <HAL_RCC_OscConfig+0x44a>
 800178c:	4ba0      	ldr	r3, [pc, #640]	@ (8001a10 <HAL_RCC_OscConfig+0x5e8>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d16c      	bne.n	8001872 <HAL_RCC_OscConfig+0x44a>
 8001798:	2302      	movs	r3, #2
 800179a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800179e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80017a2:	fa93 f3a3 	rbit	r3, r3
 80017a6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80017aa:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ae:	fab3 f383 	clz	r3, r3
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	095b      	lsrs	r3, r3, #5
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d102      	bne.n	80017c8 <HAL_RCC_OscConfig+0x3a0>
 80017c2:	4b93      	ldr	r3, [pc, #588]	@ (8001a10 <HAL_RCC_OscConfig+0x5e8>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	e013      	b.n	80017f0 <HAL_RCC_OscConfig+0x3c8>
 80017c8:	2302      	movs	r3, #2
 80017ca:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ce:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80017d2:	fa93 f3a3 	rbit	r3, r3
 80017d6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80017da:	2302      	movs	r3, #2
 80017dc:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80017e0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80017e4:	fa93 f3a3 	rbit	r3, r3
 80017e8:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80017ec:	4b88      	ldr	r3, [pc, #544]	@ (8001a10 <HAL_RCC_OscConfig+0x5e8>)
 80017ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017f0:	2202      	movs	r2, #2
 80017f2:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80017f6:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80017fa:	fa92 f2a2 	rbit	r2, r2
 80017fe:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001802:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001806:	fab2 f282 	clz	r2, r2
 800180a:	b2d2      	uxtb	r2, r2
 800180c:	f042 0220 	orr.w	r2, r2, #32
 8001810:	b2d2      	uxtb	r2, r2
 8001812:	f002 021f 	and.w	r2, r2, #31
 8001816:	2101      	movs	r1, #1
 8001818:	fa01 f202 	lsl.w	r2, r1, r2
 800181c:	4013      	ands	r3, r2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d00a      	beq.n	8001838 <HAL_RCC_OscConfig+0x410>
 8001822:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001826:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d002      	beq.n	8001838 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	f000 be2e 	b.w	8002494 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001838:	4b75      	ldr	r3, [pc, #468]	@ (8001a10 <HAL_RCC_OscConfig+0x5e8>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001840:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001844:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	695b      	ldr	r3, [r3, #20]
 800184c:	21f8      	movs	r1, #248	@ 0xf8
 800184e:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001852:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001856:	fa91 f1a1 	rbit	r1, r1
 800185a:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800185e:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001862:	fab1 f181 	clz	r1, r1
 8001866:	b2c9      	uxtb	r1, r1
 8001868:	408b      	lsls	r3, r1
 800186a:	4969      	ldr	r1, [pc, #420]	@ (8001a10 <HAL_RCC_OscConfig+0x5e8>)
 800186c:	4313      	orrs	r3, r2
 800186e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001870:	e0fd      	b.n	8001a6e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001872:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001876:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	691b      	ldr	r3, [r3, #16]
 800187e:	2b00      	cmp	r3, #0
 8001880:	f000 8088 	beq.w	8001994 <HAL_RCC_OscConfig+0x56c>
 8001884:	2301      	movs	r3, #1
 8001886:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800188e:	fa93 f3a3 	rbit	r3, r3
 8001892:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001896:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800189a:	fab3 f383 	clz	r3, r3
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80018a4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	461a      	mov	r2, r3
 80018ac:	2301      	movs	r3, #1
 80018ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b0:	f7ff fb1a 	bl	8000ee8 <HAL_GetTick>
 80018b4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b8:	e00a      	b.n	80018d0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018ba:	f7ff fb15 	bl	8000ee8 <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d902      	bls.n	80018d0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	f000 bde2 	b.w	8002494 <HAL_RCC_OscConfig+0x106c>
 80018d0:	2302      	movs	r3, #2
 80018d2:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d6:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80018da:	fa93 f3a3 	rbit	r3, r3
 80018de:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80018e2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e6:	fab3 f383 	clz	r3, r3
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	095b      	lsrs	r3, r3, #5
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d102      	bne.n	8001900 <HAL_RCC_OscConfig+0x4d8>
 80018fa:	4b45      	ldr	r3, [pc, #276]	@ (8001a10 <HAL_RCC_OscConfig+0x5e8>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	e013      	b.n	8001928 <HAL_RCC_OscConfig+0x500>
 8001900:	2302      	movs	r3, #2
 8001902:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001906:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800190a:	fa93 f3a3 	rbit	r3, r3
 800190e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001912:	2302      	movs	r3, #2
 8001914:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001918:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800191c:	fa93 f3a3 	rbit	r3, r3
 8001920:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001924:	4b3a      	ldr	r3, [pc, #232]	@ (8001a10 <HAL_RCC_OscConfig+0x5e8>)
 8001926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001928:	2202      	movs	r2, #2
 800192a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800192e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001932:	fa92 f2a2 	rbit	r2, r2
 8001936:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800193a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800193e:	fab2 f282 	clz	r2, r2
 8001942:	b2d2      	uxtb	r2, r2
 8001944:	f042 0220 	orr.w	r2, r2, #32
 8001948:	b2d2      	uxtb	r2, r2
 800194a:	f002 021f 	and.w	r2, r2, #31
 800194e:	2101      	movs	r1, #1
 8001950:	fa01 f202 	lsl.w	r2, r1, r2
 8001954:	4013      	ands	r3, r2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d0af      	beq.n	80018ba <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800195a:	4b2d      	ldr	r3, [pc, #180]	@ (8001a10 <HAL_RCC_OscConfig+0x5e8>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001962:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001966:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	695b      	ldr	r3, [r3, #20]
 800196e:	21f8      	movs	r1, #248	@ 0xf8
 8001970:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001974:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001978:	fa91 f1a1 	rbit	r1, r1
 800197c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001980:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001984:	fab1 f181 	clz	r1, r1
 8001988:	b2c9      	uxtb	r1, r1
 800198a:	408b      	lsls	r3, r1
 800198c:	4920      	ldr	r1, [pc, #128]	@ (8001a10 <HAL_RCC_OscConfig+0x5e8>)
 800198e:	4313      	orrs	r3, r2
 8001990:	600b      	str	r3, [r1, #0]
 8001992:	e06c      	b.n	8001a6e <HAL_RCC_OscConfig+0x646>
 8001994:	2301      	movs	r3, #1
 8001996:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800199e:	fa93 f3a3 	rbit	r3, r3
 80019a2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80019a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019aa:	fab3 f383 	clz	r3, r3
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80019b4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	461a      	mov	r2, r3
 80019bc:	2300      	movs	r3, #0
 80019be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c0:	f7ff fa92 	bl	8000ee8 <HAL_GetTick>
 80019c4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019c8:	e00a      	b.n	80019e0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019ca:	f7ff fa8d 	bl	8000ee8 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d902      	bls.n	80019e0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	f000 bd5a 	b.w	8002494 <HAL_RCC_OscConfig+0x106c>
 80019e0:	2302      	movs	r3, #2
 80019e2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80019ea:	fa93 f3a3 	rbit	r3, r3
 80019ee:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80019f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019f6:	fab3 f383 	clz	r3, r3
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	095b      	lsrs	r3, r3, #5
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	f043 0301 	orr.w	r3, r3, #1
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d104      	bne.n	8001a14 <HAL_RCC_OscConfig+0x5ec>
 8001a0a:	4b01      	ldr	r3, [pc, #4]	@ (8001a10 <HAL_RCC_OscConfig+0x5e8>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	e015      	b.n	8001a3c <HAL_RCC_OscConfig+0x614>
 8001a10:	40021000 	.word	0x40021000
 8001a14:	2302      	movs	r3, #2
 8001a16:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001a1e:	fa93 f3a3 	rbit	r3, r3
 8001a22:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001a26:	2302      	movs	r3, #2
 8001a28:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001a2c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001a30:	fa93 f3a3 	rbit	r3, r3
 8001a34:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001a38:	4bc8      	ldr	r3, [pc, #800]	@ (8001d5c <HAL_RCC_OscConfig+0x934>)
 8001a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a3c:	2202      	movs	r2, #2
 8001a3e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001a42:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001a46:	fa92 f2a2 	rbit	r2, r2
 8001a4a:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001a4e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001a52:	fab2 f282 	clz	r2, r2
 8001a56:	b2d2      	uxtb	r2, r2
 8001a58:	f042 0220 	orr.w	r2, r2, #32
 8001a5c:	b2d2      	uxtb	r2, r2
 8001a5e:	f002 021f 	and.w	r2, r2, #31
 8001a62:	2101      	movs	r1, #1
 8001a64:	fa01 f202 	lsl.w	r2, r1, r2
 8001a68:	4013      	ands	r3, r2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1ad      	bne.n	80019ca <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a72:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0308 	and.w	r3, r3, #8
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f000 8110 	beq.w	8001ca4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a88:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d079      	beq.n	8001b88 <HAL_RCC_OscConfig+0x760>
 8001a94:	2301      	movs	r3, #1
 8001a96:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001a9e:	fa93 f3a3 	rbit	r3, r3
 8001aa2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001aa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aaa:	fab3 f383 	clz	r3, r3
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4bab      	ldr	r3, [pc, #684]	@ (8001d60 <HAL_RCC_OscConfig+0x938>)
 8001ab4:	4413      	add	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	461a      	mov	r2, r3
 8001aba:	2301      	movs	r3, #1
 8001abc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001abe:	f7ff fa13 	bl	8000ee8 <HAL_GetTick>
 8001ac2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ac6:	e00a      	b.n	8001ade <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ac8:	f7ff fa0e 	bl	8000ee8 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d902      	bls.n	8001ade <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	f000 bcdb 	b.w	8002494 <HAL_RCC_OscConfig+0x106c>
 8001ade:	2302      	movs	r3, #2
 8001ae0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001ae8:	fa93 f3a3 	rbit	r3, r3
 8001aec:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001af0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001af4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001af8:	2202      	movs	r2, #2
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b00:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	fa93 f2a3 	rbit	r2, r3
 8001b0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b0e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001b1c:	2202      	movs	r2, #2
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	fa93 f2a3 	rbit	r2, r3
 8001b2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b32:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001b36:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b38:	4b88      	ldr	r3, [pc, #544]	@ (8001d5c <HAL_RCC_OscConfig+0x934>)
 8001b3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b40:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001b44:	2102      	movs	r1, #2
 8001b46:	6019      	str	r1, [r3, #0]
 8001b48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b4c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	fa93 f1a3 	rbit	r1, r3
 8001b56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b5a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001b5e:	6019      	str	r1, [r3, #0]
  return result;
 8001b60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b64:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	fab3 f383 	clz	r3, r3
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	f003 031f 	and.w	r3, r3, #31
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b80:	4013      	ands	r3, r2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d0a0      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x6a0>
 8001b86:	e08d      	b.n	8001ca4 <HAL_RCC_OscConfig+0x87c>
 8001b88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b8c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001b90:	2201      	movs	r2, #1
 8001b92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b98:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	fa93 f2a3 	rbit	r2, r3
 8001ba2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ba6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001baa:	601a      	str	r2, [r3, #0]
  return result;
 8001bac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bb0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001bb4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bb6:	fab3 f383 	clz	r3, r3
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	4b68      	ldr	r3, [pc, #416]	@ (8001d60 <HAL_RCC_OscConfig+0x938>)
 8001bc0:	4413      	add	r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bca:	f7ff f98d 	bl	8000ee8 <HAL_GetTick>
 8001bce:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bd2:	e00a      	b.n	8001bea <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bd4:	f7ff f988 	bl	8000ee8 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d902      	bls.n	8001bea <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	f000 bc55 	b.w	8002494 <HAL_RCC_OscConfig+0x106c>
 8001bea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bee:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001bf2:	2202      	movs	r2, #2
 8001bf4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bfa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	fa93 f2a3 	rbit	r2, r3
 8001c04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c08:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c12:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001c16:	2202      	movs	r2, #2
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c1e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	fa93 f2a3 	rbit	r2, r3
 8001c28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c2c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c36:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001c3a:	2202      	movs	r2, #2
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c42:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	fa93 f2a3 	rbit	r2, r3
 8001c4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c50:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001c54:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c56:	4b41      	ldr	r3, [pc, #260]	@ (8001d5c <HAL_RCC_OscConfig+0x934>)
 8001c58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c5e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001c62:	2102      	movs	r1, #2
 8001c64:	6019      	str	r1, [r3, #0]
 8001c66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c6a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	fa93 f1a3 	rbit	r1, r3
 8001c74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c78:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001c7c:	6019      	str	r1, [r3, #0]
  return result;
 8001c7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c82:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	fab3 f383 	clz	r3, r3
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	f003 031f 	and.w	r3, r3, #31
 8001c98:	2101      	movs	r1, #1
 8001c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d197      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ca4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ca8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0304 	and.w	r3, r3, #4
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	f000 81a1 	beq.w	8001ffc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cc0:	4b26      	ldr	r3, [pc, #152]	@ (8001d5c <HAL_RCC_OscConfig+0x934>)
 8001cc2:	69db      	ldr	r3, [r3, #28]
 8001cc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d116      	bne.n	8001cfa <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ccc:	4b23      	ldr	r3, [pc, #140]	@ (8001d5c <HAL_RCC_OscConfig+0x934>)
 8001cce:	69db      	ldr	r3, [r3, #28]
 8001cd0:	4a22      	ldr	r2, [pc, #136]	@ (8001d5c <HAL_RCC_OscConfig+0x934>)
 8001cd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cd6:	61d3      	str	r3, [r2, #28]
 8001cd8:	4b20      	ldr	r3, [pc, #128]	@ (8001d5c <HAL_RCC_OscConfig+0x934>)
 8001cda:	69db      	ldr	r3, [r3, #28]
 8001cdc:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001ce0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ce4:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cee:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001cf2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cfa:	4b1a      	ldr	r3, [pc, #104]	@ (8001d64 <HAL_RCC_OscConfig+0x93c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d11a      	bne.n	8001d3c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d06:	4b17      	ldr	r3, [pc, #92]	@ (8001d64 <HAL_RCC_OscConfig+0x93c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a16      	ldr	r2, [pc, #88]	@ (8001d64 <HAL_RCC_OscConfig+0x93c>)
 8001d0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d10:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d12:	f7ff f8e9 	bl	8000ee8 <HAL_GetTick>
 8001d16:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d1a:	e009      	b.n	8001d30 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d1c:	f7ff f8e4 	bl	8000ee8 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b64      	cmp	r3, #100	@ 0x64
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e3b1      	b.n	8002494 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d30:	4b0c      	ldr	r3, [pc, #48]	@ (8001d64 <HAL_RCC_OscConfig+0x93c>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0ef      	beq.n	8001d1c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d40:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d10d      	bne.n	8001d68 <HAL_RCC_OscConfig+0x940>
 8001d4c:	4b03      	ldr	r3, [pc, #12]	@ (8001d5c <HAL_RCC_OscConfig+0x934>)
 8001d4e:	6a1b      	ldr	r3, [r3, #32]
 8001d50:	4a02      	ldr	r2, [pc, #8]	@ (8001d5c <HAL_RCC_OscConfig+0x934>)
 8001d52:	f043 0301 	orr.w	r3, r3, #1
 8001d56:	6213      	str	r3, [r2, #32]
 8001d58:	e03c      	b.n	8001dd4 <HAL_RCC_OscConfig+0x9ac>
 8001d5a:	bf00      	nop
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	10908120 	.word	0x10908120
 8001d64:	40007000 	.word	0x40007000
 8001d68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d6c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d10c      	bne.n	8001d92 <HAL_RCC_OscConfig+0x96a>
 8001d78:	4bc1      	ldr	r3, [pc, #772]	@ (8002080 <HAL_RCC_OscConfig+0xc58>)
 8001d7a:	6a1b      	ldr	r3, [r3, #32]
 8001d7c:	4ac0      	ldr	r2, [pc, #768]	@ (8002080 <HAL_RCC_OscConfig+0xc58>)
 8001d7e:	f023 0301 	bic.w	r3, r3, #1
 8001d82:	6213      	str	r3, [r2, #32]
 8001d84:	4bbe      	ldr	r3, [pc, #760]	@ (8002080 <HAL_RCC_OscConfig+0xc58>)
 8001d86:	6a1b      	ldr	r3, [r3, #32]
 8001d88:	4abd      	ldr	r2, [pc, #756]	@ (8002080 <HAL_RCC_OscConfig+0xc58>)
 8001d8a:	f023 0304 	bic.w	r3, r3, #4
 8001d8e:	6213      	str	r3, [r2, #32]
 8001d90:	e020      	b.n	8001dd4 <HAL_RCC_OscConfig+0x9ac>
 8001d92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d96:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	2b05      	cmp	r3, #5
 8001da0:	d10c      	bne.n	8001dbc <HAL_RCC_OscConfig+0x994>
 8001da2:	4bb7      	ldr	r3, [pc, #732]	@ (8002080 <HAL_RCC_OscConfig+0xc58>)
 8001da4:	6a1b      	ldr	r3, [r3, #32]
 8001da6:	4ab6      	ldr	r2, [pc, #728]	@ (8002080 <HAL_RCC_OscConfig+0xc58>)
 8001da8:	f043 0304 	orr.w	r3, r3, #4
 8001dac:	6213      	str	r3, [r2, #32]
 8001dae:	4bb4      	ldr	r3, [pc, #720]	@ (8002080 <HAL_RCC_OscConfig+0xc58>)
 8001db0:	6a1b      	ldr	r3, [r3, #32]
 8001db2:	4ab3      	ldr	r2, [pc, #716]	@ (8002080 <HAL_RCC_OscConfig+0xc58>)
 8001db4:	f043 0301 	orr.w	r3, r3, #1
 8001db8:	6213      	str	r3, [r2, #32]
 8001dba:	e00b      	b.n	8001dd4 <HAL_RCC_OscConfig+0x9ac>
 8001dbc:	4bb0      	ldr	r3, [pc, #704]	@ (8002080 <HAL_RCC_OscConfig+0xc58>)
 8001dbe:	6a1b      	ldr	r3, [r3, #32]
 8001dc0:	4aaf      	ldr	r2, [pc, #700]	@ (8002080 <HAL_RCC_OscConfig+0xc58>)
 8001dc2:	f023 0301 	bic.w	r3, r3, #1
 8001dc6:	6213      	str	r3, [r2, #32]
 8001dc8:	4bad      	ldr	r3, [pc, #692]	@ (8002080 <HAL_RCC_OscConfig+0xc58>)
 8001dca:	6a1b      	ldr	r3, [r3, #32]
 8001dcc:	4aac      	ldr	r2, [pc, #688]	@ (8002080 <HAL_RCC_OscConfig+0xc58>)
 8001dce:	f023 0304 	bic.w	r3, r3, #4
 8001dd2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dd8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	f000 8081 	beq.w	8001ee8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de6:	f7ff f87f 	bl	8000ee8 <HAL_GetTick>
 8001dea:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dee:	e00b      	b.n	8001e08 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001df0:	f7ff f87a 	bl	8000ee8 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d901      	bls.n	8001e08 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e345      	b.n	8002494 <HAL_RCC_OscConfig+0x106c>
 8001e08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e0c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001e10:	2202      	movs	r2, #2
 8001e12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e18:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	fa93 f2a3 	rbit	r2, r3
 8001e22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e26:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e30:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001e34:	2202      	movs	r2, #2
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e3c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	fa93 f2a3 	rbit	r2, r3
 8001e46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e4a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001e4e:	601a      	str	r2, [r3, #0]
  return result;
 8001e50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e54:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001e58:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e5a:	fab3 f383 	clz	r3, r3
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	095b      	lsrs	r3, r3, #5
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	f043 0302 	orr.w	r3, r3, #2
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d102      	bne.n	8001e74 <HAL_RCC_OscConfig+0xa4c>
 8001e6e:	4b84      	ldr	r3, [pc, #528]	@ (8002080 <HAL_RCC_OscConfig+0xc58>)
 8001e70:	6a1b      	ldr	r3, [r3, #32]
 8001e72:	e013      	b.n	8001e9c <HAL_RCC_OscConfig+0xa74>
 8001e74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e78:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001e7c:	2202      	movs	r2, #2
 8001e7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e84:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	fa93 f2a3 	rbit	r2, r3
 8001e8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e92:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	4b79      	ldr	r3, [pc, #484]	@ (8002080 <HAL_RCC_OscConfig+0xc58>)
 8001e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e9c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ea0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001ea4:	2102      	movs	r1, #2
 8001ea6:	6011      	str	r1, [r2, #0]
 8001ea8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001eac:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001eb0:	6812      	ldr	r2, [r2, #0]
 8001eb2:	fa92 f1a2 	rbit	r1, r2
 8001eb6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001eba:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001ebe:	6011      	str	r1, [r2, #0]
  return result;
 8001ec0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ec4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001ec8:	6812      	ldr	r2, [r2, #0]
 8001eca:	fab2 f282 	clz	r2, r2
 8001ece:	b2d2      	uxtb	r2, r2
 8001ed0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001ed4:	b2d2      	uxtb	r2, r2
 8001ed6:	f002 021f 	and.w	r2, r2, #31
 8001eda:	2101      	movs	r1, #1
 8001edc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d084      	beq.n	8001df0 <HAL_RCC_OscConfig+0x9c8>
 8001ee6:	e07f      	b.n	8001fe8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee8:	f7fe fffe 	bl	8000ee8 <HAL_GetTick>
 8001eec:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ef0:	e00b      	b.n	8001f0a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ef2:	f7fe fff9 	bl	8000ee8 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e2c4      	b.n	8002494 <HAL_RCC_OscConfig+0x106c>
 8001f0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f0e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001f12:	2202      	movs	r2, #2
 8001f14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f1a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	fa93 f2a3 	rbit	r2, r3
 8001f24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f28:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f32:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001f36:	2202      	movs	r2, #2
 8001f38:	601a      	str	r2, [r3, #0]
 8001f3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f3e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	fa93 f2a3 	rbit	r2, r3
 8001f48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f4c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001f50:	601a      	str	r2, [r3, #0]
  return result;
 8001f52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f56:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001f5a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f5c:	fab3 f383 	clz	r3, r3
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	095b      	lsrs	r3, r3, #5
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	f043 0302 	orr.w	r3, r3, #2
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d102      	bne.n	8001f76 <HAL_RCC_OscConfig+0xb4e>
 8001f70:	4b43      	ldr	r3, [pc, #268]	@ (8002080 <HAL_RCC_OscConfig+0xc58>)
 8001f72:	6a1b      	ldr	r3, [r3, #32]
 8001f74:	e013      	b.n	8001f9e <HAL_RCC_OscConfig+0xb76>
 8001f76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f7a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001f7e:	2202      	movs	r2, #2
 8001f80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f86:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	fa93 f2a3 	rbit	r2, r3
 8001f90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f94:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	4b39      	ldr	r3, [pc, #228]	@ (8002080 <HAL_RCC_OscConfig+0xc58>)
 8001f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f9e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001fa2:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001fa6:	2102      	movs	r1, #2
 8001fa8:	6011      	str	r1, [r2, #0]
 8001faa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001fae:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001fb2:	6812      	ldr	r2, [r2, #0]
 8001fb4:	fa92 f1a2 	rbit	r1, r2
 8001fb8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001fbc:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001fc0:	6011      	str	r1, [r2, #0]
  return result;
 8001fc2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001fc6:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001fca:	6812      	ldr	r2, [r2, #0]
 8001fcc:	fab2 f282 	clz	r2, r2
 8001fd0:	b2d2      	uxtb	r2, r2
 8001fd2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	f002 021f 	and.w	r2, r2, #31
 8001fdc:	2101      	movs	r1, #1
 8001fde:	fa01 f202 	lsl.w	r2, r1, r2
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d184      	bne.n	8001ef2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001fe8:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d105      	bne.n	8001ffc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ff0:	4b23      	ldr	r3, [pc, #140]	@ (8002080 <HAL_RCC_OscConfig+0xc58>)
 8001ff2:	69db      	ldr	r3, [r3, #28]
 8001ff4:	4a22      	ldr	r2, [pc, #136]	@ (8002080 <HAL_RCC_OscConfig+0xc58>)
 8001ff6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ffa:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ffc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002000:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	69db      	ldr	r3, [r3, #28]
 8002008:	2b00      	cmp	r3, #0
 800200a:	f000 8242 	beq.w	8002492 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800200e:	4b1c      	ldr	r3, [pc, #112]	@ (8002080 <HAL_RCC_OscConfig+0xc58>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f003 030c 	and.w	r3, r3, #12
 8002016:	2b08      	cmp	r3, #8
 8002018:	f000 8213 	beq.w	8002442 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800201c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002020:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	69db      	ldr	r3, [r3, #28]
 8002028:	2b02      	cmp	r3, #2
 800202a:	f040 8162 	bne.w	80022f2 <HAL_RCC_OscConfig+0xeca>
 800202e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002032:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002036:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800203a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002040:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	fa93 f2a3 	rbit	r2, r3
 800204a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800204e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002052:	601a      	str	r2, [r3, #0]
  return result;
 8002054:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002058:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800205c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800205e:	fab3 f383 	clz	r3, r3
 8002062:	b2db      	uxtb	r3, r3
 8002064:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002068:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	461a      	mov	r2, r3
 8002070:	2300      	movs	r3, #0
 8002072:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002074:	f7fe ff38 	bl	8000ee8 <HAL_GetTick>
 8002078:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800207c:	e00c      	b.n	8002098 <HAL_RCC_OscConfig+0xc70>
 800207e:	bf00      	nop
 8002080:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002084:	f7fe ff30 	bl	8000ee8 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e1fd      	b.n	8002494 <HAL_RCC_OscConfig+0x106c>
 8002098:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800209c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80020a0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80020a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020aa:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	fa93 f2a3 	rbit	r2, r3
 80020b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020b8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80020bc:	601a      	str	r2, [r3, #0]
  return result;
 80020be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020c2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80020c6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020c8:	fab3 f383 	clz	r3, r3
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	095b      	lsrs	r3, r3, #5
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	f043 0301 	orr.w	r3, r3, #1
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d102      	bne.n	80020e2 <HAL_RCC_OscConfig+0xcba>
 80020dc:	4bb0      	ldr	r3, [pc, #704]	@ (80023a0 <HAL_RCC_OscConfig+0xf78>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	e027      	b.n	8002132 <HAL_RCC_OscConfig+0xd0a>
 80020e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020e6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80020ea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80020ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020f4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	fa93 f2a3 	rbit	r2, r3
 80020fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002102:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800210c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002110:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800211a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	fa93 f2a3 	rbit	r2, r3
 8002124:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002128:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	4b9c      	ldr	r3, [pc, #624]	@ (80023a0 <HAL_RCC_OscConfig+0xf78>)
 8002130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002132:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002136:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800213a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800213e:	6011      	str	r1, [r2, #0]
 8002140:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002144:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002148:	6812      	ldr	r2, [r2, #0]
 800214a:	fa92 f1a2 	rbit	r1, r2
 800214e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002152:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002156:	6011      	str	r1, [r2, #0]
  return result;
 8002158:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800215c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002160:	6812      	ldr	r2, [r2, #0]
 8002162:	fab2 f282 	clz	r2, r2
 8002166:	b2d2      	uxtb	r2, r2
 8002168:	f042 0220 	orr.w	r2, r2, #32
 800216c:	b2d2      	uxtb	r2, r2
 800216e:	f002 021f 	and.w	r2, r2, #31
 8002172:	2101      	movs	r1, #1
 8002174:	fa01 f202 	lsl.w	r2, r1, r2
 8002178:	4013      	ands	r3, r2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d182      	bne.n	8002084 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800217e:	4b88      	ldr	r3, [pc, #544]	@ (80023a0 <HAL_RCC_OscConfig+0xf78>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002186:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800218a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002192:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002196:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6a1b      	ldr	r3, [r3, #32]
 800219e:	430b      	orrs	r3, r1
 80021a0:	497f      	ldr	r1, [pc, #508]	@ (80023a0 <HAL_RCC_OscConfig+0xf78>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	604b      	str	r3, [r1, #4]
 80021a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021aa:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80021ae:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80021b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021b8:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	fa93 f2a3 	rbit	r2, r3
 80021c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021c6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80021ca:	601a      	str	r2, [r3, #0]
  return result;
 80021cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021d0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80021d4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021d6:	fab3 f383 	clz	r3, r3
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80021e0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	461a      	mov	r2, r3
 80021e8:	2301      	movs	r3, #1
 80021ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ec:	f7fe fe7c 	bl	8000ee8 <HAL_GetTick>
 80021f0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021f4:	e009      	b.n	800220a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021f6:	f7fe fe77 	bl	8000ee8 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b02      	cmp	r3, #2
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e144      	b.n	8002494 <HAL_RCC_OscConfig+0x106c>
 800220a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800220e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002212:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002216:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002218:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800221c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	fa93 f2a3 	rbit	r2, r3
 8002226:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800222a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800222e:	601a      	str	r2, [r3, #0]
  return result;
 8002230:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002234:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002238:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800223a:	fab3 f383 	clz	r3, r3
 800223e:	b2db      	uxtb	r3, r3
 8002240:	095b      	lsrs	r3, r3, #5
 8002242:	b2db      	uxtb	r3, r3
 8002244:	f043 0301 	orr.w	r3, r3, #1
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b01      	cmp	r3, #1
 800224c:	d102      	bne.n	8002254 <HAL_RCC_OscConfig+0xe2c>
 800224e:	4b54      	ldr	r3, [pc, #336]	@ (80023a0 <HAL_RCC_OscConfig+0xf78>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	e027      	b.n	80022a4 <HAL_RCC_OscConfig+0xe7c>
 8002254:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002258:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800225c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002260:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002262:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002266:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	fa93 f2a3 	rbit	r2, r3
 8002270:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002274:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002278:	601a      	str	r2, [r3, #0]
 800227a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800227e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002282:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800228c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	fa93 f2a3 	rbit	r2, r3
 8002296:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800229a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	4b3f      	ldr	r3, [pc, #252]	@ (80023a0 <HAL_RCC_OscConfig+0xf78>)
 80022a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80022a8:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80022ac:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80022b0:	6011      	str	r1, [r2, #0]
 80022b2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80022b6:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80022ba:	6812      	ldr	r2, [r2, #0]
 80022bc:	fa92 f1a2 	rbit	r1, r2
 80022c0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80022c4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80022c8:	6011      	str	r1, [r2, #0]
  return result;
 80022ca:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80022ce:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80022d2:	6812      	ldr	r2, [r2, #0]
 80022d4:	fab2 f282 	clz	r2, r2
 80022d8:	b2d2      	uxtb	r2, r2
 80022da:	f042 0220 	orr.w	r2, r2, #32
 80022de:	b2d2      	uxtb	r2, r2
 80022e0:	f002 021f 	and.w	r2, r2, #31
 80022e4:	2101      	movs	r1, #1
 80022e6:	fa01 f202 	lsl.w	r2, r1, r2
 80022ea:	4013      	ands	r3, r2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d082      	beq.n	80021f6 <HAL_RCC_OscConfig+0xdce>
 80022f0:	e0cf      	b.n	8002492 <HAL_RCC_OscConfig+0x106a>
 80022f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022f6:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80022fa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80022fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002300:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002304:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	fa93 f2a3 	rbit	r2, r3
 800230e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002312:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002316:	601a      	str	r2, [r3, #0]
  return result;
 8002318:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800231c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002320:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002322:	fab3 f383 	clz	r3, r3
 8002326:	b2db      	uxtb	r3, r3
 8002328:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800232c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	461a      	mov	r2, r3
 8002334:	2300      	movs	r3, #0
 8002336:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002338:	f7fe fdd6 	bl	8000ee8 <HAL_GetTick>
 800233c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002340:	e009      	b.n	8002356 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002342:	f7fe fdd1 	bl	8000ee8 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e09e      	b.n	8002494 <HAL_RCC_OscConfig+0x106c>
 8002356:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800235a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800235e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002362:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002364:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002368:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	fa93 f2a3 	rbit	r2, r3
 8002372:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002376:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800237a:	601a      	str	r2, [r3, #0]
  return result;
 800237c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002380:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002384:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002386:	fab3 f383 	clz	r3, r3
 800238a:	b2db      	uxtb	r3, r3
 800238c:	095b      	lsrs	r3, r3, #5
 800238e:	b2db      	uxtb	r3, r3
 8002390:	f043 0301 	orr.w	r3, r3, #1
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b01      	cmp	r3, #1
 8002398:	d104      	bne.n	80023a4 <HAL_RCC_OscConfig+0xf7c>
 800239a:	4b01      	ldr	r3, [pc, #4]	@ (80023a0 <HAL_RCC_OscConfig+0xf78>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	e029      	b.n	80023f4 <HAL_RCC_OscConfig+0xfcc>
 80023a0:	40021000 	.word	0x40021000
 80023a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023a8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80023ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023b6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	fa93 f2a3 	rbit	r2, r3
 80023c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023c4:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ce:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80023d2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023d6:	601a      	str	r2, [r3, #0]
 80023d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023dc:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	fa93 f2a3 	rbit	r2, r3
 80023e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ea:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	4b2b      	ldr	r3, [pc, #172]	@ (80024a0 <HAL_RCC_OscConfig+0x1078>)
 80023f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023f8:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80023fc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002400:	6011      	str	r1, [r2, #0]
 8002402:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002406:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800240a:	6812      	ldr	r2, [r2, #0]
 800240c:	fa92 f1a2 	rbit	r1, r2
 8002410:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002414:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002418:	6011      	str	r1, [r2, #0]
  return result;
 800241a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800241e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002422:	6812      	ldr	r2, [r2, #0]
 8002424:	fab2 f282 	clz	r2, r2
 8002428:	b2d2      	uxtb	r2, r2
 800242a:	f042 0220 	orr.w	r2, r2, #32
 800242e:	b2d2      	uxtb	r2, r2
 8002430:	f002 021f 	and.w	r2, r2, #31
 8002434:	2101      	movs	r1, #1
 8002436:	fa01 f202 	lsl.w	r2, r1, r2
 800243a:	4013      	ands	r3, r2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d180      	bne.n	8002342 <HAL_RCC_OscConfig+0xf1a>
 8002440:	e027      	b.n	8002492 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002442:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002446:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d101      	bne.n	8002456 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e01e      	b.n	8002494 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002456:	4b12      	ldr	r3, [pc, #72]	@ (80024a0 <HAL_RCC_OscConfig+0x1078>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800245e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002462:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002466:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800246a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	429a      	cmp	r2, r3
 8002474:	d10b      	bne.n	800248e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002476:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800247a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800247e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002482:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800248a:	429a      	cmp	r2, r3
 800248c:	d001      	beq.n	8002492 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e000      	b.n	8002494 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40021000 	.word	0x40021000

080024a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b09e      	sub	sp, #120	@ 0x78
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80024ae:	2300      	movs	r3, #0
 80024b0:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d101      	bne.n	80024bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e162      	b.n	8002782 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024bc:	4b90      	ldr	r3, [pc, #576]	@ (8002700 <HAL_RCC_ClockConfig+0x25c>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0307 	and.w	r3, r3, #7
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d910      	bls.n	80024ec <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ca:	4b8d      	ldr	r3, [pc, #564]	@ (8002700 <HAL_RCC_ClockConfig+0x25c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f023 0207 	bic.w	r2, r3, #7
 80024d2:	498b      	ldr	r1, [pc, #556]	@ (8002700 <HAL_RCC_ClockConfig+0x25c>)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024da:	4b89      	ldr	r3, [pc, #548]	@ (8002700 <HAL_RCC_ClockConfig+0x25c>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0307 	and.w	r3, r3, #7
 80024e2:	683a      	ldr	r2, [r7, #0]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d001      	beq.n	80024ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e14a      	b.n	8002782 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d008      	beq.n	800250a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024f8:	4b82      	ldr	r3, [pc, #520]	@ (8002704 <HAL_RCC_ClockConfig+0x260>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	497f      	ldr	r1, [pc, #508]	@ (8002704 <HAL_RCC_ClockConfig+0x260>)
 8002506:	4313      	orrs	r3, r2
 8002508:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	2b00      	cmp	r3, #0
 8002514:	f000 80dc 	beq.w	80026d0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d13c      	bne.n	800259a <HAL_RCC_ClockConfig+0xf6>
 8002520:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002524:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002526:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002528:	fa93 f3a3 	rbit	r3, r3
 800252c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800252e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002530:	fab3 f383 	clz	r3, r3
 8002534:	b2db      	uxtb	r3, r3
 8002536:	095b      	lsrs	r3, r3, #5
 8002538:	b2db      	uxtb	r3, r3
 800253a:	f043 0301 	orr.w	r3, r3, #1
 800253e:	b2db      	uxtb	r3, r3
 8002540:	2b01      	cmp	r3, #1
 8002542:	d102      	bne.n	800254a <HAL_RCC_ClockConfig+0xa6>
 8002544:	4b6f      	ldr	r3, [pc, #444]	@ (8002704 <HAL_RCC_ClockConfig+0x260>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	e00f      	b.n	800256a <HAL_RCC_ClockConfig+0xc6>
 800254a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800254e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002550:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002552:	fa93 f3a3 	rbit	r3, r3
 8002556:	667b      	str	r3, [r7, #100]	@ 0x64
 8002558:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800255c:	663b      	str	r3, [r7, #96]	@ 0x60
 800255e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002560:	fa93 f3a3 	rbit	r3, r3
 8002564:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002566:	4b67      	ldr	r3, [pc, #412]	@ (8002704 <HAL_RCC_ClockConfig+0x260>)
 8002568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800256a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800256e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002570:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002572:	fa92 f2a2 	rbit	r2, r2
 8002576:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002578:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800257a:	fab2 f282 	clz	r2, r2
 800257e:	b2d2      	uxtb	r2, r2
 8002580:	f042 0220 	orr.w	r2, r2, #32
 8002584:	b2d2      	uxtb	r2, r2
 8002586:	f002 021f 	and.w	r2, r2, #31
 800258a:	2101      	movs	r1, #1
 800258c:	fa01 f202 	lsl.w	r2, r1, r2
 8002590:	4013      	ands	r3, r2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d17b      	bne.n	800268e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e0f3      	b.n	8002782 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d13c      	bne.n	800261c <HAL_RCC_ClockConfig+0x178>
 80025a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80025a6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80025aa:	fa93 f3a3 	rbit	r3, r3
 80025ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80025b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025b2:	fab3 f383 	clz	r3, r3
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	095b      	lsrs	r3, r3, #5
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	f043 0301 	orr.w	r3, r3, #1
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d102      	bne.n	80025cc <HAL_RCC_ClockConfig+0x128>
 80025c6:	4b4f      	ldr	r3, [pc, #316]	@ (8002704 <HAL_RCC_ClockConfig+0x260>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	e00f      	b.n	80025ec <HAL_RCC_ClockConfig+0x148>
 80025cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80025d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80025d4:	fa93 f3a3 	rbit	r3, r3
 80025d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80025da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80025de:	643b      	str	r3, [r7, #64]	@ 0x40
 80025e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025e2:	fa93 f3a3 	rbit	r3, r3
 80025e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025e8:	4b46      	ldr	r3, [pc, #280]	@ (8002704 <HAL_RCC_ClockConfig+0x260>)
 80025ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025f0:	63ba      	str	r2, [r7, #56]	@ 0x38
 80025f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80025f4:	fa92 f2a2 	rbit	r2, r2
 80025f8:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80025fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80025fc:	fab2 f282 	clz	r2, r2
 8002600:	b2d2      	uxtb	r2, r2
 8002602:	f042 0220 	orr.w	r2, r2, #32
 8002606:	b2d2      	uxtb	r2, r2
 8002608:	f002 021f 	and.w	r2, r2, #31
 800260c:	2101      	movs	r1, #1
 800260e:	fa01 f202 	lsl.w	r2, r1, r2
 8002612:	4013      	ands	r3, r2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d13a      	bne.n	800268e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e0b2      	b.n	8002782 <HAL_RCC_ClockConfig+0x2de>
 800261c:	2302      	movs	r3, #2
 800261e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002622:	fa93 f3a3 	rbit	r3, r3
 8002626:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800262a:	fab3 f383 	clz	r3, r3
 800262e:	b2db      	uxtb	r3, r3
 8002630:	095b      	lsrs	r3, r3, #5
 8002632:	b2db      	uxtb	r3, r3
 8002634:	f043 0301 	orr.w	r3, r3, #1
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b01      	cmp	r3, #1
 800263c:	d102      	bne.n	8002644 <HAL_RCC_ClockConfig+0x1a0>
 800263e:	4b31      	ldr	r3, [pc, #196]	@ (8002704 <HAL_RCC_ClockConfig+0x260>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	e00d      	b.n	8002660 <HAL_RCC_ClockConfig+0x1bc>
 8002644:	2302      	movs	r3, #2
 8002646:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800264a:	fa93 f3a3 	rbit	r3, r3
 800264e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002650:	2302      	movs	r3, #2
 8002652:	623b      	str	r3, [r7, #32]
 8002654:	6a3b      	ldr	r3, [r7, #32]
 8002656:	fa93 f3a3 	rbit	r3, r3
 800265a:	61fb      	str	r3, [r7, #28]
 800265c:	4b29      	ldr	r3, [pc, #164]	@ (8002704 <HAL_RCC_ClockConfig+0x260>)
 800265e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002660:	2202      	movs	r2, #2
 8002662:	61ba      	str	r2, [r7, #24]
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	fa92 f2a2 	rbit	r2, r2
 800266a:	617a      	str	r2, [r7, #20]
  return result;
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	fab2 f282 	clz	r2, r2
 8002672:	b2d2      	uxtb	r2, r2
 8002674:	f042 0220 	orr.w	r2, r2, #32
 8002678:	b2d2      	uxtb	r2, r2
 800267a:	f002 021f 	and.w	r2, r2, #31
 800267e:	2101      	movs	r1, #1
 8002680:	fa01 f202 	lsl.w	r2, r1, r2
 8002684:	4013      	ands	r3, r2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e079      	b.n	8002782 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800268e:	4b1d      	ldr	r3, [pc, #116]	@ (8002704 <HAL_RCC_ClockConfig+0x260>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f023 0203 	bic.w	r2, r3, #3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	491a      	ldr	r1, [pc, #104]	@ (8002704 <HAL_RCC_ClockConfig+0x260>)
 800269c:	4313      	orrs	r3, r2
 800269e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026a0:	f7fe fc22 	bl	8000ee8 <HAL_GetTick>
 80026a4:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026a6:	e00a      	b.n	80026be <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026a8:	f7fe fc1e 	bl	8000ee8 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e061      	b.n	8002782 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026be:	4b11      	ldr	r3, [pc, #68]	@ (8002704 <HAL_RCC_ClockConfig+0x260>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f003 020c 	and.w	r2, r3, #12
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d1eb      	bne.n	80026a8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002700 <HAL_RCC_ClockConfig+0x25c>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0307 	and.w	r3, r3, #7
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d214      	bcs.n	8002708 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026de:	4b08      	ldr	r3, [pc, #32]	@ (8002700 <HAL_RCC_ClockConfig+0x25c>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f023 0207 	bic.w	r2, r3, #7
 80026e6:	4906      	ldr	r1, [pc, #24]	@ (8002700 <HAL_RCC_ClockConfig+0x25c>)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ee:	4b04      	ldr	r3, [pc, #16]	@ (8002700 <HAL_RCC_ClockConfig+0x25c>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d005      	beq.n	8002708 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e040      	b.n	8002782 <HAL_RCC_ClockConfig+0x2de>
 8002700:	40022000 	.word	0x40022000
 8002704:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0304 	and.w	r3, r3, #4
 8002710:	2b00      	cmp	r3, #0
 8002712:	d008      	beq.n	8002726 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002714:	4b1d      	ldr	r3, [pc, #116]	@ (800278c <HAL_RCC_ClockConfig+0x2e8>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	491a      	ldr	r1, [pc, #104]	@ (800278c <HAL_RCC_ClockConfig+0x2e8>)
 8002722:	4313      	orrs	r3, r2
 8002724:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0308 	and.w	r3, r3, #8
 800272e:	2b00      	cmp	r3, #0
 8002730:	d009      	beq.n	8002746 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002732:	4b16      	ldr	r3, [pc, #88]	@ (800278c <HAL_RCC_ClockConfig+0x2e8>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	4912      	ldr	r1, [pc, #72]	@ (800278c <HAL_RCC_ClockConfig+0x2e8>)
 8002742:	4313      	orrs	r3, r2
 8002744:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002746:	f000 f829 	bl	800279c <HAL_RCC_GetSysClockFreq>
 800274a:	4601      	mov	r1, r0
 800274c:	4b0f      	ldr	r3, [pc, #60]	@ (800278c <HAL_RCC_ClockConfig+0x2e8>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002754:	22f0      	movs	r2, #240	@ 0xf0
 8002756:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	fa92 f2a2 	rbit	r2, r2
 800275e:	60fa      	str	r2, [r7, #12]
  return result;
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	fab2 f282 	clz	r2, r2
 8002766:	b2d2      	uxtb	r2, r2
 8002768:	40d3      	lsrs	r3, r2
 800276a:	4a09      	ldr	r2, [pc, #36]	@ (8002790 <HAL_RCC_ClockConfig+0x2ec>)
 800276c:	5cd3      	ldrb	r3, [r2, r3]
 800276e:	fa21 f303 	lsr.w	r3, r1, r3
 8002772:	4a08      	ldr	r2, [pc, #32]	@ (8002794 <HAL_RCC_ClockConfig+0x2f0>)
 8002774:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002776:	4b08      	ldr	r3, [pc, #32]	@ (8002798 <HAL_RCC_ClockConfig+0x2f4>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f7fe fb70 	bl	8000e60 <HAL_InitTick>
  
  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3778      	adds	r7, #120	@ 0x78
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	40021000 	.word	0x40021000
 8002790:	08003cf4 	.word	0x08003cf4
 8002794:	20000008 	.word	0x20000008
 8002798:	2000000c 	.word	0x2000000c

0800279c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800279c:	b480      	push	{r7}
 800279e:	b087      	sub	sp, #28
 80027a0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027a2:	2300      	movs	r3, #0
 80027a4:	60fb      	str	r3, [r7, #12]
 80027a6:	2300      	movs	r3, #0
 80027a8:	60bb      	str	r3, [r7, #8]
 80027aa:	2300      	movs	r3, #0
 80027ac:	617b      	str	r3, [r7, #20]
 80027ae:	2300      	movs	r3, #0
 80027b0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80027b2:	2300      	movs	r3, #0
 80027b4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80027b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002830 <HAL_RCC_GetSysClockFreq+0x94>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f003 030c 	and.w	r3, r3, #12
 80027c2:	2b04      	cmp	r3, #4
 80027c4:	d002      	beq.n	80027cc <HAL_RCC_GetSysClockFreq+0x30>
 80027c6:	2b08      	cmp	r3, #8
 80027c8:	d003      	beq.n	80027d2 <HAL_RCC_GetSysClockFreq+0x36>
 80027ca:	e026      	b.n	800281a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027cc:	4b19      	ldr	r3, [pc, #100]	@ (8002834 <HAL_RCC_GetSysClockFreq+0x98>)
 80027ce:	613b      	str	r3, [r7, #16]
      break;
 80027d0:	e026      	b.n	8002820 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	0c9b      	lsrs	r3, r3, #18
 80027d6:	f003 030f 	and.w	r3, r3, #15
 80027da:	4a17      	ldr	r2, [pc, #92]	@ (8002838 <HAL_RCC_GetSysClockFreq+0x9c>)
 80027dc:	5cd3      	ldrb	r3, [r2, r3]
 80027de:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80027e0:	4b13      	ldr	r3, [pc, #76]	@ (8002830 <HAL_RCC_GetSysClockFreq+0x94>)
 80027e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027e4:	f003 030f 	and.w	r3, r3, #15
 80027e8:	4a14      	ldr	r2, [pc, #80]	@ (800283c <HAL_RCC_GetSysClockFreq+0xa0>)
 80027ea:	5cd3      	ldrb	r3, [r2, r3]
 80027ec:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d008      	beq.n	800280a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80027f8:	4a0e      	ldr	r2, [pc, #56]	@ (8002834 <HAL_RCC_GetSysClockFreq+0x98>)
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	fb02 f303 	mul.w	r3, r2, r3
 8002806:	617b      	str	r3, [r7, #20]
 8002808:	e004      	b.n	8002814 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a0c      	ldr	r2, [pc, #48]	@ (8002840 <HAL_RCC_GetSysClockFreq+0xa4>)
 800280e:	fb02 f303 	mul.w	r3, r2, r3
 8002812:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	613b      	str	r3, [r7, #16]
      break;
 8002818:	e002      	b.n	8002820 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800281a:	4b06      	ldr	r3, [pc, #24]	@ (8002834 <HAL_RCC_GetSysClockFreq+0x98>)
 800281c:	613b      	str	r3, [r7, #16]
      break;
 800281e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002820:	693b      	ldr	r3, [r7, #16]
}
 8002822:	4618      	mov	r0, r3
 8002824:	371c      	adds	r7, #28
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	40021000 	.word	0x40021000
 8002834:	007a1200 	.word	0x007a1200
 8002838:	08003d04 	.word	0x08003d04
 800283c:	08003d14 	.word	0x08003d14
 8002840:	003d0900 	.word	0x003d0900

08002844 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b092      	sub	sp, #72	@ 0x48
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800284c:	2300      	movs	r3, #0
 800284e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002850:	2300      	movs	r3, #0
 8002852:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002854:	2300      	movs	r3, #0
 8002856:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002862:	2b00      	cmp	r3, #0
 8002864:	f000 80cd 	beq.w	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002868:	4b86      	ldr	r3, [pc, #536]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800286a:	69db      	ldr	r3, [r3, #28]
 800286c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d10e      	bne.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002874:	4b83      	ldr	r3, [pc, #524]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002876:	69db      	ldr	r3, [r3, #28]
 8002878:	4a82      	ldr	r2, [pc, #520]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800287a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800287e:	61d3      	str	r3, [r2, #28]
 8002880:	4b80      	ldr	r3, [pc, #512]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002882:	69db      	ldr	r3, [r3, #28]
 8002884:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002888:	60bb      	str	r3, [r7, #8]
 800288a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800288c:	2301      	movs	r3, #1
 800288e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002892:	4b7d      	ldr	r3, [pc, #500]	@ (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800289a:	2b00      	cmp	r3, #0
 800289c:	d118      	bne.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800289e:	4b7a      	ldr	r3, [pc, #488]	@ (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a79      	ldr	r2, [pc, #484]	@ (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80028a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028a8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028aa:	f7fe fb1d 	bl	8000ee8 <HAL_GetTick>
 80028ae:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b0:	e008      	b.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028b2:	f7fe fb19 	bl	8000ee8 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b64      	cmp	r3, #100	@ 0x64
 80028be:	d901      	bls.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e0db      	b.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c4:	4b70      	ldr	r3, [pc, #448]	@ (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d0f0      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028d0:	4b6c      	ldr	r3, [pc, #432]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d07d      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x198>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028e8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d076      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028ee:	4b65      	ldr	r3, [pc, #404]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80028fc:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002900:	fa93 f3a3 	rbit	r3, r3
 8002904:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002908:	fab3 f383 	clz	r3, r3
 800290c:	b2db      	uxtb	r3, r3
 800290e:	461a      	mov	r2, r3
 8002910:	4b5e      	ldr	r3, [pc, #376]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002912:	4413      	add	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	461a      	mov	r2, r3
 8002918:	2301      	movs	r3, #1
 800291a:	6013      	str	r3, [r2, #0]
 800291c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002920:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002924:	fa93 f3a3 	rbit	r3, r3
 8002928:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800292a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800292c:	fab3 f383 	clz	r3, r3
 8002930:	b2db      	uxtb	r3, r3
 8002932:	461a      	mov	r2, r3
 8002934:	4b55      	ldr	r3, [pc, #340]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002936:	4413      	add	r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	461a      	mov	r2, r3
 800293c:	2300      	movs	r3, #0
 800293e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002940:	4a50      	ldr	r2, [pc, #320]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002942:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002944:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002946:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002948:	f003 0301 	and.w	r3, r3, #1
 800294c:	2b00      	cmp	r3, #0
 800294e:	d045      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002950:	f7fe faca 	bl	8000ee8 <HAL_GetTick>
 8002954:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002956:	e00a      	b.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002958:	f7fe fac6 	bl	8000ee8 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002966:	4293      	cmp	r3, r2
 8002968:	d901      	bls.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e086      	b.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x238>
 800296e:	2302      	movs	r3, #2
 8002970:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002974:	fa93 f3a3 	rbit	r3, r3
 8002978:	627b      	str	r3, [r7, #36]	@ 0x24
 800297a:	2302      	movs	r3, #2
 800297c:	623b      	str	r3, [r7, #32]
 800297e:	6a3b      	ldr	r3, [r7, #32]
 8002980:	fa93 f3a3 	rbit	r3, r3
 8002984:	61fb      	str	r3, [r7, #28]
  return result;
 8002986:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002988:	fab3 f383 	clz	r3, r3
 800298c:	b2db      	uxtb	r3, r3
 800298e:	095b      	lsrs	r3, r3, #5
 8002990:	b2db      	uxtb	r3, r3
 8002992:	f043 0302 	orr.w	r3, r3, #2
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d102      	bne.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800299c:	4b39      	ldr	r3, [pc, #228]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	e007      	b.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80029a2:	2302      	movs	r3, #2
 80029a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	fa93 f3a3 	rbit	r3, r3
 80029ac:	617b      	str	r3, [r7, #20]
 80029ae:	4b35      	ldr	r3, [pc, #212]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80029b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b2:	2202      	movs	r2, #2
 80029b4:	613a      	str	r2, [r7, #16]
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	fa92 f2a2 	rbit	r2, r2
 80029bc:	60fa      	str	r2, [r7, #12]
  return result;
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	fab2 f282 	clz	r2, r2
 80029c4:	b2d2      	uxtb	r2, r2
 80029c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80029ca:	b2d2      	uxtb	r2, r2
 80029cc:	f002 021f 	and.w	r2, r2, #31
 80029d0:	2101      	movs	r1, #1
 80029d2:	fa01 f202 	lsl.w	r2, r1, r2
 80029d6:	4013      	ands	r3, r2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d0bd      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80029dc:	4b29      	ldr	r3, [pc, #164]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80029de:	6a1b      	ldr	r3, [r3, #32]
 80029e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	4926      	ldr	r1, [pc, #152]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029ee:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d105      	bne.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029f6:	4b23      	ldr	r3, [pc, #140]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80029f8:	69db      	ldr	r3, [r3, #28]
 80029fa:	4a22      	ldr	r2, [pc, #136]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80029fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a00:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d008      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a0e:	4b1d      	ldr	r3, [pc, #116]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a12:	f023 0203 	bic.w	r2, r3, #3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	491a      	ldr	r1, [pc, #104]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0320 	and.w	r3, r3, #32
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d008      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a2c:	4b15      	ldr	r3, [pc, #84]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a30:	f023 0210 	bic.w	r2, r3, #16
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	4912      	ldr	r1, [pc, #72]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d008      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002a4a:	4b0e      	ldr	r3, [pc, #56]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a4e:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	490b      	ldr	r1, [pc, #44]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d008      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002a68:	4b06      	ldr	r3, [pc, #24]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a6c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	695b      	ldr	r3, [r3, #20]
 8002a74:	4903      	ldr	r1, [pc, #12]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3748      	adds	r7, #72	@ 0x48
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	40021000 	.word	0x40021000
 8002a88:	40007000 	.word	0x40007000
 8002a8c:	10908100 	.word	0x10908100

08002a90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e095      	b.n	8002bce <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d108      	bne.n	8002abc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ab2:	d009      	beq.n	8002ac8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	61da      	str	r2, [r3, #28]
 8002aba:	e005      	b.n	8002ac8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d106      	bne.n	8002ae8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f7fe f8f8 	bl	8000cd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2202      	movs	r2, #2
 8002aec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002afe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002b08:	d902      	bls.n	8002b10 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	60fb      	str	r3, [r7, #12]
 8002b0e:	e002      	b.n	8002b16 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002b10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b14:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002b1e:	d007      	beq.n	8002b30 <HAL_SPI_Init+0xa0>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002b28:	d002      	beq.n	8002b30 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002b40:	431a      	orrs	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	431a      	orrs	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	431a      	orrs	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	69db      	ldr	r3, [r3, #28]
 8002b64:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002b68:	431a      	orrs	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a1b      	ldr	r3, [r3, #32]
 8002b6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b72:	ea42 0103 	orr.w	r1, r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b7a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	430a      	orrs	r2, r1
 8002b84:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	0c1b      	lsrs	r3, r3, #16
 8002b8c:	f003 0204 	and.w	r2, r3, #4
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b94:	f003 0310 	and.w	r3, r3, #16
 8002b98:	431a      	orrs	r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b9e:	f003 0308 	and.w	r3, r3, #8
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002bac:	ea42 0103 	orr.w	r1, r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b088      	sub	sp, #32
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	60f8      	str	r0, [r7, #12]
 8002bde:	60b9      	str	r1, [r7, #8]
 8002be0:	603b      	str	r3, [r7, #0]
 8002be2:	4613      	mov	r3, r2
 8002be4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002be6:	2300      	movs	r3, #0
 8002be8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d101      	bne.n	8002bf8 <HAL_SPI_Transmit+0x22>
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	e15f      	b.n	8002eb8 <HAL_SPI_Transmit+0x2e2>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c00:	f7fe f972 	bl	8000ee8 <HAL_GetTick>
 8002c04:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002c06:	88fb      	ldrh	r3, [r7, #6]
 8002c08:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d002      	beq.n	8002c1c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002c16:	2302      	movs	r3, #2
 8002c18:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c1a:	e148      	b.n	8002eae <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d002      	beq.n	8002c28 <HAL_SPI_Transmit+0x52>
 8002c22:	88fb      	ldrh	r3, [r7, #6]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d102      	bne.n	8002c2e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c2c:	e13f      	b.n	8002eae <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2203      	movs	r2, #3
 8002c32:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	68ba      	ldr	r2, [r7, #8]
 8002c40:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	88fa      	ldrh	r2, [r7, #6]
 8002c46:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	88fa      	ldrh	r2, [r7, #6]
 8002c4c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c78:	d10f      	bne.n	8002c9a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c88:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c98:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ca4:	2b40      	cmp	r3, #64	@ 0x40
 8002ca6:	d007      	beq.n	8002cb8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002cb6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002cc0:	d94f      	bls.n	8002d62 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d002      	beq.n	8002cd0 <HAL_SPI_Transmit+0xfa>
 8002cca:	8afb      	ldrh	r3, [r7, #22]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d142      	bne.n	8002d56 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cd4:	881a      	ldrh	r2, [r3, #0]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ce0:	1c9a      	adds	r2, r3, #2
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	3b01      	subs	r3, #1
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002cf4:	e02f      	b.n	8002d56 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d112      	bne.n	8002d2a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d08:	881a      	ldrh	r2, [r3, #0]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d14:	1c9a      	adds	r2, r3, #2
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	3b01      	subs	r3, #1
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002d28:	e015      	b.n	8002d56 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d2a:	f7fe f8dd 	bl	8000ee8 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d803      	bhi.n	8002d42 <HAL_SPI_Transmit+0x16c>
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d40:	d102      	bne.n	8002d48 <HAL_SPI_Transmit+0x172>
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d106      	bne.n	8002d56 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002d54:	e0ab      	b.n	8002eae <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d1ca      	bne.n	8002cf6 <HAL_SPI_Transmit+0x120>
 8002d60:	e080      	b.n	8002e64 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d002      	beq.n	8002d70 <HAL_SPI_Transmit+0x19a>
 8002d6a:	8afb      	ldrh	r3, [r7, #22]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d174      	bne.n	8002e5a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d912      	bls.n	8002da0 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d7e:	881a      	ldrh	r2, [r3, #0]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d8a:	1c9a      	adds	r2, r3, #2
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	3b02      	subs	r3, #2
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002d9e:	e05c      	b.n	8002e5a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	330c      	adds	r3, #12
 8002daa:	7812      	ldrb	r2, [r2, #0]
 8002dac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002db2:	1c5a      	adds	r2, r3, #1
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002dc6:	e048      	b.n	8002e5a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d12b      	bne.n	8002e2e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d912      	bls.n	8002e06 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002de4:	881a      	ldrh	r2, [r3, #0]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002df0:	1c9a      	adds	r2, r3, #2
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	3b02      	subs	r3, #2
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002e04:	e029      	b.n	8002e5a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	330c      	adds	r3, #12
 8002e10:	7812      	ldrb	r2, [r2, #0]
 8002e12:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e18:	1c5a      	adds	r2, r3, #1
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	3b01      	subs	r3, #1
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002e2c:	e015      	b.n	8002e5a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e2e:	f7fe f85b 	bl	8000ee8 <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	683a      	ldr	r2, [r7, #0]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d803      	bhi.n	8002e46 <HAL_SPI_Transmit+0x270>
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e44:	d102      	bne.n	8002e4c <HAL_SPI_Transmit+0x276>
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d106      	bne.n	8002e5a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002e58:	e029      	b.n	8002eae <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1b1      	bne.n	8002dc8 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	6839      	ldr	r1, [r7, #0]
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f000 fa2d 	bl	80032c8 <SPI_EndRxTxTransaction>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d002      	beq.n	8002e7a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2220      	movs	r2, #32
 8002e78:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10a      	bne.n	8002e98 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e82:	2300      	movs	r3, #0
 8002e84:	613b      	str	r3, [r7, #16]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	613b      	str	r3, [r7, #16]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	613b      	str	r3, [r7, #16]
 8002e96:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d002      	beq.n	8002ea6 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	77fb      	strb	r3, [r7, #31]
 8002ea4:	e003      	b.n	8002eae <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8002eb6:	7ffb      	ldrb	r3, [r7, #31]
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3720      	adds	r7, #32
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b087      	sub	sp, #28
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));


  if ((pData == NULL) || (Size == 0U))
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d002      	beq.n	8002ede <HAL_SPI_Transmit_IT+0x1e>
 8002ed8:	88fb      	ldrh	r3, [r7, #6]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d102      	bne.n	8002ee4 <HAL_SPI_Transmit_IT+0x24>
  {
    errorcode = HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002ee2:	e06d      	b.n	8002fc0 <HAL_SPI_Transmit_IT+0x100>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d002      	beq.n	8002ef6 <HAL_SPI_Transmit_IT+0x36>
  {
    errorcode = HAL_BUSY;
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002ef4:	e064      	b.n	8002fc0 <HAL_SPI_Transmit_IT+0x100>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d101      	bne.n	8002f04 <HAL_SPI_Transmit_IT+0x44>
 8002f00:	2302      	movs	r3, #2
 8002f02:	e05e      	b.n	8002fc2 <HAL_SPI_Transmit_IT+0x102>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2203      	movs	r2, #3
 8002f10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	68ba      	ldr	r2, [r7, #8]
 8002f1e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	88fa      	ldrh	r2, [r7, #6]
 8002f24:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	88fa      	ldrh	r2, [r7, #6]
 8002f2a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxISR       = NULL;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002f50:	d903      	bls.n	8002f5a <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	4a1e      	ldr	r2, [pc, #120]	@ (8002fd0 <HAL_SPI_Transmit_IT+0x110>)
 8002f56:	651a      	str	r2, [r3, #80]	@ 0x50
 8002f58:	e002      	b.n	8002f60 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	4a1d      	ldr	r2, [pc, #116]	@ (8002fd4 <HAL_SPI_Transmit_IT+0x114>)
 8002f5e:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f68:	d10f      	bne.n	8002f8a <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f78:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f88:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f94:	2b40      	cmp	r3, #64	@ 0x40
 8002f96:	d007      	beq.n	8002fa8 <HAL_SPI_Transmit_IT+0xe8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002fa6:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	685a      	ldr	r2, [r3, #4]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f042 02a0 	orr.w	r2, r2, #160	@ 0xa0
 8002fbe:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8002fc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	371c      	adds	r7, #28
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	08003047 	.word	0x08003047
 8002fd4:	08003001 	.word	0x08003001

08002fd8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	330c      	adds	r3, #12
 8003012:	7812      	ldrb	r2, [r2, #0]
 8003014:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800301a:	1c5a      	adds	r2, r3, #1
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003024:	b29b      	uxth	r3, r3
 8003026:	3b01      	subs	r3, #1
 8003028:	b29a      	uxth	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003032:	b29b      	uxth	r3, r3
 8003034:	2b00      	cmp	r3, #0
 8003036:	d102      	bne.n	800303e <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f000 f98b 	bl	8003354 <SPI_CloseTx_ISR>
  }
}
 800303e:	bf00      	nop
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b082      	sub	sp, #8
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003052:	881a      	ldrh	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800305e:	1c9a      	adds	r2, r3, #2
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003068:	b29b      	uxth	r3, r3
 800306a:	3b01      	subs	r3, #1
 800306c:	b29a      	uxth	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003076:	b29b      	uxth	r3, r3
 8003078:	2b00      	cmp	r3, #0
 800307a:	d102      	bne.n	8003082 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 f969 	bl	8003354 <SPI_CloseTx_ISR>
  }
}
 8003082:	bf00      	nop
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
	...

0800308c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b088      	sub	sp, #32
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	603b      	str	r3, [r7, #0]
 8003098:	4613      	mov	r3, r2
 800309a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800309c:	f7fd ff24 	bl	8000ee8 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030a4:	1a9b      	subs	r3, r3, r2
 80030a6:	683a      	ldr	r2, [r7, #0]
 80030a8:	4413      	add	r3, r2
 80030aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80030ac:	f7fd ff1c 	bl	8000ee8 <HAL_GetTick>
 80030b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80030b2:	4b39      	ldr	r3, [pc, #228]	@ (8003198 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	015b      	lsls	r3, r3, #5
 80030b8:	0d1b      	lsrs	r3, r3, #20
 80030ba:	69fa      	ldr	r2, [r7, #28]
 80030bc:	fb02 f303 	mul.w	r3, r2, r3
 80030c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030c2:	e054      	b.n	800316e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ca:	d050      	beq.n	800316e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80030cc:	f7fd ff0c 	bl	8000ee8 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	69fa      	ldr	r2, [r7, #28]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d902      	bls.n	80030e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d13d      	bne.n	800315e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80030f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80030fa:	d111      	bne.n	8003120 <SPI_WaitFlagStateUntilTimeout+0x94>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003104:	d004      	beq.n	8003110 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800310e:	d107      	bne.n	8003120 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800311e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003124:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003128:	d10f      	bne.n	800314a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003138:	601a      	str	r2, [r3, #0]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003148:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e017      	b.n	800318e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d101      	bne.n	8003168 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003164:	2300      	movs	r3, #0
 8003166:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	3b01      	subs	r3, #1
 800316c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689a      	ldr	r2, [r3, #8]
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	4013      	ands	r3, r2
 8003178:	68ba      	ldr	r2, [r7, #8]
 800317a:	429a      	cmp	r2, r3
 800317c:	bf0c      	ite	eq
 800317e:	2301      	moveq	r3, #1
 8003180:	2300      	movne	r3, #0
 8003182:	b2db      	uxtb	r3, r3
 8003184:	461a      	mov	r2, r3
 8003186:	79fb      	ldrb	r3, [r7, #7]
 8003188:	429a      	cmp	r2, r3
 800318a:	d19b      	bne.n	80030c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3720      	adds	r7, #32
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	20000008 	.word	0x20000008

0800319c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b08a      	sub	sp, #40	@ 0x28
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
 80031a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80031aa:	2300      	movs	r3, #0
 80031ac:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80031ae:	f7fd fe9b 	bl	8000ee8 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031b6:	1a9b      	subs	r3, r3, r2
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	4413      	add	r3, r2
 80031bc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80031be:	f7fd fe93 	bl	8000ee8 <HAL_GetTick>
 80031c2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	330c      	adds	r3, #12
 80031ca:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80031cc:	4b3d      	ldr	r3, [pc, #244]	@ (80032c4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	4613      	mov	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4413      	add	r3, r2
 80031d6:	00da      	lsls	r2, r3, #3
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	0d1b      	lsrs	r3, r3, #20
 80031dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031de:	fb02 f303 	mul.w	r3, r2, r3
 80031e2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80031e4:	e060      	b.n	80032a8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80031ec:	d107      	bne.n	80031fe <SPI_WaitFifoStateUntilTimeout+0x62>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d104      	bne.n	80031fe <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80031fc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003204:	d050      	beq.n	80032a8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003206:	f7fd fe6f 	bl	8000ee8 <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	6a3b      	ldr	r3, [r7, #32]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003212:	429a      	cmp	r2, r3
 8003214:	d902      	bls.n	800321c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003218:	2b00      	cmp	r3, #0
 800321a:	d13d      	bne.n	8003298 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685a      	ldr	r2, [r3, #4]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800322a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003234:	d111      	bne.n	800325a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800323e:	d004      	beq.n	800324a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003248:	d107      	bne.n	800325a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003258:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800325e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003262:	d10f      	bne.n	8003284 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003282:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e010      	b.n	80032ba <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800329e:	2300      	movs	r3, #0
 80032a0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	3b01      	subs	r3, #1
 80032a6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	689a      	ldr	r2, [r3, #8]
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	4013      	ands	r3, r2
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d196      	bne.n	80031e6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3728      	adds	r7, #40	@ 0x28
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	20000008 	.word	0x20000008

080032c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af02      	add	r7, sp, #8
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	9300      	str	r3, [sp, #0]
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	2200      	movs	r2, #0
 80032dc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80032e0:	68f8      	ldr	r0, [r7, #12]
 80032e2:	f7ff ff5b 	bl	800319c <SPI_WaitFifoStateUntilTimeout>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d007      	beq.n	80032fc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032f0:	f043 0220 	orr.w	r2, r3, #32
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e027      	b.n	800334c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	9300      	str	r3, [sp, #0]
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	2200      	movs	r2, #0
 8003304:	2180      	movs	r1, #128	@ 0x80
 8003306:	68f8      	ldr	r0, [r7, #12]
 8003308:	f7ff fec0 	bl	800308c <SPI_WaitFlagStateUntilTimeout>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d007      	beq.n	8003322 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003316:	f043 0220 	orr.w	r2, r3, #32
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e014      	b.n	800334c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	9300      	str	r3, [sp, #0]
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	2200      	movs	r2, #0
 800332a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800332e:	68f8      	ldr	r0, [r7, #12]
 8003330:	f7ff ff34 	bl	800319c <SPI_WaitFifoStateUntilTimeout>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d007      	beq.n	800334a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800333e:	f043 0220 	orr.w	r2, r3, #32
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e000      	b.n	800334c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	3710      	adds	r7, #16
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800335c:	f7fd fdc4 	bl	8000ee8 <HAL_GetTick>
 8003360:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	685a      	ldr	r2, [r3, #4]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003370:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	2164      	movs	r1, #100	@ 0x64
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f7ff ffa6 	bl	80032c8 <SPI_EndRxTxTransaction>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d005      	beq.n	800338e <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003386:	f043 0220 	orr.w	r2, r3, #32
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d10a      	bne.n	80033ac <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003396:	2300      	movs	r3, #0
 8003398:	60bb      	str	r3, [r7, #8]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	60bb      	str	r3, [r7, #8]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	60bb      	str	r3, [r7, #8]
 80033aa:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d003      	beq.n	80033c4 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f7ff fe15 	bl	8002fec <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80033c2:	e002      	b.n	80033ca <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f7ff fe07 	bl	8002fd8 <HAL_SPI_TxCpltCallback>
}
 80033ca:	bf00      	nop
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80033d2:	b480      	push	{r7}
 80033d4:	b089      	sub	sp, #36	@ 0x24
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	60f8      	str	r0, [r7, #12]
 80033da:	60b9      	str	r1, [r7, #8]
 80033dc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	fa93 f3a3 	rbit	r3, r3
 80033ec:	613b      	str	r3, [r7, #16]
  return result;
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	fab3 f383 	clz	r3, r3
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	2103      	movs	r1, #3
 80033fa:	fa01 f303 	lsl.w	r3, r1, r3
 80033fe:	43db      	mvns	r3, r3
 8003400:	401a      	ands	r2, r3
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	fa93 f3a3 	rbit	r3, r3
 800340c:	61bb      	str	r3, [r7, #24]
  return result;
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	fab3 f383 	clz	r3, r3
 8003414:	b2db      	uxtb	r3, r3
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	6879      	ldr	r1, [r7, #4]
 800341a:	fa01 f303 	lsl.w	r3, r1, r3
 800341e:	431a      	orrs	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	601a      	str	r2, [r3, #0]
}
 8003424:	bf00      	nop
 8003426:	3724      	adds	r7, #36	@ 0x24
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8003430:	b480      	push	{r7}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	43db      	mvns	r3, r3
 8003444:	401a      	ands	r2, r3
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	6879      	ldr	r1, [r7, #4]
 800344a:	fb01 f303 	mul.w	r3, r1, r3
 800344e:	431a      	orrs	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	605a      	str	r2, [r3, #4]
}
 8003454:	bf00      	nop
 8003456:	3714      	adds	r7, #20
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8003460:	b480      	push	{r7}
 8003462:	b089      	sub	sp, #36	@ 0x24
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	689a      	ldr	r2, [r3, #8]
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	fa93 f3a3 	rbit	r3, r3
 800347a:	613b      	str	r3, [r7, #16]
  return result;
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	fab3 f383 	clz	r3, r3
 8003482:	b2db      	uxtb	r3, r3
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	2103      	movs	r1, #3
 8003488:	fa01 f303 	lsl.w	r3, r1, r3
 800348c:	43db      	mvns	r3, r3
 800348e:	401a      	ands	r2, r3
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	fa93 f3a3 	rbit	r3, r3
 800349a:	61bb      	str	r3, [r7, #24]
  return result;
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	fab3 f383 	clz	r3, r3
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	6879      	ldr	r1, [r7, #4]
 80034a8:	fa01 f303 	lsl.w	r3, r1, r3
 80034ac:	431a      	orrs	r2, r3
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80034b2:	bf00      	nop
 80034b4:	3724      	adds	r7, #36	@ 0x24
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr

080034be <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80034be:	b480      	push	{r7}
 80034c0:	b089      	sub	sp, #36	@ 0x24
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	60f8      	str	r0, [r7, #12]
 80034c6:	60b9      	str	r1, [r7, #8]
 80034c8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	68da      	ldr	r2, [r3, #12]
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	fa93 f3a3 	rbit	r3, r3
 80034d8:	613b      	str	r3, [r7, #16]
  return result;
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	fab3 f383 	clz	r3, r3
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	005b      	lsls	r3, r3, #1
 80034e4:	2103      	movs	r1, #3
 80034e6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ea:	43db      	mvns	r3, r3
 80034ec:	401a      	ands	r2, r3
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	fa93 f3a3 	rbit	r3, r3
 80034f8:	61bb      	str	r3, [r7, #24]
  return result;
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	fab3 f383 	clz	r3, r3
 8003500:	b2db      	uxtb	r3, r3
 8003502:	005b      	lsls	r3, r3, #1
 8003504:	6879      	ldr	r1, [r7, #4]
 8003506:	fa01 f303 	lsl.w	r3, r1, r3
 800350a:	431a      	orrs	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	60da      	str	r2, [r3, #12]
}
 8003510:	bf00      	nop
 8003512:	3724      	adds	r7, #36	@ 0x24
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800351c:	b480      	push	{r7}
 800351e:	b089      	sub	sp, #36	@ 0x24
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6a1a      	ldr	r2, [r3, #32]
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	fa93 f3a3 	rbit	r3, r3
 8003536:	613b      	str	r3, [r7, #16]
  return result;
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	fab3 f383 	clz	r3, r3
 800353e:	b2db      	uxtb	r3, r3
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	210f      	movs	r1, #15
 8003544:	fa01 f303 	lsl.w	r3, r1, r3
 8003548:	43db      	mvns	r3, r3
 800354a:	401a      	ands	r2, r3
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	fa93 f3a3 	rbit	r3, r3
 8003556:	61bb      	str	r3, [r7, #24]
  return result;
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	fab3 f383 	clz	r3, r3
 800355e:	b2db      	uxtb	r3, r3
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	6879      	ldr	r1, [r7, #4]
 8003564:	fa01 f303 	lsl.w	r3, r1, r3
 8003568:	431a      	orrs	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800356e:	bf00      	nop
 8003570:	3724      	adds	r7, #36	@ 0x24
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr

0800357a <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800357a:	b480      	push	{r7}
 800357c:	b089      	sub	sp, #36	@ 0x24
 800357e:	af00      	add	r7, sp, #0
 8003580:	60f8      	str	r0, [r7, #12]
 8003582:	60b9      	str	r1, [r7, #8]
 8003584:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	0a1b      	lsrs	r3, r3, #8
 800358e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	fa93 f3a3 	rbit	r3, r3
 8003596:	613b      	str	r3, [r7, #16]
  return result;
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	fab3 f383 	clz	r3, r3
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	210f      	movs	r1, #15
 80035a4:	fa01 f303 	lsl.w	r3, r1, r3
 80035a8:	43db      	mvns	r3, r3
 80035aa:	401a      	ands	r2, r3
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	0a1b      	lsrs	r3, r3, #8
 80035b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	fa93 f3a3 	rbit	r3, r3
 80035b8:	61bb      	str	r3, [r7, #24]
  return result;
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	fab3 f383 	clz	r3, r3
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	6879      	ldr	r1, [r7, #4]
 80035c6:	fa01 f303 	lsl.w	r3, r1, r3
 80035ca:	431a      	orrs	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80035d0:	bf00      	nop
 80035d2:	3724      	adds	r7, #36	@ 0x24
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b088      	sub	sp, #32
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	fa93 f3a3 	rbit	r3, r3
 80035f2:	613b      	str	r3, [r7, #16]
  return result;
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	fab3 f383 	clz	r3, r3
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80035fe:	e051      	b.n	80036a4 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	2101      	movs	r1, #1
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	fa01 f303 	lsl.w	r3, r1, r3
 800360c:	4013      	ands	r3, r2
 800360e:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d043      	beq.n	800369e <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d003      	beq.n	8003626 <LL_GPIO_Init+0x4a>
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	2b02      	cmp	r3, #2
 8003624:	d10e      	bne.n	8003644 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	461a      	mov	r2, r3
 800362c:	69b9      	ldr	r1, [r7, #24]
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f7ff ff16 	bl	8003460 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	6819      	ldr	r1, [r3, #0]
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	461a      	mov	r2, r3
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f7ff fef6 	bl	8003430 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	461a      	mov	r2, r3
 800364a:	69b9      	ldr	r1, [r7, #24]
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f7ff ff36 	bl	80034be <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	2b02      	cmp	r3, #2
 8003658:	d11a      	bne.n	8003690 <LL_GPIO_Init+0xb4>
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	fa93 f3a3 	rbit	r3, r3
 8003664:	60bb      	str	r3, [r7, #8]
  return result;
 8003666:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003668:	fab3 f383 	clz	r3, r3
 800366c:	b2db      	uxtb	r3, r3
 800366e:	2b07      	cmp	r3, #7
 8003670:	d807      	bhi.n	8003682 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	461a      	mov	r2, r3
 8003678:	69b9      	ldr	r1, [r7, #24]
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f7ff ff4e 	bl	800351c <LL_GPIO_SetAFPin_0_7>
 8003680:	e006      	b.n	8003690 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	461a      	mov	r2, r3
 8003688:	69b9      	ldr	r1, [r7, #24]
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f7ff ff75 	bl	800357a <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	461a      	mov	r2, r3
 8003696:	69b9      	ldr	r1, [r7, #24]
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f7ff fe9a 	bl	80033d2 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	3301      	adds	r3, #1
 80036a2:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	fa22 f303 	lsr.w	r3, r2, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1a6      	bne.n	8003600 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3720      	adds	r7, #32
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <LL_I2C_Enable>:
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f043 0201 	orr.w	r2, r3, #1
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	601a      	str	r2, [r3, #0]
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <LL_I2C_Disable>:
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f023 0201 	bic.w	r2, r3, #1
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	601a      	str	r2, [r3, #0]
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <LL_I2C_ConfigFilters>:
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	0219      	lsls	r1, r3, #8
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	430b      	orrs	r3, r1
 8003718:	431a      	orrs	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	601a      	str	r2, [r3, #0]
}
 800371e:	bf00      	nop
 8003720:	3714      	adds	r7, #20
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr

0800372a <LL_I2C_SetOwnAddress1>:
{
 800372a:	b480      	push	{r7}
 800372c:	b085      	sub	sp, #20
 800372e:	af00      	add	r7, sp, #0
 8003730:	60f8      	str	r0, [r7, #12]
 8003732:	60b9      	str	r1, [r7, #8]
 8003734:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800373e:	f023 0307 	bic.w	r3, r3, #7
 8003742:	68b9      	ldr	r1, [r7, #8]
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	430a      	orrs	r2, r1
 8003748:	431a      	orrs	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	609a      	str	r2, [r3, #8]
}
 800374e:	bf00      	nop
 8003750:	3714      	adds	r7, #20
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr

0800375a <LL_I2C_EnableOwnAddress1>:
{
 800375a:	b480      	push	{r7}
 800375c:	b083      	sub	sp, #12
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	609a      	str	r2, [r3, #8]
}
 800376e:	bf00      	nop
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr

0800377a <LL_I2C_DisableOwnAddress1>:
{
 800377a:	b480      	push	{r7}
 800377c:	b083      	sub	sp, #12
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	609a      	str	r2, [r3, #8]
}
 800378e:	bf00      	nop
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr

0800379a <LL_I2C_SetTiming>:
{
 800379a:	b480      	push	{r7}
 800379c:	b083      	sub	sp, #12
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
 80037a2:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	683a      	ldr	r2, [r7, #0]
 80037a8:	611a      	str	r2, [r3, #16]
}
 80037aa:	bf00      	nop
 80037ac:	370c      	adds	r7, #12
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr

080037b6 <LL_I2C_SetMode>:
{
 80037b6:	b480      	push	{r7}
 80037b8:	b083      	sub	sp, #12
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
 80037be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	431a      	orrs	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	601a      	str	r2, [r3, #0]
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <LL_I2C_AcknowledgeNextData>:
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	431a      	orrs	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	605a      	str	r2, [r3, #4]
}
 80037f6:	bf00      	nop
 80037f8:	370c      	adds	r7, #12
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr

08003802 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, const LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8003802:	b580      	push	{r7, lr}
 8003804:	b082      	sub	sp, #8
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
 800380a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f7ff ff65 	bl	80036dc <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	6899      	ldr	r1, [r3, #8]
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	461a      	mov	r2, r3
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f7ff ff6d 	bl	80036fc <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	4619      	mov	r1, r3
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f7ff ffb6 	bl	800379a <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f7ff ff44 	bl	80036bc <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f7ff ffa0 	bl	800377a <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	6919      	ldr	r1, [r3, #16]
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	461a      	mov	r2, r3
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f7ff ff70 	bl	800372a <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d002      	beq.n	8003858 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f7ff ff81 	bl	800375a <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4619      	mov	r1, r3
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7ff ffa9 	bl	80037b6 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	695b      	ldr	r3, [r3, #20]
 8003868:	4619      	mov	r1, r3
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f7ff ffb6 	bl	80037dc <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3708      	adds	r7, #8
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
	...

0800387c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003880:	4904      	ldr	r1, [pc, #16]	@ (8003894 <MX_FATFS_Init+0x18>)
 8003882:	4805      	ldr	r0, [pc, #20]	@ (8003898 <MX_FATFS_Init+0x1c>)
 8003884:	f000 f8b0 	bl	80039e8 <FATFS_LinkDriver>
 8003888:	4603      	mov	r3, r0
 800388a:	461a      	mov	r2, r3
 800388c:	4b03      	ldr	r3, [pc, #12]	@ (800389c <MX_FATFS_Init+0x20>)
 800388e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003890:	bf00      	nop
 8003892:	bd80      	pop	{r7, pc}
 8003894:	200000bc 	.word	0x200000bc
 8003898:	20000014 	.word	0x20000014
 800389c:	200000b8 	.word	0x200000b8

080038a0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	4603      	mov	r3, r0
 80038a8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 80038aa:	4b06      	ldr	r3, [pc, #24]	@ (80038c4 <USER_initialize+0x24>)
 80038ac:	2201      	movs	r2, #1
 80038ae:	701a      	strb	r2, [r3, #0]
    return Stat;
 80038b0:	4b04      	ldr	r3, [pc, #16]	@ (80038c4 <USER_initialize+0x24>)
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	370c      	adds	r7, #12
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	20000011 	.word	0x20000011

080038c8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	4603      	mov	r3, r0
 80038d0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 80038d2:	4b06      	ldr	r3, [pc, #24]	@ (80038ec <USER_status+0x24>)
 80038d4:	2201      	movs	r2, #1
 80038d6:	701a      	strb	r2, [r3, #0]
    return Stat;
 80038d8:	4b04      	ldr	r3, [pc, #16]	@ (80038ec <USER_status+0x24>)
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80038de:	4618      	mov	r0, r3
 80038e0:	370c      	adds	r7, #12
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	20000011 	.word	0x20000011

080038f0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60b9      	str	r1, [r7, #8]
 80038f8:	607a      	str	r2, [r7, #4]
 80038fa:	603b      	str	r3, [r7, #0]
 80038fc:	4603      	mov	r3, r0
 80038fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8003900:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8003902:	4618      	mov	r0, r3
 8003904:	3714      	adds	r7, #20
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr

0800390e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800390e:	b480      	push	{r7}
 8003910:	b085      	sub	sp, #20
 8003912:	af00      	add	r7, sp, #0
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]
 8003918:	603b      	str	r3, [r7, #0]
 800391a:	4603      	mov	r3, r0
 800391c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800391e:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8003920:	4618      	mov	r0, r3
 8003922:	3714      	adds	r7, #20
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800392c:	b480      	push	{r7}
 800392e:	b085      	sub	sp, #20
 8003930:	af00      	add	r7, sp, #0
 8003932:	4603      	mov	r3, r0
 8003934:	603a      	str	r2, [r7, #0]
 8003936:	71fb      	strb	r3, [r7, #7]
 8003938:	460b      	mov	r3, r1
 800393a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	73fb      	strb	r3, [r7, #15]
    return res;
 8003940:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8003942:	4618      	mov	r0, r3
 8003944:	3714      	adds	r7, #20
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
	...

08003950 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8003950:	b480      	push	{r7}
 8003952:	b087      	sub	sp, #28
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	4613      	mov	r3, r2
 800395c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800395e:	2301      	movs	r3, #1
 8003960:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8003962:	2300      	movs	r3, #0
 8003964:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8003966:	4b1f      	ldr	r3, [pc, #124]	@ (80039e4 <FATFS_LinkDriverEx+0x94>)
 8003968:	7a5b      	ldrb	r3, [r3, #9]
 800396a:	b2db      	uxtb	r3, r3
 800396c:	2b01      	cmp	r3, #1
 800396e:	d831      	bhi.n	80039d4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8003970:	4b1c      	ldr	r3, [pc, #112]	@ (80039e4 <FATFS_LinkDriverEx+0x94>)
 8003972:	7a5b      	ldrb	r3, [r3, #9]
 8003974:	b2db      	uxtb	r3, r3
 8003976:	461a      	mov	r2, r3
 8003978:	4b1a      	ldr	r3, [pc, #104]	@ (80039e4 <FATFS_LinkDriverEx+0x94>)
 800397a:	2100      	movs	r1, #0
 800397c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800397e:	4b19      	ldr	r3, [pc, #100]	@ (80039e4 <FATFS_LinkDriverEx+0x94>)
 8003980:	7a5b      	ldrb	r3, [r3, #9]
 8003982:	b2db      	uxtb	r3, r3
 8003984:	4a17      	ldr	r2, [pc, #92]	@ (80039e4 <FATFS_LinkDriverEx+0x94>)
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	4413      	add	r3, r2
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800398e:	4b15      	ldr	r3, [pc, #84]	@ (80039e4 <FATFS_LinkDriverEx+0x94>)
 8003990:	7a5b      	ldrb	r3, [r3, #9]
 8003992:	b2db      	uxtb	r3, r3
 8003994:	461a      	mov	r2, r3
 8003996:	4b13      	ldr	r3, [pc, #76]	@ (80039e4 <FATFS_LinkDriverEx+0x94>)
 8003998:	4413      	add	r3, r2
 800399a:	79fa      	ldrb	r2, [r7, #7]
 800399c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800399e:	4b11      	ldr	r3, [pc, #68]	@ (80039e4 <FATFS_LinkDriverEx+0x94>)
 80039a0:	7a5b      	ldrb	r3, [r3, #9]
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	1c5a      	adds	r2, r3, #1
 80039a6:	b2d1      	uxtb	r1, r2
 80039a8:	4a0e      	ldr	r2, [pc, #56]	@ (80039e4 <FATFS_LinkDriverEx+0x94>)
 80039aa:	7251      	strb	r1, [r2, #9]
 80039ac:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80039ae:	7dbb      	ldrb	r3, [r7, #22]
 80039b0:	3330      	adds	r3, #48	@ 0x30
 80039b2:	b2da      	uxtb	r2, r3
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	3301      	adds	r3, #1
 80039bc:	223a      	movs	r2, #58	@ 0x3a
 80039be:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	3302      	adds	r3, #2
 80039c4:	222f      	movs	r2, #47	@ 0x2f
 80039c6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	3303      	adds	r3, #3
 80039cc:	2200      	movs	r2, #0
 80039ce:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80039d0:	2300      	movs	r3, #0
 80039d2:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 80039d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	371c      	adds	r7, #28
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	200000c0 	.word	0x200000c0

080039e8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80039f2:	2200      	movs	r2, #0
 80039f4:	6839      	ldr	r1, [r7, #0]
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f7ff ffaa 	bl	8003950 <FATFS_LinkDriverEx>
 80039fc:	4603      	mov	r3, r0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3708      	adds	r7, #8
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <memset>:
 8003a06:	4402      	add	r2, r0
 8003a08:	4603      	mov	r3, r0
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d100      	bne.n	8003a10 <memset+0xa>
 8003a0e:	4770      	bx	lr
 8003a10:	f803 1b01 	strb.w	r1, [r3], #1
 8003a14:	e7f9      	b.n	8003a0a <memset+0x4>
	...

08003a18 <__libc_init_array>:
 8003a18:	b570      	push	{r4, r5, r6, lr}
 8003a1a:	4d0d      	ldr	r5, [pc, #52]	@ (8003a50 <__libc_init_array+0x38>)
 8003a1c:	4c0d      	ldr	r4, [pc, #52]	@ (8003a54 <__libc_init_array+0x3c>)
 8003a1e:	1b64      	subs	r4, r4, r5
 8003a20:	10a4      	asrs	r4, r4, #2
 8003a22:	2600      	movs	r6, #0
 8003a24:	42a6      	cmp	r6, r4
 8003a26:	d109      	bne.n	8003a3c <__libc_init_array+0x24>
 8003a28:	4d0b      	ldr	r5, [pc, #44]	@ (8003a58 <__libc_init_array+0x40>)
 8003a2a:	4c0c      	ldr	r4, [pc, #48]	@ (8003a5c <__libc_init_array+0x44>)
 8003a2c:	f000 f826 	bl	8003a7c <_init>
 8003a30:	1b64      	subs	r4, r4, r5
 8003a32:	10a4      	asrs	r4, r4, #2
 8003a34:	2600      	movs	r6, #0
 8003a36:	42a6      	cmp	r6, r4
 8003a38:	d105      	bne.n	8003a46 <__libc_init_array+0x2e>
 8003a3a:	bd70      	pop	{r4, r5, r6, pc}
 8003a3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a40:	4798      	blx	r3
 8003a42:	3601      	adds	r6, #1
 8003a44:	e7ee      	b.n	8003a24 <__libc_init_array+0xc>
 8003a46:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a4a:	4798      	blx	r3
 8003a4c:	3601      	adds	r6, #1
 8003a4e:	e7f2      	b.n	8003a36 <__libc_init_array+0x1e>
 8003a50:	08003d24 	.word	0x08003d24
 8003a54:	08003d24 	.word	0x08003d24
 8003a58:	08003d24 	.word	0x08003d24
 8003a5c:	08003d28 	.word	0x08003d28

08003a60 <memcpy>:
 8003a60:	440a      	add	r2, r1
 8003a62:	4291      	cmp	r1, r2
 8003a64:	f100 33ff 	add.w	r3, r0, #4294967295
 8003a68:	d100      	bne.n	8003a6c <memcpy+0xc>
 8003a6a:	4770      	bx	lr
 8003a6c:	b510      	push	{r4, lr}
 8003a6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a76:	4291      	cmp	r1, r2
 8003a78:	d1f9      	bne.n	8003a6e <memcpy+0xe>
 8003a7a:	bd10      	pop	{r4, pc}

08003a7c <_init>:
 8003a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a7e:	bf00      	nop
 8003a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a82:	bc08      	pop	{r3}
 8003a84:	469e      	mov	lr, r3
 8003a86:	4770      	bx	lr

08003a88 <_fini>:
 8003a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a8a:	bf00      	nop
 8003a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a8e:	bc08      	pop	{r3}
 8003a90:	469e      	mov	lr, r3
 8003a92:	4770      	bx	lr
