
meteostanica.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e1c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  08003fa4  08003fa4  00004fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004234  08004234  00006028  2**0
                  CONTENTS
  4 .ARM          00000000  08004234  08004234  00006028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004234  08004234  00006028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004234  08004234  00005234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004238  08004238  00005238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  0800423c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006028  2**0
                  CONTENTS
 10 .bss          000000e8  20000028  20000028  00006028  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000110  20000110  00006028  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006028  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000abf0  00000000  00000000  00006058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002893  00000000  00000000  00010c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009f0  00000000  00000000  000134e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000739  00000000  00000000  00013ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d123  00000000  00000000  00014609  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ed98  00000000  00000000  0003172c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a1659  00000000  00000000  000404c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e1b1d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002528  00000000  00000000  000e1b60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  000e4088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000028 	.word	0x20000028
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003f8c 	.word	0x08003f8c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000002c 	.word	0x2000002c
 80001c4:	08003f8c 	.word	0x08003f8c

080001c8 <GFX_Init>:
// Premenné pre kurzor a farbu textu
static int16_t cursor_x = 0, cursor_y = 0;
static uint16_t text_color = COLOR_WHITE;

// Inicializácia GFX knižnice
void GFX_Init(void) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
    ILI9341_Init(); // Inicializácia ovládača displeja
 80001cc:	f000 f8b2 	bl	8000334 <ILI9341_Init>
    GFX_FillScreen(COLOR_BLACK); // Vyčistenie obrazovky
 80001d0:	2000      	movs	r0, #0
 80001d2:	f000 f802 	bl	80001da <GFX_FillScreen>
}
 80001d6:	bf00      	nop
 80001d8:	bd80      	pop	{r7, pc}

080001da <GFX_FillScreen>:

// Vyplnenie celej obrazovky jednou farbou
void GFX_FillScreen(uint16_t color) {
 80001da:	b580      	push	{r7, lr}
 80001dc:	b082      	sub	sp, #8
 80001de:	af00      	add	r7, sp, #0
 80001e0:	4603      	mov	r3, r0
 80001e2:	80fb      	strh	r3, [r7, #6]
    ILI9341_FillScreen(color);
 80001e4:	88fb      	ldrh	r3, [r7, #6]
 80001e6:	4618      	mov	r0, r3
 80001e8:	f000 f95a 	bl	80004a0 <ILI9341_FillScreen>
}
 80001ec:	bf00      	nop
 80001ee:	3708      	adds	r7, #8
 80001f0:	46bd      	mov	sp, r7
 80001f2:	bd80      	pop	{r7, pc}

080001f4 <GFX_SetCursor>:
        if (e2 < dx) { err += dx; y0 += sy; }
    }
}

// Nastavenie kurzora
void GFX_SetCursor(int16_t x, int16_t y) {
 80001f4:	b480      	push	{r7}
 80001f6:	b083      	sub	sp, #12
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	4603      	mov	r3, r0
 80001fc:	460a      	mov	r2, r1
 80001fe:	80fb      	strh	r3, [r7, #6]
 8000200:	4613      	mov	r3, r2
 8000202:	80bb      	strh	r3, [r7, #4]
    cursor_x = x;
 8000204:	4a05      	ldr	r2, [pc, #20]	@ (800021c <GFX_SetCursor+0x28>)
 8000206:	88fb      	ldrh	r3, [r7, #6]
 8000208:	8013      	strh	r3, [r2, #0]
    cursor_y = y;
 800020a:	4a05      	ldr	r2, [pc, #20]	@ (8000220 <GFX_SetCursor+0x2c>)
 800020c:	88bb      	ldrh	r3, [r7, #4]
 800020e:	8013      	strh	r3, [r2, #0]
}
 8000210:	bf00      	nop
 8000212:	370c      	adds	r7, #12
 8000214:	46bd      	mov	sp, r7
 8000216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021a:	4770      	bx	lr
 800021c:	20000044 	.word	0x20000044
 8000220:	20000046 	.word	0x20000046

08000224 <GFX_SetTextColor>:

// Nastavenie farby textu
void GFX_SetTextColor(uint16_t color) {
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
 800022a:	4603      	mov	r3, r0
 800022c:	80fb      	strh	r3, [r7, #6]
    text_color = color;
 800022e:	4a04      	ldr	r2, [pc, #16]	@ (8000240 <GFX_SetTextColor+0x1c>)
 8000230:	88fb      	ldrh	r3, [r7, #6]
 8000232:	8013      	strh	r3, [r2, #0]
}
 8000234:	bf00      	nop
 8000236:	370c      	adds	r7, #12
 8000238:	46bd      	mov	sp, r7
 800023a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023e:	4770      	bx	lr
 8000240:	20000000 	.word	0x20000000

08000244 <GFX_Print>:

// Tlač textu
void GFX_Print(const char* text) {
 8000244:	b590      	push	{r4, r7, lr}
 8000246:	b085      	sub	sp, #20
 8000248:	af02      	add	r7, sp, #8
 800024a:	6078      	str	r0, [r7, #4]
    while (*text) {
 800024c:	e01b      	b.n	8000286 <GFX_Print+0x42>
        ILI9341_DrawChar(cursor_x, cursor_y, *text, text_color, COLOR_BLACK, 1);
 800024e:	4b12      	ldr	r3, [pc, #72]	@ (8000298 <GFX_Print+0x54>)
 8000250:	f9b3 0000 	ldrsh.w	r0, [r3]
 8000254:	4b11      	ldr	r3, [pc, #68]	@ (800029c <GFX_Print+0x58>)
 8000256:	f9b3 1000 	ldrsh.w	r1, [r3]
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	781a      	ldrb	r2, [r3, #0]
 800025e:	4b10      	ldr	r3, [pc, #64]	@ (80002a0 <GFX_Print+0x5c>)
 8000260:	881b      	ldrh	r3, [r3, #0]
 8000262:	2401      	movs	r4, #1
 8000264:	9401      	str	r4, [sp, #4]
 8000266:	2400      	movs	r4, #0
 8000268:	9400      	str	r4, [sp, #0]
 800026a:	f000 f95b 	bl	8000524 <ILI9341_DrawChar>
        cursor_x += 6; // Posunutie kurzora (prispôsobte veľkosť fontu)
 800026e:	4b0a      	ldr	r3, [pc, #40]	@ (8000298 <GFX_Print+0x54>)
 8000270:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000274:	b29b      	uxth	r3, r3
 8000276:	3306      	adds	r3, #6
 8000278:	b29b      	uxth	r3, r3
 800027a:	b21a      	sxth	r2, r3
 800027c:	4b06      	ldr	r3, [pc, #24]	@ (8000298 <GFX_Print+0x54>)
 800027e:	801a      	strh	r2, [r3, #0]
        text++;
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	3301      	adds	r3, #1
 8000284:	607b      	str	r3, [r7, #4]
    while (*text) {
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	2b00      	cmp	r3, #0
 800028c:	d1df      	bne.n	800024e <GFX_Print+0xa>
    }
}
 800028e:	bf00      	nop
 8000290:	bf00      	nop
 8000292:	370c      	adds	r7, #12
 8000294:	46bd      	mov	sp, r7
 8000296:	bd90      	pop	{r4, r7, pc}
 8000298:	20000044 	.word	0x20000044
 800029c:	20000046 	.word	0x20000046
 80002a0:	20000000 	.word	0x20000000

080002a4 <ILI9341_SendCommand>:
#define ILI9341_CMD_MEMORY_WRITE 0x2C
#define ILI9341_CMD_COLUMN_ADDRESS_SET 0x2A
#define ILI9341_CMD_PAGE_ADDRESS_SET 0x2B

// Pomocná funkcia na poslanie príkazu
void ILI9341_SendCommand(uint8_t cmd) {
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DCX_GPIO_Port, DCX_Pin, GPIO_PIN_RESET); // DCX = Command
 80002ae:	2200      	movs	r2, #0
 80002b0:	2101      	movs	r1, #1
 80002b2:	480c      	ldr	r0, [pc, #48]	@ (80002e4 <ILI9341_SendCommand+0x40>)
 80002b4:	f001 fa20 	bl	80016f8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_RESET); // CSX = Enable
 80002b8:	2200      	movs	r2, #0
 80002ba:	2102      	movs	r1, #2
 80002bc:	4809      	ldr	r0, [pc, #36]	@ (80002e4 <ILI9341_SendCommand+0x40>)
 80002be:	f001 fa1b 	bl	80016f8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 80002c2:	1df9      	adds	r1, r7, #7
 80002c4:	f04f 33ff 	mov.w	r3, #4294967295
 80002c8:	2201      	movs	r2, #1
 80002ca:	4807      	ldr	r0, [pc, #28]	@ (80002e8 <ILI9341_SendCommand+0x44>)
 80002cc:	f002 fe03 	bl	8002ed6 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_SET);   // CSX = Disable
 80002d0:	2201      	movs	r2, #1
 80002d2:	2102      	movs	r1, #2
 80002d4:	4803      	ldr	r0, [pc, #12]	@ (80002e4 <ILI9341_SendCommand+0x40>)
 80002d6:	f001 fa0f 	bl	80016f8 <HAL_GPIO_WritePin>
}
 80002da:	bf00      	nop
 80002dc:	3708      	adds	r7, #8
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	48000400 	.word	0x48000400
 80002e8:	20000094 	.word	0x20000094

080002ec <ILI9341_SendData>:

// Pomocná funkcia na poslanie dát
void ILI9341_SendData(uint8_t* data, size_t size) {
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
 80002f4:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DCX_GPIO_Port, DCX_Pin, GPIO_PIN_SET);   // DCX = Data
 80002f6:	2201      	movs	r2, #1
 80002f8:	2101      	movs	r1, #1
 80002fa:	480c      	ldr	r0, [pc, #48]	@ (800032c <ILI9341_SendData+0x40>)
 80002fc:	f001 f9fc 	bl	80016f8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_RESET); // CSX = Enable
 8000300:	2200      	movs	r2, #0
 8000302:	2102      	movs	r1, #2
 8000304:	4809      	ldr	r0, [pc, #36]	@ (800032c <ILI9341_SendData+0x40>)
 8000306:	f001 f9f7 	bl	80016f8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800030a:	683b      	ldr	r3, [r7, #0]
 800030c:	b29a      	uxth	r2, r3
 800030e:	f04f 33ff 	mov.w	r3, #4294967295
 8000312:	6879      	ldr	r1, [r7, #4]
 8000314:	4806      	ldr	r0, [pc, #24]	@ (8000330 <ILI9341_SendData+0x44>)
 8000316:	f002 fdde 	bl	8002ed6 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_SET);   // CSX = Disable
 800031a:	2201      	movs	r2, #1
 800031c:	2102      	movs	r1, #2
 800031e:	4803      	ldr	r0, [pc, #12]	@ (800032c <ILI9341_SendData+0x40>)
 8000320:	f001 f9ea 	bl	80016f8 <HAL_GPIO_WritePin>
}
 8000324:	bf00      	nop
 8000326:	3708      	adds	r7, #8
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}
 800032c:	48000400 	.word	0x48000400
 8000330:	20000094 	.word	0x20000094

08000334 <ILI9341_Init>:

// Inicializácia displeja
void ILI9341_Init(void) {
 8000334:	b580      	push	{r7, lr}
 8000336:	b09e      	sub	sp, #120	@ 0x78
 8000338:	af00      	add	r7, sp, #0
    // Reset displeja
    HAL_GPIO_WritePin(RESX_GPIO_Port, RESX_Pin, GPIO_PIN_RESET);
 800033a:	2200      	movs	r2, #0
 800033c:	2104      	movs	r1, #4
 800033e:	4822      	ldr	r0, [pc, #136]	@ (80003c8 <ILI9341_Init+0x94>)
 8000340:	f001 f9da 	bl	80016f8 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000344:	200a      	movs	r0, #10
 8000346:	f000 fde7 	bl	8000f18 <HAL_Delay>
    HAL_GPIO_WritePin(RESX_GPIO_Port, RESX_Pin, GPIO_PIN_SET);
 800034a:	2201      	movs	r2, #1
 800034c:	2104      	movs	r1, #4
 800034e:	481e      	ldr	r0, [pc, #120]	@ (80003c8 <ILI9341_Init+0x94>)
 8000350:	f001 f9d2 	bl	80016f8 <HAL_GPIO_WritePin>
    HAL_Delay(120);
 8000354:	2078      	movs	r0, #120	@ 0x78
 8000356:	f000 fddf 	bl	8000f18 <HAL_Delay>

    // Posielanie inicializačných príkazov podľa datasheetu
    uint8_t initCommands[] = {
 800035a:	4a1c      	ldr	r2, [pc, #112]	@ (80003cc <ILI9341_Init+0x98>)
 800035c:	1d3b      	adds	r3, r7, #4
 800035e:	4611      	mov	r1, r2
 8000360:	226b      	movs	r2, #107	@ 0x6b
 8000362:	4618      	mov	r0, r3
 8000364:	f003 fe04 	bl	8003f70 <memcpy>
        0xE1, 15, 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1, 0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F, // Negative Gamma
        0x11, 0, // Exit Sleep
        0x29, 0  // Display ON
    };

    for (size_t i = 0; i < sizeof(initCommands);) {
 8000368:	2300      	movs	r3, #0
 800036a:	677b      	str	r3, [r7, #116]	@ 0x74
 800036c:	e024      	b.n	80003b8 <ILI9341_Init+0x84>
        uint8_t cmd = initCommands[i++];
 800036e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000370:	1c5a      	adds	r2, r3, #1
 8000372:	677a      	str	r2, [r7, #116]	@ 0x74
 8000374:	3378      	adds	r3, #120	@ 0x78
 8000376:	443b      	add	r3, r7
 8000378:	f813 3c74 	ldrb.w	r3, [r3, #-116]
 800037c:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
        uint8_t numArgs = initCommands[i++];
 8000380:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000382:	1c5a      	adds	r2, r3, #1
 8000384:	677a      	str	r2, [r7, #116]	@ 0x74
 8000386:	3378      	adds	r3, #120	@ 0x78
 8000388:	443b      	add	r3, r7
 800038a:	f813 3c74 	ldrb.w	r3, [r3, #-116]
 800038e:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
        ILI9341_SendCommand(cmd);
 8000392:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8000396:	4618      	mov	r0, r3
 8000398:	f7ff ff84 	bl	80002a4 <ILI9341_SendCommand>
        ILI9341_SendData(&initCommands[i], numArgs);
 800039c:	1d3a      	adds	r2, r7, #4
 800039e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80003a0:	4413      	add	r3, r2
 80003a2:	f897 2072 	ldrb.w	r2, [r7, #114]	@ 0x72
 80003a6:	4611      	mov	r1, r2
 80003a8:	4618      	mov	r0, r3
 80003aa:	f7ff ff9f 	bl	80002ec <ILI9341_SendData>
        i += numArgs;
 80003ae:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80003b2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80003b4:	4413      	add	r3, r2
 80003b6:	677b      	str	r3, [r7, #116]	@ 0x74
    for (size_t i = 0; i < sizeof(initCommands);) {
 80003b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80003ba:	2b6a      	cmp	r3, #106	@ 0x6a
 80003bc:	d9d7      	bls.n	800036e <ILI9341_Init+0x3a>
    }
}
 80003be:	bf00      	nop
 80003c0:	bf00      	nop
 80003c2:	3778      	adds	r7, #120	@ 0x78
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	48000400 	.word	0x48000400
 80003cc:	08003fa4 	.word	0x08003fa4

080003d0 <ILI9341_DrawPixel>:

// Vykreslenie bodu
void ILI9341_DrawPixel(int16_t x, int16_t y, uint16_t color) {
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b086      	sub	sp, #24
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	4603      	mov	r3, r0
 80003d8:	80fb      	strh	r3, [r7, #6]
 80003da:	460b      	mov	r3, r1
 80003dc:	80bb      	strh	r3, [r7, #4]
 80003de:	4613      	mov	r3, r2
 80003e0:	807b      	strh	r3, [r7, #2]
    if (x < 0 || x >= ILI9341_WIDTH || y < 0 || y >= ILI9341_HEIGHT)
 80003e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db55      	blt.n	8000496 <ILI9341_DrawPixel+0xc6>
 80003ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80003ee:	2bef      	cmp	r3, #239	@ 0xef
 80003f0:	dc51      	bgt.n	8000496 <ILI9341_DrawPixel+0xc6>
 80003f2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	db4d      	blt.n	8000496 <ILI9341_DrawPixel+0xc6>
 80003fa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80003fe:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000402:	da48      	bge.n	8000496 <ILI9341_DrawPixel+0xc6>
        return;

    uint8_t data[] = {
 8000404:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000408:	121b      	asrs	r3, r3, #8
 800040a:	b21b      	sxth	r3, r3
 800040c:	b2db      	uxtb	r3, r3
 800040e:	743b      	strb	r3, [r7, #16]
 8000410:	88fb      	ldrh	r3, [r7, #6]
 8000412:	b2db      	uxtb	r3, r3
 8000414:	747b      	strb	r3, [r7, #17]
 8000416:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800041a:	121b      	asrs	r3, r3, #8
 800041c:	b21b      	sxth	r3, r3
 800041e:	b2db      	uxtb	r3, r3
 8000420:	74bb      	strb	r3, [r7, #18]
 8000422:	88fb      	ldrh	r3, [r7, #6]
 8000424:	b2db      	uxtb	r3, r3
 8000426:	74fb      	strb	r3, [r7, #19]
 8000428:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800042c:	121b      	asrs	r3, r3, #8
 800042e:	b21b      	sxth	r3, r3
 8000430:	b2db      	uxtb	r3, r3
 8000432:	753b      	strb	r3, [r7, #20]
 8000434:	88bb      	ldrh	r3, [r7, #4]
 8000436:	b2db      	uxtb	r3, r3
 8000438:	757b      	strb	r3, [r7, #21]
 800043a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800043e:	121b      	asrs	r3, r3, #8
 8000440:	b21b      	sxth	r3, r3
 8000442:	b2db      	uxtb	r3, r3
 8000444:	75bb      	strb	r3, [r7, #22]
 8000446:	88bb      	ldrh	r3, [r7, #4]
 8000448:	b2db      	uxtb	r3, r3
 800044a:	75fb      	strb	r3, [r7, #23]
        (x >> 8) & 0xFF, x & 0xFF, (x >> 8) & 0xFF, x & 0xFF,
        (y >> 8) & 0xFF, y & 0xFF, (y >> 8) & 0xFF, y & 0xFF
    };

    ILI9341_SendCommand(ILI9341_CMD_COLUMN_ADDRESS_SET);
 800044c:	202a      	movs	r0, #42	@ 0x2a
 800044e:	f7ff ff29 	bl	80002a4 <ILI9341_SendCommand>
    ILI9341_SendData(data, 4);
 8000452:	f107 0310 	add.w	r3, r7, #16
 8000456:	2104      	movs	r1, #4
 8000458:	4618      	mov	r0, r3
 800045a:	f7ff ff47 	bl	80002ec <ILI9341_SendData>

    ILI9341_SendCommand(ILI9341_CMD_PAGE_ADDRESS_SET);
 800045e:	202b      	movs	r0, #43	@ 0x2b
 8000460:	f7ff ff20 	bl	80002a4 <ILI9341_SendCommand>
    ILI9341_SendData(&data[4], 4);
 8000464:	f107 0310 	add.w	r3, r7, #16
 8000468:	3304      	adds	r3, #4
 800046a:	2104      	movs	r1, #4
 800046c:	4618      	mov	r0, r3
 800046e:	f7ff ff3d 	bl	80002ec <ILI9341_SendData>

    ILI9341_SendCommand(ILI9341_CMD_MEMORY_WRITE);
 8000472:	202c      	movs	r0, #44	@ 0x2c
 8000474:	f7ff ff16 	bl	80002a4 <ILI9341_SendCommand>
    uint8_t colorData[] = { color >> 8, color & 0xFF };
 8000478:	887b      	ldrh	r3, [r7, #2]
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	b29b      	uxth	r3, r3
 800047e:	b2db      	uxtb	r3, r3
 8000480:	733b      	strb	r3, [r7, #12]
 8000482:	887b      	ldrh	r3, [r7, #2]
 8000484:	b2db      	uxtb	r3, r3
 8000486:	737b      	strb	r3, [r7, #13]
    ILI9341_SendData(colorData, 2);
 8000488:	f107 030c 	add.w	r3, r7, #12
 800048c:	2102      	movs	r1, #2
 800048e:	4618      	mov	r0, r3
 8000490:	f7ff ff2c 	bl	80002ec <ILI9341_SendData>
 8000494:	e000      	b.n	8000498 <ILI9341_DrawPixel+0xc8>
        return;
 8000496:	bf00      	nop
}
 8000498:	3718      	adds	r7, #24
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
	...

080004a0 <ILI9341_FillScreen>:

// Vyplnenie celej obrazovky
void ILI9341_FillScreen(uint16_t color) {
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b086      	sub	sp, #24
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	4603      	mov	r3, r0
 80004a8:	80fb      	strh	r3, [r7, #6]
    uint8_t data[] = {
 80004aa:	4a1d      	ldr	r2, [pc, #116]	@ (8000520 <ILI9341_FillScreen+0x80>)
 80004ac:	f107 030c 	add.w	r3, r7, #12
 80004b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004b4:	e883 0003 	stmia.w	r3, {r0, r1}
        0, 0, (ILI9341_WIDTH - 1) >> 8, (ILI9341_WIDTH - 1) & 0xFF,
        0, 0, (ILI9341_HEIGHT - 1) >> 8, (ILI9341_HEIGHT - 1) & 0xFF
    };

    ILI9341_SendCommand(ILI9341_CMD_COLUMN_ADDRESS_SET);
 80004b8:	202a      	movs	r0, #42	@ 0x2a
 80004ba:	f7ff fef3 	bl	80002a4 <ILI9341_SendCommand>
    ILI9341_SendData(data, 4);
 80004be:	f107 030c 	add.w	r3, r7, #12
 80004c2:	2104      	movs	r1, #4
 80004c4:	4618      	mov	r0, r3
 80004c6:	f7ff ff11 	bl	80002ec <ILI9341_SendData>

    ILI9341_SendCommand(ILI9341_CMD_PAGE_ADDRESS_SET);
 80004ca:	202b      	movs	r0, #43	@ 0x2b
 80004cc:	f7ff feea 	bl	80002a4 <ILI9341_SendCommand>
    ILI9341_SendData(&data[4], 4);
 80004d0:	f107 030c 	add.w	r3, r7, #12
 80004d4:	3304      	adds	r3, #4
 80004d6:	2104      	movs	r1, #4
 80004d8:	4618      	mov	r0, r3
 80004da:	f7ff ff07 	bl	80002ec <ILI9341_SendData>

    ILI9341_SendCommand(ILI9341_CMD_MEMORY_WRITE);
 80004de:	202c      	movs	r0, #44	@ 0x2c
 80004e0:	f7ff fee0 	bl	80002a4 <ILI9341_SendCommand>
    uint8_t colorData[] = { color >> 8, color & 0xFF };
 80004e4:	88fb      	ldrh	r3, [r7, #6]
 80004e6:	0a1b      	lsrs	r3, r3, #8
 80004e8:	b29b      	uxth	r3, r3
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	723b      	strb	r3, [r7, #8]
 80004ee:	88fb      	ldrh	r3, [r7, #6]
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	727b      	strb	r3, [r7, #9]
    for (int i = 0; i < ILI9341_WIDTH * ILI9341_HEIGHT; i++) {
 80004f4:	2300      	movs	r3, #0
 80004f6:	617b      	str	r3, [r7, #20]
 80004f8:	e008      	b.n	800050c <ILI9341_FillScreen+0x6c>
        ILI9341_SendData(colorData, 2);
 80004fa:	f107 0308 	add.w	r3, r7, #8
 80004fe:	2102      	movs	r1, #2
 8000500:	4618      	mov	r0, r3
 8000502:	f7ff fef3 	bl	80002ec <ILI9341_SendData>
    for (int i = 0; i < ILI9341_WIDTH * ILI9341_HEIGHT; i++) {
 8000506:	697b      	ldr	r3, [r7, #20]
 8000508:	3301      	adds	r3, #1
 800050a:	617b      	str	r3, [r7, #20]
 800050c:	697b      	ldr	r3, [r7, #20]
 800050e:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8000512:	dbf2      	blt.n	80004fa <ILI9341_FillScreen+0x5a>
    }
}
 8000514:	bf00      	nop
 8000516:	bf00      	nop
 8000518:	3718      	adds	r7, #24
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	08004010 	.word	0x08004010

08000524 <ILI9341_DrawChar>:

// Vykreslenie znaku
void ILI9341_DrawChar(int16_t x, int16_t y, char c, uint16_t color, uint16_t bg, uint8_t size) {
 8000524:	b590      	push	{r4, r7, lr}
 8000526:	b085      	sub	sp, #20
 8000528:	af00      	add	r7, sp, #0
 800052a:	4604      	mov	r4, r0
 800052c:	4608      	mov	r0, r1
 800052e:	4611      	mov	r1, r2
 8000530:	461a      	mov	r2, r3
 8000532:	4623      	mov	r3, r4
 8000534:	80fb      	strh	r3, [r7, #6]
 8000536:	4603      	mov	r3, r0
 8000538:	80bb      	strh	r3, [r7, #4]
 800053a:	460b      	mov	r3, r1
 800053c:	70fb      	strb	r3, [r7, #3]
 800053e:	4613      	mov	r3, r2
 8000540:	803b      	strh	r3, [r7, #0]
    uint8_t *fontData = font[c - 32];
 8000542:	78fb      	ldrb	r3, [r7, #3]
 8000544:	f1a3 0220 	sub.w	r2, r3, #32
 8000548:	4613      	mov	r3, r2
 800054a:	009b      	lsls	r3, r3, #2
 800054c:	4413      	add	r3, r2
 800054e:	4a36      	ldr	r2, [pc, #216]	@ (8000628 <ILI9341_DrawChar+0x104>)
 8000550:	4413      	add	r3, r2
 8000552:	60bb      	str	r3, [r7, #8]
    for (int8_t i = 0; i < 5; i++) {
 8000554:	2300      	movs	r3, #0
 8000556:	73fb      	strb	r3, [r7, #15]
 8000558:	e05d      	b.n	8000616 <ILI9341_DrawChar+0xf2>
        uint8_t line = fontData[i];
 800055a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800055e:	68ba      	ldr	r2, [r7, #8]
 8000560:	4413      	add	r3, r2
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	73bb      	strb	r3, [r7, #14]
        for (int8_t j = 0; j < 8; j++) {
 8000566:	2300      	movs	r3, #0
 8000568:	737b      	strb	r3, [r7, #13]
 800056a:	e04a      	b.n	8000602 <ILI9341_DrawChar+0xde>
            if (line & 0x1) {
 800056c:	7bbb      	ldrb	r3, [r7, #14]
 800056e:	f003 0301 	and.w	r3, r3, #1
 8000572:	2b00      	cmp	r3, #0
 8000574:	d01e      	beq.n	80005b4 <ILI9341_DrawChar+0x90>
                ILI9341_DrawPixel(x + i * size, y + j * size, color);
 8000576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800057a:	b29a      	uxth	r2, r3
 800057c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000580:	b29b      	uxth	r3, r3
 8000582:	fb12 f303 	smulbb	r3, r2, r3
 8000586:	b29a      	uxth	r2, r3
 8000588:	88fb      	ldrh	r3, [r7, #6]
 800058a:	4413      	add	r3, r2
 800058c:	b29b      	uxth	r3, r3
 800058e:	b218      	sxth	r0, r3
 8000590:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000594:	b29a      	uxth	r2, r3
 8000596:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800059a:	b29b      	uxth	r3, r3
 800059c:	fb12 f303 	smulbb	r3, r2, r3
 80005a0:	b29a      	uxth	r2, r3
 80005a2:	88bb      	ldrh	r3, [r7, #4]
 80005a4:	4413      	add	r3, r2
 80005a6:	b29b      	uxth	r3, r3
 80005a8:	b21b      	sxth	r3, r3
 80005aa:	883a      	ldrh	r2, [r7, #0]
 80005ac:	4619      	mov	r1, r3
 80005ae:	f7ff ff0f 	bl	80003d0 <ILI9341_DrawPixel>
 80005b2:	e01d      	b.n	80005f0 <ILI9341_DrawChar+0xcc>
            } else {
                ILI9341_DrawPixel(x + i * size, y + j * size, bg);
 80005b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005b8:	b29a      	uxth	r2, r3
 80005ba:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80005be:	b29b      	uxth	r3, r3
 80005c0:	fb12 f303 	smulbb	r3, r2, r3
 80005c4:	b29a      	uxth	r2, r3
 80005c6:	88fb      	ldrh	r3, [r7, #6]
 80005c8:	4413      	add	r3, r2
 80005ca:	b29b      	uxth	r3, r3
 80005cc:	b218      	sxth	r0, r3
 80005ce:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80005d2:	b29a      	uxth	r2, r3
 80005d4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80005d8:	b29b      	uxth	r3, r3
 80005da:	fb12 f303 	smulbb	r3, r2, r3
 80005de:	b29a      	uxth	r2, r3
 80005e0:	88bb      	ldrh	r3, [r7, #4]
 80005e2:	4413      	add	r3, r2
 80005e4:	b29b      	uxth	r3, r3
 80005e6:	b21b      	sxth	r3, r3
 80005e8:	8c3a      	ldrh	r2, [r7, #32]
 80005ea:	4619      	mov	r1, r3
 80005ec:	f7ff fef0 	bl	80003d0 <ILI9341_DrawPixel>
            }
            line >>= 1;
 80005f0:	7bbb      	ldrb	r3, [r7, #14]
 80005f2:	085b      	lsrs	r3, r3, #1
 80005f4:	73bb      	strb	r3, [r7, #14]
        for (int8_t j = 0; j < 8; j++) {
 80005f6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	3301      	adds	r3, #1
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	737b      	strb	r3, [r7, #13]
 8000602:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000606:	2b07      	cmp	r3, #7
 8000608:	ddb0      	ble.n	800056c <ILI9341_DrawChar+0x48>
    for (int8_t i = 0; i < 5; i++) {
 800060a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800060e:	b2db      	uxtb	r3, r3
 8000610:	3301      	adds	r3, #1
 8000612:	b2db      	uxtb	r3, r3
 8000614:	73fb      	strb	r3, [r7, #15]
 8000616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800061a:	2b04      	cmp	r3, #4
 800061c:	dd9d      	ble.n	800055a <ILI9341_DrawChar+0x36>
        }
    }
}
 800061e:	bf00      	nop
 8000620:	bf00      	nop
 8000622:	3714      	adds	r7, #20
 8000624:	46bd      	mov	sp, r7
 8000626:	bd90      	pop	{r4, r7, pc}
 8000628:	08004028 	.word	0x08004028

0800062c <MX_GPIO_Init>:


#include "gpio.h"

void MX_GPIO_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af00      	add	r7, sp, #0
    // GPIO Initialization Structure
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]

    // Enable GPIO clocks
    __HAL_RCC_GPIOB_CLK_ENABLE();  // Adjust this for the correct GPIO port
 8000640:	4b15      	ldr	r3, [pc, #84]	@ (8000698 <MX_GPIO_Init+0x6c>)
 8000642:	695b      	ldr	r3, [r3, #20]
 8000644:	4a14      	ldr	r2, [pc, #80]	@ (8000698 <MX_GPIO_Init+0x6c>)
 8000646:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800064a:	6153      	str	r3, [r2, #20]
 800064c:	4b12      	ldr	r3, [pc, #72]	@ (8000698 <MX_GPIO_Init+0x6c>)
 800064e:	695b      	ldr	r3, [r3, #20]
 8000650:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000654:	603b      	str	r3, [r7, #0]
 8000656:	683b      	ldr	r3, [r7, #0]

    // Configure DCX Pin
    GPIO_InitStruct.Pin = DCX_Pin;
 8000658:	2301      	movs	r3, #1
 800065a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;  // Push-pull mode
 800065c:	2301      	movs	r3, #1
 800065e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000664:	2303      	movs	r3, #3
 8000666:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DCX_GPIO_Port, &GPIO_InitStruct);
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	4619      	mov	r1, r3
 800066c:	480b      	ldr	r0, [pc, #44]	@ (800069c <MX_GPIO_Init+0x70>)
 800066e:	f000 fed1 	bl	8001414 <HAL_GPIO_Init>

    // Configure CSX Pin
    GPIO_InitStruct.Pin = CSX_Pin;
 8000672:	2302      	movs	r3, #2
 8000674:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(CSX_GPIO_Port, &GPIO_InitStruct);
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	4619      	mov	r1, r3
 800067a:	4808      	ldr	r0, [pc, #32]	@ (800069c <MX_GPIO_Init+0x70>)
 800067c:	f000 feca 	bl	8001414 <HAL_GPIO_Init>

    // Configure RESX Pin
    GPIO_InitStruct.Pin = RESX_Pin;
 8000680:	2304      	movs	r3, #4
 8000682:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(RESX_GPIO_Port, &GPIO_InitStruct);
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	4619      	mov	r1, r3
 8000688:	4804      	ldr	r0, [pc, #16]	@ (800069c <MX_GPIO_Init+0x70>)
 800068a:	f000 fec3 	bl	8001414 <HAL_GPIO_Init>
}
 800068e:	bf00      	nop
 8000690:	3718      	adds	r7, #24
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40021000 	.word	0x40021000
 800069c:	48000400 	.word	0x48000400

080006a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006a4:	4b04      	ldr	r3, [pc, #16]	@ (80006b8 <__NVIC_GetPriorityGrouping+0x18>)
 80006a6:	68db      	ldr	r3, [r3, #12]
 80006a8:	0a1b      	lsrs	r3, r3, #8
 80006aa:	f003 0307 	and.w	r3, r3, #7
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	e000ed00 	.word	0xe000ed00

080006bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	db0b      	blt.n	80006e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	f003 021f 	and.w	r2, r3, #31
 80006d4:	4907      	ldr	r1, [pc, #28]	@ (80006f4 <__NVIC_EnableIRQ+0x38>)
 80006d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006da:	095b      	lsrs	r3, r3, #5
 80006dc:	2001      	movs	r0, #1
 80006de:	fa00 f202 	lsl.w	r2, r0, r2
 80006e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006e6:	bf00      	nop
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	e000e100 	.word	0xe000e100

080006f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	6039      	str	r1, [r7, #0]
 8000702:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000708:	2b00      	cmp	r3, #0
 800070a:	db0a      	blt.n	8000722 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	b2da      	uxtb	r2, r3
 8000710:	490c      	ldr	r1, [pc, #48]	@ (8000744 <__NVIC_SetPriority+0x4c>)
 8000712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000716:	0112      	lsls	r2, r2, #4
 8000718:	b2d2      	uxtb	r2, r2
 800071a:	440b      	add	r3, r1
 800071c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000720:	e00a      	b.n	8000738 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	b2da      	uxtb	r2, r3
 8000726:	4908      	ldr	r1, [pc, #32]	@ (8000748 <__NVIC_SetPriority+0x50>)
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	f003 030f 	and.w	r3, r3, #15
 800072e:	3b04      	subs	r3, #4
 8000730:	0112      	lsls	r2, r2, #4
 8000732:	b2d2      	uxtb	r2, r2
 8000734:	440b      	add	r3, r1
 8000736:	761a      	strb	r2, [r3, #24]
}
 8000738:	bf00      	nop
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr
 8000744:	e000e100 	.word	0xe000e100
 8000748:	e000ed00 	.word	0xe000ed00

0800074c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800074c:	b480      	push	{r7}
 800074e:	b089      	sub	sp, #36	@ 0x24
 8000750:	af00      	add	r7, sp, #0
 8000752:	60f8      	str	r0, [r7, #12]
 8000754:	60b9      	str	r1, [r7, #8]
 8000756:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	f003 0307 	and.w	r3, r3, #7
 800075e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000760:	69fb      	ldr	r3, [r7, #28]
 8000762:	f1c3 0307 	rsb	r3, r3, #7
 8000766:	2b04      	cmp	r3, #4
 8000768:	bf28      	it	cs
 800076a:	2304      	movcs	r3, #4
 800076c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800076e:	69fb      	ldr	r3, [r7, #28]
 8000770:	3304      	adds	r3, #4
 8000772:	2b06      	cmp	r3, #6
 8000774:	d902      	bls.n	800077c <NVIC_EncodePriority+0x30>
 8000776:	69fb      	ldr	r3, [r7, #28]
 8000778:	3b03      	subs	r3, #3
 800077a:	e000      	b.n	800077e <NVIC_EncodePriority+0x32>
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000780:	f04f 32ff 	mov.w	r2, #4294967295
 8000784:	69bb      	ldr	r3, [r7, #24]
 8000786:	fa02 f303 	lsl.w	r3, r2, r3
 800078a:	43da      	mvns	r2, r3
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	401a      	ands	r2, r3
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000794:	f04f 31ff 	mov.w	r1, #4294967295
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	fa01 f303 	lsl.w	r3, r1, r3
 800079e:	43d9      	mvns	r1, r3
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007a4:	4313      	orrs	r3, r2
         );
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3724      	adds	r7, #36	@ 0x24
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr

080007b2 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 80007b2:	b480      	push	{r7}
 80007b4:	b083      	sub	sp, #12
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f043 0201 	orr.w	r2, r3, #1
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	601a      	str	r2, [r3, #0]
}
 80007c6:	bf00      	nop
 80007c8:	370c      	adds	r7, #12
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr

080007d2 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 80007d2:	b480      	push	{r7}
 80007d4:	b083      	sub	sp, #12
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	601a      	str	r2, [r3, #0]
}
 80007e6:	bf00      	nop
 80007e8:	370c      	adds	r7, #12
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr

080007f2 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 80007f2:	b480      	push	{r7}
 80007f4:	b083      	sub	sp, #12
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	601a      	str	r2, [r3, #0]
}
 8000806:	bf00      	nop
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr

08000812 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 8000812:	b480      	push	{r7}
 8000814:	b085      	sub	sp, #20
 8000816:	af00      	add	r7, sp, #0
 8000818:	60f8      	str	r0, [r7, #12]
 800081a:	60b9      	str	r1, [r7, #8]
 800081c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	68db      	ldr	r3, [r3, #12]
 8000822:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8000826:	f023 0306 	bic.w	r3, r3, #6
 800082a:	68b9      	ldr	r1, [r7, #8]
 800082c:	687a      	ldr	r2, [r7, #4]
 800082e:	430a      	orrs	r2, r1
 8000830:	431a      	orrs	r2, r3
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	60da      	str	r2, [r3, #12]
}
 8000836:	bf00      	nop
 8000838:	3714      	adds	r7, #20
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr

08000842 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8000842:	b480      	push	{r7}
 8000844:	b083      	sub	sp, #12
 8000846:	af00      	add	r7, sp, #0
 8000848:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	68db      	ldr	r3, [r3, #12]
 800084e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	60da      	str	r2, [r3, #12]
}
 8000856:	bf00      	nop
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr

08000862 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(const I2C_TypeDef *I2Cx)
{
 8000862:	b480      	push	{r7}
 8000864:	b083      	sub	sp, #12
 8000866:	af00      	add	r7, sp, #0
 8000868:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	699b      	ldr	r3, [r3, #24]
 800086e:	f003 0304 	and.w	r3, r3, #4
 8000872:	2b04      	cmp	r3, #4
 8000874:	d101      	bne.n	800087a <LL_I2C_IsActiveFlag_RXNE+0x18>
 8000876:	2301      	movs	r3, #1
 8000878:	e000      	b.n	800087c <LL_I2C_IsActiveFlag_RXNE+0x1a>
 800087a:	2300      	movs	r3, #0
}
 800087c:	4618      	mov	r0, r3
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr

08000888 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	605a      	str	r2, [r3, #4]
}
 800089c:	bf00      	nop
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr

080008a8 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(const I2C_TypeDef *I2Cx)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008b4:	b2db      	uxtb	r3, r3
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	370c      	adds	r7, #12
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
	...

080008c4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b085      	sub	sp, #20
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80008cc:	4b08      	ldr	r3, [pc, #32]	@ (80008f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80008ce:	695a      	ldr	r2, [r3, #20]
 80008d0:	4907      	ldr	r1, [pc, #28]	@ (80008f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	4313      	orrs	r3, r2
 80008d6:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80008d8:	4b05      	ldr	r3, [pc, #20]	@ (80008f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80008da:	695a      	ldr	r2, [r3, #20]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	4013      	ands	r3, r2
 80008e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008e2:	68fb      	ldr	r3, [r7, #12]
}
 80008e4:	bf00      	nop
 80008e6:	3714      	adds	r7, #20
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr
 80008f0:	40021000 	.word	0x40021000

080008f4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b085      	sub	sp, #20
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80008fc:	4b08      	ldr	r3, [pc, #32]	@ (8000920 <LL_APB1_GRP1_EnableClock+0x2c>)
 80008fe:	69da      	ldr	r2, [r3, #28]
 8000900:	4907      	ldr	r1, [pc, #28]	@ (8000920 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	4313      	orrs	r3, r2
 8000906:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000908:	4b05      	ldr	r3, [pc, #20]	@ (8000920 <LL_APB1_GRP1_EnableClock+0x2c>)
 800090a:	69da      	ldr	r2, [r3, #28]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	4013      	ands	r3, r2
 8000910:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000912:	68fb      	ldr	r3, [r7, #12]
}
 8000914:	bf00      	nop
 8000916:	3714      	adds	r7, #20
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	40021000 	.word	0x40021000

08000924 <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08e      	sub	sp, #56	@ 0x38
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	609a      	str	r2, [r3, #8]
 8000936:	60da      	str	r2, [r3, #12]
 8000938:	611a      	str	r2, [r3, #16]
 800093a:	615a      	str	r2, [r3, #20]
 800093c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]
 800094c:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800094e:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8000952:	f7ff ffb7 	bl	80008c4 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8000956:	23c0      	movs	r3, #192	@ 0xc0
 8000958:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800095a:	2302      	movs	r3, #2
 800095c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800095e:	2303      	movs	r3, #3
 8000960:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000962:	2301      	movs	r3, #1
 8000964:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000966:	2301      	movs	r3, #1
 8000968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800096a:	2304      	movs	r3, #4
 800096c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096e:	1d3b      	adds	r3, r7, #4
 8000970:	4619      	mov	r1, r3
 8000972:	4821      	ldr	r0, [pc, #132]	@ (80009f8 <MX_I2C1_Init+0xd4>)
 8000974:	f003 f8ba 	bl	8003aec <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8000978:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800097c:	f7ff ffba 	bl	80008f4 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000980:	f7ff fe8e 	bl	80006a0 <__NVIC_GetPriorityGrouping>
 8000984:	4603      	mov	r3, r0
 8000986:	2200      	movs	r2, #0
 8000988:	2100      	movs	r1, #0
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff fede 	bl	800074c <NVIC_EncodePriority>
 8000990:	4603      	mov	r3, r0
 8000992:	4619      	mov	r1, r3
 8000994:	201f      	movs	r0, #31
 8000996:	f7ff feaf 	bl	80006f8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 800099a:	201f      	movs	r0, #31
 800099c:	f7ff fe8e 	bl	80006bc <__NVIC_EnableIRQ>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 80009a0:	4816      	ldr	r0, [pc, #88]	@ (80009fc <MX_I2C1_Init+0xd8>)
 80009a2:	f7ff ff71 	bl	8000888 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 80009a6:	4815      	ldr	r0, [pc, #84]	@ (80009fc <MX_I2C1_Init+0xd8>)
 80009a8:	f7ff ff4b 	bl	8000842 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 80009ac:	4813      	ldr	r0, [pc, #76]	@ (80009fc <MX_I2C1_Init+0xd8>)
 80009ae:	f7ff ff20 	bl	80007f2 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 80009b2:	4812      	ldr	r0, [pc, #72]	@ (80009fc <MX_I2C1_Init+0xd8>)
 80009b4:	f7ff ff0d 	bl	80007d2 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 80009bc:	4b10      	ldr	r3, [pc, #64]	@ (8000a00 <MX_I2C1_Init+0xdc>)
 80009be:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 80009c0:	2300      	movs	r3, #0
 80009c2:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.DigitalFilter = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80009cc:	2300      	movs	r3, #0
 80009ce:	633b      	str	r3, [r7, #48]	@ 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80009d0:	2300      	movs	r3, #0
 80009d2:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 80009d4:	f107 031c 	add.w	r3, r7, #28
 80009d8:	4619      	mov	r1, r3
 80009da:	4808      	ldr	r0, [pc, #32]	@ (80009fc <MX_I2C1_Init+0xd8>)
 80009dc:	f003 f999 	bl	8003d12 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 80009e0:	2200      	movs	r2, #0
 80009e2:	2100      	movs	r1, #0
 80009e4:	4805      	ldr	r0, [pc, #20]	@ (80009fc <MX_I2C1_Init+0xd8>)
 80009e6:	f7ff ff14 	bl	8000812 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */
  LL_I2C_Enable(I2C1);
 80009ea:	4804      	ldr	r0, [pc, #16]	@ (80009fc <MX_I2C1_Init+0xd8>)
 80009ec:	f7ff fee1 	bl	80007b2 <LL_I2C_Enable>
  /* USER CODE END I2C1_Init 2 */

}
 80009f0:	bf00      	nop
 80009f2:	3738      	adds	r7, #56	@ 0x38
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	48000400 	.word	0x48000400
 80009fc:	40005400 	.word	0x40005400
 8000a00:	2000090e 	.word	0x2000090e

08000a04 <I2C1_EV_IRQHandler>:

	return i2c_rx_data;
}


void I2C1_EV_IRQHandler(void) {
 8000a04:	b598      	push	{r3, r4, r7, lr}
 8000a06:	af00      	add	r7, sp, #0
	/* Check RXNE flag value in ISR register */
	if(LL_I2C_IsActiveFlag_RXNE(I2C1)) {
 8000a08:	4810      	ldr	r0, [pc, #64]	@ (8000a4c <I2C1_EV_IRQHandler+0x48>)
 8000a0a:	f7ff ff2a 	bl	8000862 <LL_I2C_IsActiveFlag_RXNE>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d019      	beq.n	8000a48 <I2C1_EV_IRQHandler+0x44>
		/* Call function Master Reception Callback */
		i2c_rx_data[rx_data_index++] = LL_I2C_ReceiveData8(I2C1);
 8000a14:	4b0e      	ldr	r3, [pc, #56]	@ (8000a50 <I2C1_EV_IRQHandler+0x4c>)
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	4b0e      	ldr	r3, [pc, #56]	@ (8000a54 <I2C1_EV_IRQHandler+0x50>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	1c59      	adds	r1, r3, #1
 8000a20:	b2c8      	uxtb	r0, r1
 8000a22:	490c      	ldr	r1, [pc, #48]	@ (8000a54 <I2C1_EV_IRQHandler+0x50>)
 8000a24:	7008      	strb	r0, [r1, #0]
 8000a26:	18d4      	adds	r4, r2, r3
 8000a28:	4808      	ldr	r0, [pc, #32]	@ (8000a4c <I2C1_EV_IRQHandler+0x48>)
 8000a2a:	f7ff ff3d 	bl	80008a8 <LL_I2C_ReceiveData8>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	7023      	strb	r3, [r4, #0]
		(rx_data_index > 19) ? rx_data_index = 0 : rx_data_index;
 8000a32:	4b08      	ldr	r3, [pc, #32]	@ (8000a54 <I2C1_EV_IRQHandler+0x50>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	2b13      	cmp	r3, #19
 8000a3a:	d903      	bls.n	8000a44 <I2C1_EV_IRQHandler+0x40>
 8000a3c:	4b05      	ldr	r3, [pc, #20]	@ (8000a54 <I2C1_EV_IRQHandler+0x50>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	701a      	strb	r2, [r3, #0]
	}
}
 8000a42:	e001      	b.n	8000a48 <I2C1_EV_IRQHandler+0x44>
		(rx_data_index > 19) ? rx_data_index = 0 : rx_data_index;
 8000a44:	4b03      	ldr	r3, [pc, #12]	@ (8000a54 <I2C1_EV_IRQHandler+0x50>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
}
 8000a48:	bf00      	nop
 8000a4a:	bd98      	pop	{r3, r4, r7, pc}
 8000a4c:	40005400 	.word	0x40005400
 8000a50:	20000048 	.word	0x20000048
 8000a54:	2000004c 	.word	0x2000004c

08000a58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a5c:	f000 f9f6 	bl	8000e4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a60:	f000 f82c 	bl	8000abc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a64:	f7ff fde2 	bl	800062c <MX_GPIO_Init>
  MX_DMA_Init();
 8000a68:	f000 f87a 	bl	8000b60 <MX_DMA_Init>
  MX_I2C1_Init();
 8000a6c:	f7ff ff5a 	bl	8000924 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000a70:	f000 f89a 	bl	8000ba8 <MX_SPI1_Init>
  MX_FATFS_Init();
 8000a74:	f003 f98a 	bl	8003d8c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  	HAL_SPI_Transmit_IT(&hspi1, TX_Buffer, 1); //Sending in Interrupt mode
 8000a78:	2201      	movs	r2, #1
 8000a7a:	490d      	ldr	r1, [pc, #52]	@ (8000ab0 <main+0x58>)
 8000a7c:	480d      	ldr	r0, [pc, #52]	@ (8000ab4 <main+0x5c>)
 8000a7e:	f002 fb9f 	bl	80031c0 <HAL_SPI_Transmit_IT>
    HAL_Delay(100);
 8000a82:	2064      	movs	r0, #100	@ 0x64
 8000a84:	f000 fa48 	bl	8000f18 <HAL_Delay>
  //initialize sensors
  //HTS221_init();
  //LPS25HB_init();

  GFX_Init(); // Inicializácia Adafruit GFX
 8000a88:	f7ff fb9e 	bl	80001c8 <GFX_Init>

  GFX_SetCursor(10, 10);
 8000a8c:	210a      	movs	r1, #10
 8000a8e:	200a      	movs	r0, #10
 8000a90:	f7ff fbb0 	bl	80001f4 <GFX_SetCursor>
  GFX_SetTextColor(COLOR_WHITE);
 8000a94:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000a98:	f7ff fbc4 	bl	8000224 <GFX_SetTextColor>
  GFX_Print("Hello, World!");
 8000a9c:	4806      	ldr	r0, [pc, #24]	@ (8000ab8 <main+0x60>)
 8000a9e:	f7ff fbd1 	bl	8000244 <GFX_Print>

  /* USER CODE BEGIN 2 */
  ILI9341_Init(); // Inicializácia ILI9341 displeja
 8000aa2:	f7ff fc47 	bl	8000334 <ILI9341_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  ILI9341_FillScreen(COLOR_GREEN);
 8000aa6:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8000aaa:	f7ff fcf9 	bl	80004a0 <ILI9341_FillScreen>
 8000aae:	e7fa      	b.n	8000aa6 <main+0x4e>
 8000ab0:	20000004 	.word	0x20000004
 8000ab4:	20000094 	.word	0x20000094
 8000ab8:	08004018 	.word	0x08004018

08000abc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b096      	sub	sp, #88	@ 0x58
 8000ac0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ac2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ac6:	2228      	movs	r2, #40	@ 0x28
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4618      	mov	r0, r3
 8000acc:	f003 fa23 	bl	8003f16 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad0:	f107 031c 	add.w	r3, r7, #28
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
 8000ae8:	609a      	str	r2, [r3, #8]
 8000aea:	60da      	str	r2, [r3, #12]
 8000aec:	611a      	str	r2, [r3, #16]
 8000aee:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000af0:	2302      	movs	r3, #2
 8000af2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000af4:	2301      	movs	r3, #1
 8000af6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000af8:	2310      	movs	r3, #16
 8000afa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000afc:	2300      	movs	r3, #0
 8000afe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b00:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b04:	4618      	mov	r0, r3
 8000b06:	f000 fe0f 	bl	8001728 <HAL_RCC_OscConfig>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000b10:	f000 f844 	bl	8000b9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b14:	230f      	movs	r3, #15
 8000b16:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b20:	2300      	movs	r3, #0
 8000b22:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b24:	2300      	movs	r3, #0
 8000b26:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b28:	f107 031c 	add.w	r3, r7, #28
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f001 fe38 	bl	80027a4 <HAL_RCC_ClockConfig>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000b3a:	f000 f82f 	bl	8000b9c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b3e:	2320      	movs	r3, #32
 8000b40:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b46:	1d3b      	adds	r3, r7, #4
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f001 fffb 	bl	8002b44 <HAL_RCCEx_PeriphCLKConfig>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000b54:	f000 f822 	bl	8000b9c <Error_Handler>
  }
}
 8000b58:	bf00      	nop
 8000b5a:	3758      	adds	r7, #88	@ 0x58
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <MX_DMA_Init>:
//
///**
//  * Enable DMA controller clock
//  */
static void MX_DMA_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b66:	4b0c      	ldr	r3, [pc, #48]	@ (8000b98 <MX_DMA_Init+0x38>)
 8000b68:	695b      	ldr	r3, [r3, #20]
 8000b6a:	4a0b      	ldr	r2, [pc, #44]	@ (8000b98 <MX_DMA_Init+0x38>)
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	6153      	str	r3, [r2, #20]
 8000b72:	4b09      	ldr	r3, [pc, #36]	@ (8000b98 <MX_DMA_Init+0x38>)
 8000b74:	695b      	ldr	r3, [r3, #20]
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2100      	movs	r1, #0
 8000b82:	200d      	movs	r0, #13
 8000b84:	f000 fac7 	bl	8001116 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000b88:	200d      	movs	r0, #13
 8000b8a:	f000 fae0 	bl	800114e <HAL_NVIC_EnableIRQ>

}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40021000 	.word	0x40021000

08000b9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba0:	b672      	cpsid	i
}
 8000ba2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba4:	bf00      	nop
 8000ba6:	e7fd      	b.n	8000ba4 <Error_Handler+0x8>

08000ba8 <MX_SPI1_Init>:
#include "main.h"

SPI_HandleTypeDef hspi1;

void MX_SPI1_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
    hspi1.Instance = SPI1;
 8000bac:	4b19      	ldr	r3, [pc, #100]	@ (8000c14 <MX_SPI1_Init+0x6c>)
 8000bae:	4a1a      	ldr	r2, [pc, #104]	@ (8000c18 <MX_SPI1_Init+0x70>)
 8000bb0:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bb2:	4b18      	ldr	r3, [pc, #96]	@ (8000c14 <MX_SPI1_Init+0x6c>)
 8000bb4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000bb8:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bba:	4b16      	ldr	r3, [pc, #88]	@ (8000c14 <MX_SPI1_Init+0x6c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bc0:	4b14      	ldr	r3, [pc, #80]	@ (8000c14 <MX_SPI1_Init+0x6c>)
 8000bc2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000bc6:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bc8:	4b12      	ldr	r3, [pc, #72]	@ (8000c14 <MX_SPI1_Init+0x6c>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bce:	4b11      	ldr	r3, [pc, #68]	@ (8000c14 <MX_SPI1_Init+0x6c>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bd4:	4b0f      	ldr	r3, [pc, #60]	@ (8000c14 <MX_SPI1_Init+0x6c>)
 8000bd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bda:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000bdc:	4b0d      	ldr	r3, [pc, #52]	@ (8000c14 <MX_SPI1_Init+0x6c>)
 8000bde:	2218      	movs	r2, #24
 8000be0:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000be2:	4b0c      	ldr	r3, [pc, #48]	@ (8000c14 <MX_SPI1_Init+0x6c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000be8:	4b0a      	ldr	r3, [pc, #40]	@ (8000c14 <MX_SPI1_Init+0x6c>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	625a      	str	r2, [r3, #36]	@ 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bee:	4b09      	ldr	r3, [pc, #36]	@ (8000c14 <MX_SPI1_Init+0x6c>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	629a      	str	r2, [r3, #40]	@ 0x28
    hspi1.Init.CRCPolynomial = 10;
 8000bf4:	4b07      	ldr	r3, [pc, #28]	@ (8000c14 <MX_SPI1_Init+0x6c>)
 8000bf6:	220a      	movs	r2, #10
 8000bf8:	62da      	str	r2, [r3, #44]	@ 0x2c
    HAL_SPI_Init(&hspi1);
 8000bfa:	4806      	ldr	r0, [pc, #24]	@ (8000c14 <MX_SPI1_Init+0x6c>)
 8000bfc:	f002 f8c8 	bl	8002d90 <HAL_SPI_Init>

    if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000c00:	4804      	ldr	r0, [pc, #16]	@ (8000c14 <MX_SPI1_Init+0x6c>)
 8000c02:	f002 f8c5 	bl	8002d90 <HAL_SPI_Init>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_SPI1_Init+0x68>
            Error_Handler();
 8000c0c:	f7ff ffc6 	bl	8000b9c <Error_Handler>
        }
}
 8000c10:	bf00      	nop
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20000094 	.word	0x20000094
 8000c18:	40013000 	.word	0x40013000

08000c1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c22:	4b0f      	ldr	r3, [pc, #60]	@ (8000c60 <HAL_MspInit+0x44>)
 8000c24:	699b      	ldr	r3, [r3, #24]
 8000c26:	4a0e      	ldr	r2, [pc, #56]	@ (8000c60 <HAL_MspInit+0x44>)
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	6193      	str	r3, [r2, #24]
 8000c2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c60 <HAL_MspInit+0x44>)
 8000c30:	699b      	ldr	r3, [r3, #24]
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	607b      	str	r3, [r7, #4]
 8000c38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c3a:	4b09      	ldr	r3, [pc, #36]	@ (8000c60 <HAL_MspInit+0x44>)
 8000c3c:	69db      	ldr	r3, [r3, #28]
 8000c3e:	4a08      	ldr	r2, [pc, #32]	@ (8000c60 <HAL_MspInit+0x44>)
 8000c40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c44:	61d3      	str	r3, [r2, #28]
 8000c46:	4b06      	ldr	r3, [pc, #24]	@ (8000c60 <HAL_MspInit+0x44>)
 8000c48:	69db      	ldr	r3, [r3, #28]
 8000c4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c4e:	603b      	str	r3, [r7, #0]
 8000c50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	40021000 	.word	0x40021000

08000c64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08a      	sub	sp, #40	@ 0x28
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a2e      	ldr	r2, [pc, #184]	@ (8000d3c <HAL_SPI_MspInit+0xd8>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d156      	bne.n	8000d34 <HAL_SPI_MspInit+0xd0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c86:	4b2e      	ldr	r3, [pc, #184]	@ (8000d40 <HAL_SPI_MspInit+0xdc>)
 8000c88:	699b      	ldr	r3, [r3, #24]
 8000c8a:	4a2d      	ldr	r2, [pc, #180]	@ (8000d40 <HAL_SPI_MspInit+0xdc>)
 8000c8c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c90:	6193      	str	r3, [r2, #24]
 8000c92:	4b2b      	ldr	r3, [pc, #172]	@ (8000d40 <HAL_SPI_MspInit+0xdc>)
 8000c94:	699b      	ldr	r3, [r3, #24]
 8000c96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9e:	4b28      	ldr	r3, [pc, #160]	@ (8000d40 <HAL_SPI_MspInit+0xdc>)
 8000ca0:	695b      	ldr	r3, [r3, #20]
 8000ca2:	4a27      	ldr	r2, [pc, #156]	@ (8000d40 <HAL_SPI_MspInit+0xdc>)
 8000ca4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ca8:	6153      	str	r3, [r2, #20]
 8000caa:	4b25      	ldr	r3, [pc, #148]	@ (8000d40 <HAL_SPI_MspInit+0xdc>)
 8000cac:	695b      	ldr	r3, [r3, #20]
 8000cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000cb6:	23e0      	movs	r3, #224	@ 0xe0
 8000cb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cc6:	2305      	movs	r3, #5
 8000cc8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cca:	f107 0314 	add.w	r3, r7, #20
 8000cce:	4619      	mov	r1, r3
 8000cd0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cd4:	f000 fb9e 	bl	8001414 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000cd8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d44 <HAL_SPI_MspInit+0xe0>)
 8000cda:	4a1b      	ldr	r2, [pc, #108]	@ (8000d48 <HAL_SPI_MspInit+0xe4>)
 8000cdc:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cde:	4b19      	ldr	r3, [pc, #100]	@ (8000d44 <HAL_SPI_MspInit+0xe0>)
 8000ce0:	2210      	movs	r2, #16
 8000ce2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ce4:	4b17      	ldr	r3, [pc, #92]	@ (8000d44 <HAL_SPI_MspInit+0xe0>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000cea:	4b16      	ldr	r3, [pc, #88]	@ (8000d44 <HAL_SPI_MspInit+0xe0>)
 8000cec:	2280      	movs	r2, #128	@ 0x80
 8000cee:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cf0:	4b14      	ldr	r3, [pc, #80]	@ (8000d44 <HAL_SPI_MspInit+0xe0>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cf6:	4b13      	ldr	r3, [pc, #76]	@ (8000d44 <HAL_SPI_MspInit+0xe0>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000cfc:	4b11      	ldr	r3, [pc, #68]	@ (8000d44 <HAL_SPI_MspInit+0xe0>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d02:	4b10      	ldr	r3, [pc, #64]	@ (8000d44 <HAL_SPI_MspInit+0xe0>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000d08:	480e      	ldr	r0, [pc, #56]	@ (8000d44 <HAL_SPI_MspInit+0xe0>)
 8000d0a:	f000 fa3a 	bl	8001182 <HAL_DMA_Init>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <HAL_SPI_MspInit+0xb4>
    {
      Error_Handler();
 8000d14:	f7ff ff42 	bl	8000b9c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d44 <HAL_SPI_MspInit+0xe0>)
 8000d1c:	655a      	str	r2, [r3, #84]	@ 0x54
 8000d1e:	4a09      	ldr	r2, [pc, #36]	@ (8000d44 <HAL_SPI_MspInit+0xe0>)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6253      	str	r3, [r2, #36]	@ 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2100      	movs	r1, #0
 8000d28:	2023      	movs	r0, #35	@ 0x23
 8000d2a:	f000 f9f4 	bl	8001116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000d2e:	2023      	movs	r0, #35	@ 0x23
 8000d30:	f000 fa0d 	bl	800114e <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000d34:	bf00      	nop
 8000d36:	3728      	adds	r7, #40	@ 0x28
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40013000 	.word	0x40013000
 8000d40:	40021000 	.word	0x40021000
 8000d44:	20000050 	.word	0x20000050
 8000d48:	40020030 	.word	0x40020030

08000d4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d50:	bf00      	nop
 8000d52:	e7fd      	b.n	8000d50 <NMI_Handler+0x4>

08000d54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d58:	bf00      	nop
 8000d5a:	e7fd      	b.n	8000d58 <HardFault_Handler+0x4>

08000d5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d60:	bf00      	nop
 8000d62:	e7fd      	b.n	8000d60 <MemManage_Handler+0x4>

08000d64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d68:	bf00      	nop
 8000d6a:	e7fd      	b.n	8000d68 <BusFault_Handler+0x4>

08000d6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d70:	bf00      	nop
 8000d72:	e7fd      	b.n	8000d70 <UsageFault_Handler+0x4>

08000d74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr

08000d9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000da2:	f000 f899 	bl	8000ed8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
	...

08000dac <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000db0:	4802      	ldr	r0, [pc, #8]	@ (8000dbc <DMA1_Channel3_IRQHandler+0x10>)
 8000db2:	f000 fa6b 	bl	800128c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000050 	.word	0x20000050

08000dc0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000dc4:	4802      	ldr	r0, [pc, #8]	@ (8000dd0 <SPI1_IRQHandler+0x10>)
 8000dc6:	f002 fa87 	bl	80032d8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000094 	.word	0x20000094

08000dd4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dd8:	4b06      	ldr	r3, [pc, #24]	@ (8000df4 <SystemInit+0x20>)
 8000dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dde:	4a05      	ldr	r2, [pc, #20]	@ (8000df4 <SystemInit+0x20>)
 8000de0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000de4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000df8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e30 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dfc:	f7ff ffea 	bl	8000dd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e00:	480c      	ldr	r0, [pc, #48]	@ (8000e34 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e02:	490d      	ldr	r1, [pc, #52]	@ (8000e38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e04:	4a0d      	ldr	r2, [pc, #52]	@ (8000e3c <LoopForever+0xe>)
  movs r3, #0
 8000e06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e08:	e002      	b.n	8000e10 <LoopCopyDataInit>

08000e0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e0e:	3304      	adds	r3, #4

08000e10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e14:	d3f9      	bcc.n	8000e0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e16:	4a0a      	ldr	r2, [pc, #40]	@ (8000e40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e18:	4c0a      	ldr	r4, [pc, #40]	@ (8000e44 <LoopForever+0x16>)
  movs r3, #0
 8000e1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e1c:	e001      	b.n	8000e22 <LoopFillZerobss>

08000e1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e20:	3204      	adds	r2, #4

08000e22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e24:	d3fb      	bcc.n	8000e1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e26:	f003 f87f 	bl	8003f28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e2a:	f7ff fe15 	bl	8000a58 <main>

08000e2e <LoopForever>:

LoopForever:
    b LoopForever
 8000e2e:	e7fe      	b.n	8000e2e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e30:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000e34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e38:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8000e3c:	0800423c 	.word	0x0800423c
  ldr r2, =_sbss
 8000e40:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8000e44:	20000110 	.word	0x20000110

08000e48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e48:	e7fe      	b.n	8000e48 <ADC1_2_IRQHandler>
	...

08000e4c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e50:	4b08      	ldr	r3, [pc, #32]	@ (8000e74 <HAL_Init+0x28>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a07      	ldr	r2, [pc, #28]	@ (8000e74 <HAL_Init+0x28>)
 8000e56:	f043 0310 	orr.w	r3, r3, #16
 8000e5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e5c:	2003      	movs	r0, #3
 8000e5e:	f000 f94f 	bl	8001100 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e62:	200f      	movs	r0, #15
 8000e64:	f000 f808 	bl	8000e78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e68:	f7ff fed8 	bl	8000c1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40022000 	.word	0x40022000

08000e78 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e80:	4b12      	ldr	r3, [pc, #72]	@ (8000ecc <HAL_InitTick+0x54>)
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	4b12      	ldr	r3, [pc, #72]	@ (8000ed0 <HAL_InitTick+0x58>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	4619      	mov	r1, r3
 8000e8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e96:	4618      	mov	r0, r3
 8000e98:	f000 f967 	bl	800116a <HAL_SYSTICK_Config>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e00e      	b.n	8000ec4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2b0f      	cmp	r3, #15
 8000eaa:	d80a      	bhi.n	8000ec2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eac:	2200      	movs	r2, #0
 8000eae:	6879      	ldr	r1, [r7, #4]
 8000eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb4:	f000 f92f 	bl	8001116 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eb8:	4a06      	ldr	r2, [pc, #24]	@ (8000ed4 <HAL_InitTick+0x5c>)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	e000      	b.n	8000ec4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000008 	.word	0x20000008
 8000ed0:	20000010 	.word	0x20000010
 8000ed4:	2000000c 	.word	0x2000000c

08000ed8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000edc:	4b06      	ldr	r3, [pc, #24]	@ (8000ef8 <HAL_IncTick+0x20>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	4b06      	ldr	r3, [pc, #24]	@ (8000efc <HAL_IncTick+0x24>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	4a04      	ldr	r2, [pc, #16]	@ (8000efc <HAL_IncTick+0x24>)
 8000eea:	6013      	str	r3, [r2, #0]
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	20000010 	.word	0x20000010
 8000efc:	200000f8 	.word	0x200000f8

08000f00 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  return uwTick;  
 8000f04:	4b03      	ldr	r3, [pc, #12]	@ (8000f14 <HAL_GetTick+0x14>)
 8000f06:	681b      	ldr	r3, [r3, #0]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	200000f8 	.word	0x200000f8

08000f18 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f20:	f7ff ffee 	bl	8000f00 <HAL_GetTick>
 8000f24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f30:	d005      	beq.n	8000f3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f32:	4b0a      	ldr	r3, [pc, #40]	@ (8000f5c <HAL_Delay+0x44>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	461a      	mov	r2, r3
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000f3e:	bf00      	nop
 8000f40:	f7ff ffde 	bl	8000f00 <HAL_GetTick>
 8000f44:	4602      	mov	r2, r0
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	68fa      	ldr	r2, [r7, #12]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d8f7      	bhi.n	8000f40 <HAL_Delay+0x28>
  {
  }
}
 8000f50:	bf00      	nop
 8000f52:	bf00      	nop
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000010 	.word	0x20000010

08000f60 <__NVIC_SetPriorityGrouping>:
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f70:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f76:	68ba      	ldr	r2, [r7, #8]
 8000f78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f92:	4a04      	ldr	r2, [pc, #16]	@ (8000fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	60d3      	str	r3, [r2, #12]
}
 8000f98:	bf00      	nop
 8000f9a:	3714      	adds	r7, #20
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <__NVIC_GetPriorityGrouping>:
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fac:	4b04      	ldr	r3, [pc, #16]	@ (8000fc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	0a1b      	lsrs	r3, r3, #8
 8000fb2:	f003 0307 	and.w	r3, r3, #7
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <__NVIC_EnableIRQ>:
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	db0b      	blt.n	8000fee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	f003 021f 	and.w	r2, r3, #31
 8000fdc:	4907      	ldr	r1, [pc, #28]	@ (8000ffc <__NVIC_EnableIRQ+0x38>)
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	095b      	lsrs	r3, r3, #5
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	e000e100 	.word	0xe000e100

08001000 <__NVIC_SetPriority>:
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	6039      	str	r1, [r7, #0]
 800100a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800100c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001010:	2b00      	cmp	r3, #0
 8001012:	db0a      	blt.n	800102a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	b2da      	uxtb	r2, r3
 8001018:	490c      	ldr	r1, [pc, #48]	@ (800104c <__NVIC_SetPriority+0x4c>)
 800101a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101e:	0112      	lsls	r2, r2, #4
 8001020:	b2d2      	uxtb	r2, r2
 8001022:	440b      	add	r3, r1
 8001024:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001028:	e00a      	b.n	8001040 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	b2da      	uxtb	r2, r3
 800102e:	4908      	ldr	r1, [pc, #32]	@ (8001050 <__NVIC_SetPriority+0x50>)
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	f003 030f 	and.w	r3, r3, #15
 8001036:	3b04      	subs	r3, #4
 8001038:	0112      	lsls	r2, r2, #4
 800103a:	b2d2      	uxtb	r2, r2
 800103c:	440b      	add	r3, r1
 800103e:	761a      	strb	r2, [r3, #24]
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	e000e100 	.word	0xe000e100
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <NVIC_EncodePriority>:
{
 8001054:	b480      	push	{r7}
 8001056:	b089      	sub	sp, #36	@ 0x24
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	f1c3 0307 	rsb	r3, r3, #7
 800106e:	2b04      	cmp	r3, #4
 8001070:	bf28      	it	cs
 8001072:	2304      	movcs	r3, #4
 8001074:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3304      	adds	r3, #4
 800107a:	2b06      	cmp	r3, #6
 800107c:	d902      	bls.n	8001084 <NVIC_EncodePriority+0x30>
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3b03      	subs	r3, #3
 8001082:	e000      	b.n	8001086 <NVIC_EncodePriority+0x32>
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	f04f 32ff 	mov.w	r2, #4294967295
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43da      	mvns	r2, r3
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	401a      	ands	r2, r3
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800109c:	f04f 31ff 	mov.w	r1, #4294967295
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	fa01 f303 	lsl.w	r3, r1, r3
 80010a6:	43d9      	mvns	r1, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ac:	4313      	orrs	r3, r2
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3724      	adds	r7, #36	@ 0x24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
	...

080010bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010cc:	d301      	bcc.n	80010d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ce:	2301      	movs	r3, #1
 80010d0:	e00f      	b.n	80010f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010d2:	4a0a      	ldr	r2, [pc, #40]	@ (80010fc <SysTick_Config+0x40>)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010da:	210f      	movs	r1, #15
 80010dc:	f04f 30ff 	mov.w	r0, #4294967295
 80010e0:	f7ff ff8e 	bl	8001000 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e4:	4b05      	ldr	r3, [pc, #20]	@ (80010fc <SysTick_Config+0x40>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ea:	4b04      	ldr	r3, [pc, #16]	@ (80010fc <SysTick_Config+0x40>)
 80010ec:	2207      	movs	r2, #7
 80010ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	e000e010 	.word	0xe000e010

08001100 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f7ff ff29 	bl	8000f60 <__NVIC_SetPriorityGrouping>
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b086      	sub	sp, #24
 800111a:	af00      	add	r7, sp, #0
 800111c:	4603      	mov	r3, r0
 800111e:	60b9      	str	r1, [r7, #8]
 8001120:	607a      	str	r2, [r7, #4]
 8001122:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001128:	f7ff ff3e 	bl	8000fa8 <__NVIC_GetPriorityGrouping>
 800112c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	68b9      	ldr	r1, [r7, #8]
 8001132:	6978      	ldr	r0, [r7, #20]
 8001134:	f7ff ff8e 	bl	8001054 <NVIC_EncodePriority>
 8001138:	4602      	mov	r2, r0
 800113a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800113e:	4611      	mov	r1, r2
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff ff5d 	bl	8001000 <__NVIC_SetPriority>
}
 8001146:	bf00      	nop
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b082      	sub	sp, #8
 8001152:	af00      	add	r7, sp, #0
 8001154:	4603      	mov	r3, r0
 8001156:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff ff31 	bl	8000fc4 <__NVIC_EnableIRQ>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff ffa2 	bl	80010bc <SysTick_Config>
 8001178:	4603      	mov	r3, r0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b084      	sub	sp, #16
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d101      	bne.n	8001198 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	e037      	b.n	8001208 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2202      	movs	r2, #2
 800119c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80011ae:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80011b2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80011bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	695b      	ldr	r3, [r3, #20]
 80011ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	69db      	ldr	r3, [r3, #28]
 80011da:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80011dc:	68fa      	ldr	r2, [r7, #12]
 80011de:	4313      	orrs	r3, r2
 80011e0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	68fa      	ldr	r2, [r7, #12]
 80011e8:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f000 f8f2 	bl	80013d4 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2201      	movs	r2, #1
 80011fa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2200      	movs	r2, #0
 8001202:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001206:	2300      	movs	r3, #0
}
 8001208:	4618      	mov	r0, r3
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001218:	2300      	movs	r3, #0
 800121a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001222:	2b02      	cmp	r3, #2
 8001224:	d005      	beq.n	8001232 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2204      	movs	r2, #4
 800122a:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	73fb      	strb	r3, [r7, #15]
 8001230:	e027      	b.n	8001282 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f022 020e 	bic.w	r2, r2, #14
 8001240:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f022 0201 	bic.w	r2, r2, #1
 8001250:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800125a:	2101      	movs	r1, #1
 800125c:	fa01 f202 	lsl.w	r2, r1, r2
 8001260:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2201      	movs	r2, #1
 8001266:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2200      	movs	r2, #0
 800126e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001276:	2b00      	cmp	r3, #0
 8001278:	d003      	beq.n	8001282 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	4798      	blx	r3
    }
  }
  return status;
 8001282:	7bfb      	ldrb	r3, [r7, #15]
}
 8001284:	4618      	mov	r0, r3
 8001286:	3710      	adds	r7, #16
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a8:	2204      	movs	r2, #4
 80012aa:	409a      	lsls	r2, r3
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	4013      	ands	r3, r2
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d024      	beq.n	80012fe <HAL_DMA_IRQHandler+0x72>
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	f003 0304 	and.w	r3, r3, #4
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d01f      	beq.n	80012fe <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0320 	and.w	r3, r3, #32
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d107      	bne.n	80012dc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f022 0204 	bic.w	r2, r2, #4
 80012da:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012e4:	2104      	movs	r1, #4
 80012e6:	fa01 f202 	lsl.w	r2, r1, r2
 80012ea:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d06a      	beq.n	80013ca <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80012fc:	e065      	b.n	80013ca <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001302:	2202      	movs	r2, #2
 8001304:	409a      	lsls	r2, r3
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	4013      	ands	r3, r2
 800130a:	2b00      	cmp	r3, #0
 800130c:	d02c      	beq.n	8001368 <HAL_DMA_IRQHandler+0xdc>
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	f003 0302 	and.w	r3, r3, #2
 8001314:	2b00      	cmp	r3, #0
 8001316:	d027      	beq.n	8001368 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0320 	and.w	r3, r3, #32
 8001322:	2b00      	cmp	r3, #0
 8001324:	d10b      	bne.n	800133e <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f022 020a 	bic.w	r2, r2, #10
 8001334:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2201      	movs	r2, #1
 800133a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001346:	2102      	movs	r1, #2
 8001348:	fa01 f202 	lsl.w	r2, r1, r2
 800134c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800135a:	2b00      	cmp	r3, #0
 800135c:	d035      	beq.n	80013ca <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001366:	e030      	b.n	80013ca <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136c:	2208      	movs	r2, #8
 800136e:	409a      	lsls	r2, r3
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	4013      	ands	r3, r2
 8001374:	2b00      	cmp	r3, #0
 8001376:	d028      	beq.n	80013ca <HAL_DMA_IRQHandler+0x13e>
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	f003 0308 	and.w	r3, r3, #8
 800137e:	2b00      	cmp	r3, #0
 8001380:	d023      	beq.n	80013ca <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f022 020e 	bic.w	r2, r2, #14
 8001390:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800139a:	2101      	movs	r1, #1
 800139c:	fa01 f202 	lsl.w	r2, r1, r2
 80013a0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2201      	movs	r2, #1
 80013a6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2201      	movs	r2, #1
 80013ac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2200      	movs	r2, #0
 80013b4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d004      	beq.n	80013ca <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	4798      	blx	r3
    }
  }
}
 80013c8:	e7ff      	b.n	80013ca <HAL_DMA_IRQHandler+0x13e>
 80013ca:	bf00      	nop
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
	...

080013d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b09      	ldr	r3, [pc, #36]	@ (8001408 <DMA_CalcBaseAndBitshift+0x34>)
 80013e4:	4413      	add	r3, r2
 80013e6:	4a09      	ldr	r2, [pc, #36]	@ (800140c <DMA_CalcBaseAndBitshift+0x38>)
 80013e8:	fba2 2303 	umull	r2, r3, r2, r3
 80013ec:	091b      	lsrs	r3, r3, #4
 80013ee:	009a      	lsls	r2, r3, #2
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4a06      	ldr	r2, [pc, #24]	@ (8001410 <DMA_CalcBaseAndBitshift+0x3c>)
 80013f8:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	bffdfff8 	.word	0xbffdfff8
 800140c:	cccccccd 	.word	0xcccccccd
 8001410:	40020000 	.word	0x40020000

08001414 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001414:	b480      	push	{r7}
 8001416:	b087      	sub	sp, #28
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800141e:	2300      	movs	r3, #0
 8001420:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001422:	e14e      	b.n	80016c2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	2101      	movs	r1, #1
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	fa01 f303 	lsl.w	r3, r1, r3
 8001430:	4013      	ands	r3, r2
 8001432:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	2b00      	cmp	r3, #0
 8001438:	f000 8140 	beq.w	80016bc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f003 0303 	and.w	r3, r3, #3
 8001444:	2b01      	cmp	r3, #1
 8001446:	d005      	beq.n	8001454 <HAL_GPIO_Init+0x40>
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f003 0303 	and.w	r3, r3, #3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d130      	bne.n	80014b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	2203      	movs	r2, #3
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	43db      	mvns	r3, r3
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	4013      	ands	r3, r2
 800146a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	68da      	ldr	r2, [r3, #12]
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	4313      	orrs	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800148a:	2201      	movs	r2, #1
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43db      	mvns	r3, r3
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	4013      	ands	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	091b      	lsrs	r3, r3, #4
 80014a0:	f003 0201 	and.w	r2, r3, #1
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f003 0303 	and.w	r3, r3, #3
 80014be:	2b03      	cmp	r3, #3
 80014c0:	d017      	beq.n	80014f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	2203      	movs	r2, #3
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43db      	mvns	r3, r3
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	4013      	ands	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	689a      	ldr	r2, [r3, #8]
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f003 0303 	and.w	r3, r3, #3
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d123      	bne.n	8001546 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	08da      	lsrs	r2, r3, #3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	3208      	adds	r2, #8
 8001506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800150a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	f003 0307 	and.w	r3, r3, #7
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	220f      	movs	r2, #15
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	43db      	mvns	r3, r3
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	4013      	ands	r3, r2
 8001520:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	691a      	ldr	r2, [r3, #16]
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	f003 0307 	and.w	r3, r3, #7
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	4313      	orrs	r3, r2
 8001536:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	08da      	lsrs	r2, r3, #3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	3208      	adds	r2, #8
 8001540:	6939      	ldr	r1, [r7, #16]
 8001542:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	2203      	movs	r2, #3
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43db      	mvns	r3, r3
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	4013      	ands	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f003 0203 	and.w	r2, r3, #3
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	4313      	orrs	r3, r2
 8001572:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001582:	2b00      	cmp	r3, #0
 8001584:	f000 809a 	beq.w	80016bc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001588:	4b55      	ldr	r3, [pc, #340]	@ (80016e0 <HAL_GPIO_Init+0x2cc>)
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	4a54      	ldr	r2, [pc, #336]	@ (80016e0 <HAL_GPIO_Init+0x2cc>)
 800158e:	f043 0301 	orr.w	r3, r3, #1
 8001592:	6193      	str	r3, [r2, #24]
 8001594:	4b52      	ldr	r3, [pc, #328]	@ (80016e0 <HAL_GPIO_Init+0x2cc>)
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	f003 0301 	and.w	r3, r3, #1
 800159c:	60bb      	str	r3, [r7, #8]
 800159e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015a0:	4a50      	ldr	r2, [pc, #320]	@ (80016e4 <HAL_GPIO_Init+0x2d0>)
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	089b      	lsrs	r3, r3, #2
 80015a6:	3302      	adds	r3, #2
 80015a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	f003 0303 	and.w	r3, r3, #3
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	220f      	movs	r2, #15
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	43db      	mvns	r3, r3
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	4013      	ands	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80015ca:	d013      	beq.n	80015f4 <HAL_GPIO_Init+0x1e0>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	4a46      	ldr	r2, [pc, #280]	@ (80016e8 <HAL_GPIO_Init+0x2d4>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d00d      	beq.n	80015f0 <HAL_GPIO_Init+0x1dc>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4a45      	ldr	r2, [pc, #276]	@ (80016ec <HAL_GPIO_Init+0x2d8>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d007      	beq.n	80015ec <HAL_GPIO_Init+0x1d8>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4a44      	ldr	r2, [pc, #272]	@ (80016f0 <HAL_GPIO_Init+0x2dc>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d101      	bne.n	80015e8 <HAL_GPIO_Init+0x1d4>
 80015e4:	2303      	movs	r3, #3
 80015e6:	e006      	b.n	80015f6 <HAL_GPIO_Init+0x1e2>
 80015e8:	2305      	movs	r3, #5
 80015ea:	e004      	b.n	80015f6 <HAL_GPIO_Init+0x1e2>
 80015ec:	2302      	movs	r3, #2
 80015ee:	e002      	b.n	80015f6 <HAL_GPIO_Init+0x1e2>
 80015f0:	2301      	movs	r3, #1
 80015f2:	e000      	b.n	80015f6 <HAL_GPIO_Init+0x1e2>
 80015f4:	2300      	movs	r3, #0
 80015f6:	697a      	ldr	r2, [r7, #20]
 80015f8:	f002 0203 	and.w	r2, r2, #3
 80015fc:	0092      	lsls	r2, r2, #2
 80015fe:	4093      	lsls	r3, r2
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	4313      	orrs	r3, r2
 8001604:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001606:	4937      	ldr	r1, [pc, #220]	@ (80016e4 <HAL_GPIO_Init+0x2d0>)
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	089b      	lsrs	r3, r3, #2
 800160c:	3302      	adds	r3, #2
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001614:	4b37      	ldr	r3, [pc, #220]	@ (80016f4 <HAL_GPIO_Init+0x2e0>)
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	43db      	mvns	r3, r3
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	4013      	ands	r3, r2
 8001622:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800162c:	2b00      	cmp	r3, #0
 800162e:	d003      	beq.n	8001638 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	4313      	orrs	r3, r2
 8001636:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001638:	4a2e      	ldr	r2, [pc, #184]	@ (80016f4 <HAL_GPIO_Init+0x2e0>)
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800163e:	4b2d      	ldr	r3, [pc, #180]	@ (80016f4 <HAL_GPIO_Init+0x2e0>)
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	43db      	mvns	r3, r3
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	4013      	ands	r3, r2
 800164c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d003      	beq.n	8001662 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	4313      	orrs	r3, r2
 8001660:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001662:	4a24      	ldr	r2, [pc, #144]	@ (80016f4 <HAL_GPIO_Init+0x2e0>)
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001668:	4b22      	ldr	r3, [pc, #136]	@ (80016f4 <HAL_GPIO_Init+0x2e0>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	43db      	mvns	r3, r3
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	4013      	ands	r3, r2
 8001676:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d003      	beq.n	800168c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	4313      	orrs	r3, r2
 800168a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800168c:	4a19      	ldr	r2, [pc, #100]	@ (80016f4 <HAL_GPIO_Init+0x2e0>)
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001692:	4b18      	ldr	r3, [pc, #96]	@ (80016f4 <HAL_GPIO_Init+0x2e0>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	43db      	mvns	r3, r3
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	4013      	ands	r3, r2
 80016a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80016b6:	4a0f      	ldr	r2, [pc, #60]	@ (80016f4 <HAL_GPIO_Init+0x2e0>)
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	3301      	adds	r3, #1
 80016c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	fa22 f303 	lsr.w	r3, r2, r3
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f47f aea9 	bne.w	8001424 <HAL_GPIO_Init+0x10>
  }
}
 80016d2:	bf00      	nop
 80016d4:	bf00      	nop
 80016d6:	371c      	adds	r7, #28
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	40021000 	.word	0x40021000
 80016e4:	40010000 	.word	0x40010000
 80016e8:	48000400 	.word	0x48000400
 80016ec:	48000800 	.word	0x48000800
 80016f0:	48000c00 	.word	0x48000c00
 80016f4:	40010400 	.word	0x40010400

080016f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	460b      	mov	r3, r1
 8001702:	807b      	strh	r3, [r7, #2]
 8001704:	4613      	mov	r3, r2
 8001706:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001708:	787b      	ldrb	r3, [r7, #1]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d003      	beq.n	8001716 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800170e:	887a      	ldrh	r2, [r7, #2]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001714:	e002      	b.n	800171c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001716:	887a      	ldrh	r2, [r7, #2]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800172e:	af00      	add	r7, sp, #0
 8001730:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001734:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001738:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800173a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800173e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d102      	bne.n	800174e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	f001 b823 	b.w	8002794 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800174e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001752:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	2b00      	cmp	r3, #0
 8001760:	f000 817d 	beq.w	8001a5e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001764:	4bbc      	ldr	r3, [pc, #752]	@ (8001a58 <HAL_RCC_OscConfig+0x330>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f003 030c 	and.w	r3, r3, #12
 800176c:	2b04      	cmp	r3, #4
 800176e:	d00c      	beq.n	800178a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001770:	4bb9      	ldr	r3, [pc, #740]	@ (8001a58 <HAL_RCC_OscConfig+0x330>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f003 030c 	and.w	r3, r3, #12
 8001778:	2b08      	cmp	r3, #8
 800177a:	d15c      	bne.n	8001836 <HAL_RCC_OscConfig+0x10e>
 800177c:	4bb6      	ldr	r3, [pc, #728]	@ (8001a58 <HAL_RCC_OscConfig+0x330>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001784:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001788:	d155      	bne.n	8001836 <HAL_RCC_OscConfig+0x10e>
 800178a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800178e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001792:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001796:	fa93 f3a3 	rbit	r3, r3
 800179a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800179e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017a2:	fab3 f383 	clz	r3, r3
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	095b      	lsrs	r3, r3, #5
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d102      	bne.n	80017bc <HAL_RCC_OscConfig+0x94>
 80017b6:	4ba8      	ldr	r3, [pc, #672]	@ (8001a58 <HAL_RCC_OscConfig+0x330>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	e015      	b.n	80017e8 <HAL_RCC_OscConfig+0xc0>
 80017bc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80017c0:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80017c8:	fa93 f3a3 	rbit	r3, r3
 80017cc:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80017d0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80017d4:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80017d8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80017dc:	fa93 f3a3 	rbit	r3, r3
 80017e0:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80017e4:	4b9c      	ldr	r3, [pc, #624]	@ (8001a58 <HAL_RCC_OscConfig+0x330>)
 80017e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017e8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80017ec:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80017f0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80017f4:	fa92 f2a2 	rbit	r2, r2
 80017f8:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80017fc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001800:	fab2 f282 	clz	r2, r2
 8001804:	b2d2      	uxtb	r2, r2
 8001806:	f042 0220 	orr.w	r2, r2, #32
 800180a:	b2d2      	uxtb	r2, r2
 800180c:	f002 021f 	and.w	r2, r2, #31
 8001810:	2101      	movs	r1, #1
 8001812:	fa01 f202 	lsl.w	r2, r1, r2
 8001816:	4013      	ands	r3, r2
 8001818:	2b00      	cmp	r3, #0
 800181a:	f000 811f 	beq.w	8001a5c <HAL_RCC_OscConfig+0x334>
 800181e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001822:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	f040 8116 	bne.w	8001a5c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	f000 bfaf 	b.w	8002794 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001836:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800183a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001846:	d106      	bne.n	8001856 <HAL_RCC_OscConfig+0x12e>
 8001848:	4b83      	ldr	r3, [pc, #524]	@ (8001a58 <HAL_RCC_OscConfig+0x330>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a82      	ldr	r2, [pc, #520]	@ (8001a58 <HAL_RCC_OscConfig+0x330>)
 800184e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001852:	6013      	str	r3, [r2, #0]
 8001854:	e036      	b.n	80018c4 <HAL_RCC_OscConfig+0x19c>
 8001856:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800185a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d10c      	bne.n	8001880 <HAL_RCC_OscConfig+0x158>
 8001866:	4b7c      	ldr	r3, [pc, #496]	@ (8001a58 <HAL_RCC_OscConfig+0x330>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a7b      	ldr	r2, [pc, #492]	@ (8001a58 <HAL_RCC_OscConfig+0x330>)
 800186c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001870:	6013      	str	r3, [r2, #0]
 8001872:	4b79      	ldr	r3, [pc, #484]	@ (8001a58 <HAL_RCC_OscConfig+0x330>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a78      	ldr	r2, [pc, #480]	@ (8001a58 <HAL_RCC_OscConfig+0x330>)
 8001878:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800187c:	6013      	str	r3, [r2, #0]
 800187e:	e021      	b.n	80018c4 <HAL_RCC_OscConfig+0x19c>
 8001880:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001884:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001890:	d10c      	bne.n	80018ac <HAL_RCC_OscConfig+0x184>
 8001892:	4b71      	ldr	r3, [pc, #452]	@ (8001a58 <HAL_RCC_OscConfig+0x330>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a70      	ldr	r2, [pc, #448]	@ (8001a58 <HAL_RCC_OscConfig+0x330>)
 8001898:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800189c:	6013      	str	r3, [r2, #0]
 800189e:	4b6e      	ldr	r3, [pc, #440]	@ (8001a58 <HAL_RCC_OscConfig+0x330>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a6d      	ldr	r2, [pc, #436]	@ (8001a58 <HAL_RCC_OscConfig+0x330>)
 80018a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018a8:	6013      	str	r3, [r2, #0]
 80018aa:	e00b      	b.n	80018c4 <HAL_RCC_OscConfig+0x19c>
 80018ac:	4b6a      	ldr	r3, [pc, #424]	@ (8001a58 <HAL_RCC_OscConfig+0x330>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a69      	ldr	r2, [pc, #420]	@ (8001a58 <HAL_RCC_OscConfig+0x330>)
 80018b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018b6:	6013      	str	r3, [r2, #0]
 80018b8:	4b67      	ldr	r3, [pc, #412]	@ (8001a58 <HAL_RCC_OscConfig+0x330>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a66      	ldr	r2, [pc, #408]	@ (8001a58 <HAL_RCC_OscConfig+0x330>)
 80018be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018c2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018c4:	4b64      	ldr	r3, [pc, #400]	@ (8001a58 <HAL_RCC_OscConfig+0x330>)
 80018c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018c8:	f023 020f 	bic.w	r2, r3, #15
 80018cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018d0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	495f      	ldr	r1, [pc, #380]	@ (8001a58 <HAL_RCC_OscConfig+0x330>)
 80018da:	4313      	orrs	r3, r2
 80018dc:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d059      	beq.n	80019a2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ee:	f7ff fb07 	bl	8000f00 <HAL_GetTick>
 80018f2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f6:	e00a      	b.n	800190e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018f8:	f7ff fb02 	bl	8000f00 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b64      	cmp	r3, #100	@ 0x64
 8001906:	d902      	bls.n	800190e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	f000 bf43 	b.w	8002794 <HAL_RCC_OscConfig+0x106c>
 800190e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001912:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001916:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800191a:	fa93 f3a3 	rbit	r3, r3
 800191e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001922:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001926:	fab3 f383 	clz	r3, r3
 800192a:	b2db      	uxtb	r3, r3
 800192c:	095b      	lsrs	r3, r3, #5
 800192e:	b2db      	uxtb	r3, r3
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b01      	cmp	r3, #1
 8001938:	d102      	bne.n	8001940 <HAL_RCC_OscConfig+0x218>
 800193a:	4b47      	ldr	r3, [pc, #284]	@ (8001a58 <HAL_RCC_OscConfig+0x330>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	e015      	b.n	800196c <HAL_RCC_OscConfig+0x244>
 8001940:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001944:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001948:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800194c:	fa93 f3a3 	rbit	r3, r3
 8001950:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001954:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001958:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800195c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001960:	fa93 f3a3 	rbit	r3, r3
 8001964:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001968:	4b3b      	ldr	r3, [pc, #236]	@ (8001a58 <HAL_RCC_OscConfig+0x330>)
 800196a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800196c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001970:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001974:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001978:	fa92 f2a2 	rbit	r2, r2
 800197c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001980:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001984:	fab2 f282 	clz	r2, r2
 8001988:	b2d2      	uxtb	r2, r2
 800198a:	f042 0220 	orr.w	r2, r2, #32
 800198e:	b2d2      	uxtb	r2, r2
 8001990:	f002 021f 	and.w	r2, r2, #31
 8001994:	2101      	movs	r1, #1
 8001996:	fa01 f202 	lsl.w	r2, r1, r2
 800199a:	4013      	ands	r3, r2
 800199c:	2b00      	cmp	r3, #0
 800199e:	d0ab      	beq.n	80018f8 <HAL_RCC_OscConfig+0x1d0>
 80019a0:	e05d      	b.n	8001a5e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a2:	f7ff faad 	bl	8000f00 <HAL_GetTick>
 80019a6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019aa:	e00a      	b.n	80019c2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019ac:	f7ff faa8 	bl	8000f00 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b64      	cmp	r3, #100	@ 0x64
 80019ba:	d902      	bls.n	80019c2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	f000 bee9 	b.w	8002794 <HAL_RCC_OscConfig+0x106c>
 80019c2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019c6:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ca:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80019ce:	fa93 f3a3 	rbit	r3, r3
 80019d2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80019d6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019da:	fab3 f383 	clz	r3, r3
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	095b      	lsrs	r3, r3, #5
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	f043 0301 	orr.w	r3, r3, #1
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d102      	bne.n	80019f4 <HAL_RCC_OscConfig+0x2cc>
 80019ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001a58 <HAL_RCC_OscConfig+0x330>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	e015      	b.n	8001a20 <HAL_RCC_OscConfig+0x2f8>
 80019f4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019f8:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001a00:	fa93 f3a3 	rbit	r3, r3
 8001a04:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001a08:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a0c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001a10:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001a14:	fa93 f3a3 	rbit	r3, r3
 8001a18:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001a1c:	4b0e      	ldr	r3, [pc, #56]	@ (8001a58 <HAL_RCC_OscConfig+0x330>)
 8001a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a20:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001a24:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001a28:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001a2c:	fa92 f2a2 	rbit	r2, r2
 8001a30:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001a34:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001a38:	fab2 f282 	clz	r2, r2
 8001a3c:	b2d2      	uxtb	r2, r2
 8001a3e:	f042 0220 	orr.w	r2, r2, #32
 8001a42:	b2d2      	uxtb	r2, r2
 8001a44:	f002 021f 	and.w	r2, r2, #31
 8001a48:	2101      	movs	r1, #1
 8001a4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a4e:	4013      	ands	r3, r2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d1ab      	bne.n	80019ac <HAL_RCC_OscConfig+0x284>
 8001a54:	e003      	b.n	8001a5e <HAL_RCC_OscConfig+0x336>
 8001a56:	bf00      	nop
 8001a58:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a62:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f000 817d 	beq.w	8001d6e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a74:	4ba6      	ldr	r3, [pc, #664]	@ (8001d10 <HAL_RCC_OscConfig+0x5e8>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f003 030c 	and.w	r3, r3, #12
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d00b      	beq.n	8001a98 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a80:	4ba3      	ldr	r3, [pc, #652]	@ (8001d10 <HAL_RCC_OscConfig+0x5e8>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f003 030c 	and.w	r3, r3, #12
 8001a88:	2b08      	cmp	r3, #8
 8001a8a:	d172      	bne.n	8001b72 <HAL_RCC_OscConfig+0x44a>
 8001a8c:	4ba0      	ldr	r3, [pc, #640]	@ (8001d10 <HAL_RCC_OscConfig+0x5e8>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d16c      	bne.n	8001b72 <HAL_RCC_OscConfig+0x44a>
 8001a98:	2302      	movs	r3, #2
 8001a9a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001aa2:	fa93 f3a3 	rbit	r3, r3
 8001aa6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001aaa:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aae:	fab3 f383 	clz	r3, r3
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	095b      	lsrs	r3, r3, #5
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d102      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x3a0>
 8001ac2:	4b93      	ldr	r3, [pc, #588]	@ (8001d10 <HAL_RCC_OscConfig+0x5e8>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	e013      	b.n	8001af0 <HAL_RCC_OscConfig+0x3c8>
 8001ac8:	2302      	movs	r3, #2
 8001aca:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ace:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001ad2:	fa93 f3a3 	rbit	r3, r3
 8001ad6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001ada:	2302      	movs	r3, #2
 8001adc:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001ae0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001ae4:	fa93 f3a3 	rbit	r3, r3
 8001ae8:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001aec:	4b88      	ldr	r3, [pc, #544]	@ (8001d10 <HAL_RCC_OscConfig+0x5e8>)
 8001aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af0:	2202      	movs	r2, #2
 8001af2:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001af6:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001afa:	fa92 f2a2 	rbit	r2, r2
 8001afe:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001b02:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001b06:	fab2 f282 	clz	r2, r2
 8001b0a:	b2d2      	uxtb	r2, r2
 8001b0c:	f042 0220 	orr.w	r2, r2, #32
 8001b10:	b2d2      	uxtb	r2, r2
 8001b12:	f002 021f 	and.w	r2, r2, #31
 8001b16:	2101      	movs	r1, #1
 8001b18:	fa01 f202 	lsl.w	r2, r1, r2
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d00a      	beq.n	8001b38 <HAL_RCC_OscConfig+0x410>
 8001b22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b26:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d002      	beq.n	8001b38 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	f000 be2e 	b.w	8002794 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b38:	4b75      	ldr	r3, [pc, #468]	@ (8001d10 <HAL_RCC_OscConfig+0x5e8>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b44:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	695b      	ldr	r3, [r3, #20]
 8001b4c:	21f8      	movs	r1, #248	@ 0xf8
 8001b4e:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b52:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001b56:	fa91 f1a1 	rbit	r1, r1
 8001b5a:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001b5e:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001b62:	fab1 f181 	clz	r1, r1
 8001b66:	b2c9      	uxtb	r1, r1
 8001b68:	408b      	lsls	r3, r1
 8001b6a:	4969      	ldr	r1, [pc, #420]	@ (8001d10 <HAL_RCC_OscConfig+0x5e8>)
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b70:	e0fd      	b.n	8001d6e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b76:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	691b      	ldr	r3, [r3, #16]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f000 8088 	beq.w	8001c94 <HAL_RCC_OscConfig+0x56c>
 8001b84:	2301      	movs	r3, #1
 8001b86:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001b8e:	fa93 f3a3 	rbit	r3, r3
 8001b92:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001b96:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b9a:	fab3 f383 	clz	r3, r3
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001ba4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	461a      	mov	r2, r3
 8001bac:	2301      	movs	r3, #1
 8001bae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb0:	f7ff f9a6 	bl	8000f00 <HAL_GetTick>
 8001bb4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb8:	e00a      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bba:	f7ff f9a1 	bl	8000f00 <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d902      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	f000 bde2 	b.w	8002794 <HAL_RCC_OscConfig+0x106c>
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd6:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001bda:	fa93 f3a3 	rbit	r3, r3
 8001bde:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001be2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be6:	fab3 f383 	clz	r3, r3
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	095b      	lsrs	r3, r3, #5
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	f043 0301 	orr.w	r3, r3, #1
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d102      	bne.n	8001c00 <HAL_RCC_OscConfig+0x4d8>
 8001bfa:	4b45      	ldr	r3, [pc, #276]	@ (8001d10 <HAL_RCC_OscConfig+0x5e8>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	e013      	b.n	8001c28 <HAL_RCC_OscConfig+0x500>
 8001c00:	2302      	movs	r3, #2
 8001c02:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c06:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001c0a:	fa93 f3a3 	rbit	r3, r3
 8001c0e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001c12:	2302      	movs	r3, #2
 8001c14:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001c18:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001c1c:	fa93 f3a3 	rbit	r3, r3
 8001c20:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001c24:	4b3a      	ldr	r3, [pc, #232]	@ (8001d10 <HAL_RCC_OscConfig+0x5e8>)
 8001c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c28:	2202      	movs	r2, #2
 8001c2a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001c2e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001c32:	fa92 f2a2 	rbit	r2, r2
 8001c36:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001c3a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001c3e:	fab2 f282 	clz	r2, r2
 8001c42:	b2d2      	uxtb	r2, r2
 8001c44:	f042 0220 	orr.w	r2, r2, #32
 8001c48:	b2d2      	uxtb	r2, r2
 8001c4a:	f002 021f 	and.w	r2, r2, #31
 8001c4e:	2101      	movs	r1, #1
 8001c50:	fa01 f202 	lsl.w	r2, r1, r2
 8001c54:	4013      	ands	r3, r2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d0af      	beq.n	8001bba <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c5a:	4b2d      	ldr	r3, [pc, #180]	@ (8001d10 <HAL_RCC_OscConfig+0x5e8>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c66:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	21f8      	movs	r1, #248	@ 0xf8
 8001c70:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c74:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001c78:	fa91 f1a1 	rbit	r1, r1
 8001c7c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001c80:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001c84:	fab1 f181 	clz	r1, r1
 8001c88:	b2c9      	uxtb	r1, r1
 8001c8a:	408b      	lsls	r3, r1
 8001c8c:	4920      	ldr	r1, [pc, #128]	@ (8001d10 <HAL_RCC_OscConfig+0x5e8>)
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	600b      	str	r3, [r1, #0]
 8001c92:	e06c      	b.n	8001d6e <HAL_RCC_OscConfig+0x646>
 8001c94:	2301      	movs	r3, #1
 8001c96:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001c9e:	fa93 f3a3 	rbit	r3, r3
 8001ca2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001ca6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001caa:	fab3 f383 	clz	r3, r3
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001cb4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	461a      	mov	r2, r3
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc0:	f7ff f91e 	bl	8000f00 <HAL_GetTick>
 8001cc4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cc8:	e00a      	b.n	8001ce0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cca:	f7ff f919 	bl	8000f00 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d902      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	f000 bd5a 	b.w	8002794 <HAL_RCC_OscConfig+0x106c>
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001cea:	fa93 f3a3 	rbit	r3, r3
 8001cee:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001cf2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cf6:	fab3 f383 	clz	r3, r3
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	095b      	lsrs	r3, r3, #5
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	f043 0301 	orr.w	r3, r3, #1
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d104      	bne.n	8001d14 <HAL_RCC_OscConfig+0x5ec>
 8001d0a:	4b01      	ldr	r3, [pc, #4]	@ (8001d10 <HAL_RCC_OscConfig+0x5e8>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	e015      	b.n	8001d3c <HAL_RCC_OscConfig+0x614>
 8001d10:	40021000 	.word	0x40021000
 8001d14:	2302      	movs	r3, #2
 8001d16:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001d1e:	fa93 f3a3 	rbit	r3, r3
 8001d22:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001d26:	2302      	movs	r3, #2
 8001d28:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001d2c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001d30:	fa93 f3a3 	rbit	r3, r3
 8001d34:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001d38:	4bc8      	ldr	r3, [pc, #800]	@ (800205c <HAL_RCC_OscConfig+0x934>)
 8001d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d3c:	2202      	movs	r2, #2
 8001d3e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001d42:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001d46:	fa92 f2a2 	rbit	r2, r2
 8001d4a:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001d4e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001d52:	fab2 f282 	clz	r2, r2
 8001d56:	b2d2      	uxtb	r2, r2
 8001d58:	f042 0220 	orr.w	r2, r2, #32
 8001d5c:	b2d2      	uxtb	r2, r2
 8001d5e:	f002 021f 	and.w	r2, r2, #31
 8001d62:	2101      	movs	r1, #1
 8001d64:	fa01 f202 	lsl.w	r2, r1, r2
 8001d68:	4013      	ands	r3, r2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1ad      	bne.n	8001cca <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d72:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0308 	and.w	r3, r3, #8
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f000 8110 	beq.w	8001fa4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d88:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d079      	beq.n	8001e88 <HAL_RCC_OscConfig+0x760>
 8001d94:	2301      	movs	r3, #1
 8001d96:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001d9e:	fa93 f3a3 	rbit	r3, r3
 8001da2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001da6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001daa:	fab3 f383 	clz	r3, r3
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	461a      	mov	r2, r3
 8001db2:	4bab      	ldr	r3, [pc, #684]	@ (8002060 <HAL_RCC_OscConfig+0x938>)
 8001db4:	4413      	add	r3, r2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	461a      	mov	r2, r3
 8001dba:	2301      	movs	r3, #1
 8001dbc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dbe:	f7ff f89f 	bl	8000f00 <HAL_GetTick>
 8001dc2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dc6:	e00a      	b.n	8001dde <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dc8:	f7ff f89a 	bl	8000f00 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d902      	bls.n	8001dde <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	f000 bcdb 	b.w	8002794 <HAL_RCC_OscConfig+0x106c>
 8001dde:	2302      	movs	r3, #2
 8001de0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001de8:	fa93 f3a3 	rbit	r3, r3
 8001dec:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001df0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001df4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001df8:	2202      	movs	r2, #2
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e00:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	fa93 f2a3 	rbit	r2, r3
 8001e0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e0e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001e1c:	2202      	movs	r2, #2
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	fa93 f2a3 	rbit	r2, r3
 8001e2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e32:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001e36:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e38:	4b88      	ldr	r3, [pc, #544]	@ (800205c <HAL_RCC_OscConfig+0x934>)
 8001e3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e40:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001e44:	2102      	movs	r1, #2
 8001e46:	6019      	str	r1, [r3, #0]
 8001e48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e4c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	fa93 f1a3 	rbit	r1, r3
 8001e56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e5a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001e5e:	6019      	str	r1, [r3, #0]
  return result;
 8001e60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e64:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	fab3 f383 	clz	r3, r3
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	f003 031f 	and.w	r3, r3, #31
 8001e7a:	2101      	movs	r1, #1
 8001e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e80:	4013      	ands	r3, r2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d0a0      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x6a0>
 8001e86:	e08d      	b.n	8001fa4 <HAL_RCC_OscConfig+0x87c>
 8001e88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e8c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001e90:	2201      	movs	r2, #1
 8001e92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e98:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	fa93 f2a3 	rbit	r2, r3
 8001ea2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ea6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001eaa:	601a      	str	r2, [r3, #0]
  return result;
 8001eac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eb0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001eb4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eb6:	fab3 f383 	clz	r3, r3
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	4b68      	ldr	r3, [pc, #416]	@ (8002060 <HAL_RCC_OscConfig+0x938>)
 8001ec0:	4413      	add	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eca:	f7ff f819 	bl	8000f00 <HAL_GetTick>
 8001ece:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ed2:	e00a      	b.n	8001eea <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ed4:	f7ff f814 	bl	8000f00 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d902      	bls.n	8001eea <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	f000 bc55 	b.w	8002794 <HAL_RCC_OscConfig+0x106c>
 8001eea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eee:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001ef2:	2202      	movs	r2, #2
 8001ef4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001efa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	fa93 f2a3 	rbit	r2, r3
 8001f04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f08:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f12:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001f16:	2202      	movs	r2, #2
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f1e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	fa93 f2a3 	rbit	r2, r3
 8001f28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f2c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f36:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f42:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	fa93 f2a3 	rbit	r2, r3
 8001f4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f50:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001f54:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f56:	4b41      	ldr	r3, [pc, #260]	@ (800205c <HAL_RCC_OscConfig+0x934>)
 8001f58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f5e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001f62:	2102      	movs	r1, #2
 8001f64:	6019      	str	r1, [r3, #0]
 8001f66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f6a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	fa93 f1a3 	rbit	r1, r3
 8001f74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f78:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001f7c:	6019      	str	r1, [r3, #0]
  return result;
 8001f7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f82:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	fab3 f383 	clz	r3, r3
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	f003 031f 	and.w	r3, r3, #31
 8001f98:	2101      	movs	r1, #1
 8001f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d197      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fa4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fa8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0304 	and.w	r3, r3, #4
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f000 81a1 	beq.w	80022fc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fc0:	4b26      	ldr	r3, [pc, #152]	@ (800205c <HAL_RCC_OscConfig+0x934>)
 8001fc2:	69db      	ldr	r3, [r3, #28]
 8001fc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d116      	bne.n	8001ffa <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fcc:	4b23      	ldr	r3, [pc, #140]	@ (800205c <HAL_RCC_OscConfig+0x934>)
 8001fce:	69db      	ldr	r3, [r3, #28]
 8001fd0:	4a22      	ldr	r2, [pc, #136]	@ (800205c <HAL_RCC_OscConfig+0x934>)
 8001fd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fd6:	61d3      	str	r3, [r2, #28]
 8001fd8:	4b20      	ldr	r3, [pc, #128]	@ (800205c <HAL_RCC_OscConfig+0x934>)
 8001fda:	69db      	ldr	r3, [r3, #28]
 8001fdc:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001fe0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fe4:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001fe8:	601a      	str	r2, [r3, #0]
 8001fea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fee:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001ff2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ffa:	4b1a      	ldr	r3, [pc, #104]	@ (8002064 <HAL_RCC_OscConfig+0x93c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002002:	2b00      	cmp	r3, #0
 8002004:	d11a      	bne.n	800203c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002006:	4b17      	ldr	r3, [pc, #92]	@ (8002064 <HAL_RCC_OscConfig+0x93c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a16      	ldr	r2, [pc, #88]	@ (8002064 <HAL_RCC_OscConfig+0x93c>)
 800200c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002010:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002012:	f7fe ff75 	bl	8000f00 <HAL_GetTick>
 8002016:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800201a:	e009      	b.n	8002030 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800201c:	f7fe ff70 	bl	8000f00 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b64      	cmp	r3, #100	@ 0x64
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e3b1      	b.n	8002794 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002030:	4b0c      	ldr	r3, [pc, #48]	@ (8002064 <HAL_RCC_OscConfig+0x93c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002038:	2b00      	cmp	r3, #0
 800203a:	d0ef      	beq.n	800201c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800203c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002040:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d10d      	bne.n	8002068 <HAL_RCC_OscConfig+0x940>
 800204c:	4b03      	ldr	r3, [pc, #12]	@ (800205c <HAL_RCC_OscConfig+0x934>)
 800204e:	6a1b      	ldr	r3, [r3, #32]
 8002050:	4a02      	ldr	r2, [pc, #8]	@ (800205c <HAL_RCC_OscConfig+0x934>)
 8002052:	f043 0301 	orr.w	r3, r3, #1
 8002056:	6213      	str	r3, [r2, #32]
 8002058:	e03c      	b.n	80020d4 <HAL_RCC_OscConfig+0x9ac>
 800205a:	bf00      	nop
 800205c:	40021000 	.word	0x40021000
 8002060:	10908120 	.word	0x10908120
 8002064:	40007000 	.word	0x40007000
 8002068:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800206c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d10c      	bne.n	8002092 <HAL_RCC_OscConfig+0x96a>
 8002078:	4bc1      	ldr	r3, [pc, #772]	@ (8002380 <HAL_RCC_OscConfig+0xc58>)
 800207a:	6a1b      	ldr	r3, [r3, #32]
 800207c:	4ac0      	ldr	r2, [pc, #768]	@ (8002380 <HAL_RCC_OscConfig+0xc58>)
 800207e:	f023 0301 	bic.w	r3, r3, #1
 8002082:	6213      	str	r3, [r2, #32]
 8002084:	4bbe      	ldr	r3, [pc, #760]	@ (8002380 <HAL_RCC_OscConfig+0xc58>)
 8002086:	6a1b      	ldr	r3, [r3, #32]
 8002088:	4abd      	ldr	r2, [pc, #756]	@ (8002380 <HAL_RCC_OscConfig+0xc58>)
 800208a:	f023 0304 	bic.w	r3, r3, #4
 800208e:	6213      	str	r3, [r2, #32]
 8002090:	e020      	b.n	80020d4 <HAL_RCC_OscConfig+0x9ac>
 8002092:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002096:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	2b05      	cmp	r3, #5
 80020a0:	d10c      	bne.n	80020bc <HAL_RCC_OscConfig+0x994>
 80020a2:	4bb7      	ldr	r3, [pc, #732]	@ (8002380 <HAL_RCC_OscConfig+0xc58>)
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	4ab6      	ldr	r2, [pc, #728]	@ (8002380 <HAL_RCC_OscConfig+0xc58>)
 80020a8:	f043 0304 	orr.w	r3, r3, #4
 80020ac:	6213      	str	r3, [r2, #32]
 80020ae:	4bb4      	ldr	r3, [pc, #720]	@ (8002380 <HAL_RCC_OscConfig+0xc58>)
 80020b0:	6a1b      	ldr	r3, [r3, #32]
 80020b2:	4ab3      	ldr	r2, [pc, #716]	@ (8002380 <HAL_RCC_OscConfig+0xc58>)
 80020b4:	f043 0301 	orr.w	r3, r3, #1
 80020b8:	6213      	str	r3, [r2, #32]
 80020ba:	e00b      	b.n	80020d4 <HAL_RCC_OscConfig+0x9ac>
 80020bc:	4bb0      	ldr	r3, [pc, #704]	@ (8002380 <HAL_RCC_OscConfig+0xc58>)
 80020be:	6a1b      	ldr	r3, [r3, #32]
 80020c0:	4aaf      	ldr	r2, [pc, #700]	@ (8002380 <HAL_RCC_OscConfig+0xc58>)
 80020c2:	f023 0301 	bic.w	r3, r3, #1
 80020c6:	6213      	str	r3, [r2, #32]
 80020c8:	4bad      	ldr	r3, [pc, #692]	@ (8002380 <HAL_RCC_OscConfig+0xc58>)
 80020ca:	6a1b      	ldr	r3, [r3, #32]
 80020cc:	4aac      	ldr	r2, [pc, #688]	@ (8002380 <HAL_RCC_OscConfig+0xc58>)
 80020ce:	f023 0304 	bic.w	r3, r3, #4
 80020d2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020d8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f000 8081 	beq.w	80021e8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020e6:	f7fe ff0b 	bl	8000f00 <HAL_GetTick>
 80020ea:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ee:	e00b      	b.n	8002108 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020f0:	f7fe ff06 	bl	8000f00 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002100:	4293      	cmp	r3, r2
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e345      	b.n	8002794 <HAL_RCC_OscConfig+0x106c>
 8002108:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800210c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002110:	2202      	movs	r2, #2
 8002112:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002114:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002118:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	fa93 f2a3 	rbit	r2, r3
 8002122:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002126:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002130:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002134:	2202      	movs	r2, #2
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800213c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	fa93 f2a3 	rbit	r2, r3
 8002146:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800214a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800214e:	601a      	str	r2, [r3, #0]
  return result;
 8002150:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002154:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002158:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800215a:	fab3 f383 	clz	r3, r3
 800215e:	b2db      	uxtb	r3, r3
 8002160:	095b      	lsrs	r3, r3, #5
 8002162:	b2db      	uxtb	r3, r3
 8002164:	f043 0302 	orr.w	r3, r3, #2
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b02      	cmp	r3, #2
 800216c:	d102      	bne.n	8002174 <HAL_RCC_OscConfig+0xa4c>
 800216e:	4b84      	ldr	r3, [pc, #528]	@ (8002380 <HAL_RCC_OscConfig+0xc58>)
 8002170:	6a1b      	ldr	r3, [r3, #32]
 8002172:	e013      	b.n	800219c <HAL_RCC_OscConfig+0xa74>
 8002174:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002178:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800217c:	2202      	movs	r2, #2
 800217e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002180:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002184:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	fa93 f2a3 	rbit	r2, r3
 800218e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002192:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	4b79      	ldr	r3, [pc, #484]	@ (8002380 <HAL_RCC_OscConfig+0xc58>)
 800219a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800219c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80021a0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80021a4:	2102      	movs	r1, #2
 80021a6:	6011      	str	r1, [r2, #0]
 80021a8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80021ac:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80021b0:	6812      	ldr	r2, [r2, #0]
 80021b2:	fa92 f1a2 	rbit	r1, r2
 80021b6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80021ba:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80021be:	6011      	str	r1, [r2, #0]
  return result;
 80021c0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80021c4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80021c8:	6812      	ldr	r2, [r2, #0]
 80021ca:	fab2 f282 	clz	r2, r2
 80021ce:	b2d2      	uxtb	r2, r2
 80021d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80021d4:	b2d2      	uxtb	r2, r2
 80021d6:	f002 021f 	and.w	r2, r2, #31
 80021da:	2101      	movs	r1, #1
 80021dc:	fa01 f202 	lsl.w	r2, r1, r2
 80021e0:	4013      	ands	r3, r2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d084      	beq.n	80020f0 <HAL_RCC_OscConfig+0x9c8>
 80021e6:	e07f      	b.n	80022e8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e8:	f7fe fe8a 	bl	8000f00 <HAL_GetTick>
 80021ec:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021f0:	e00b      	b.n	800220a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021f2:	f7fe fe85 	bl	8000f00 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002202:	4293      	cmp	r3, r2
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e2c4      	b.n	8002794 <HAL_RCC_OscConfig+0x106c>
 800220a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800220e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002212:	2202      	movs	r2, #2
 8002214:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002216:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800221a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	fa93 f2a3 	rbit	r2, r3
 8002224:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002228:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002232:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002236:	2202      	movs	r2, #2
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800223e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	fa93 f2a3 	rbit	r2, r3
 8002248:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800224c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002250:	601a      	str	r2, [r3, #0]
  return result;
 8002252:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002256:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800225a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800225c:	fab3 f383 	clz	r3, r3
 8002260:	b2db      	uxtb	r3, r3
 8002262:	095b      	lsrs	r3, r3, #5
 8002264:	b2db      	uxtb	r3, r3
 8002266:	f043 0302 	orr.w	r3, r3, #2
 800226a:	b2db      	uxtb	r3, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d102      	bne.n	8002276 <HAL_RCC_OscConfig+0xb4e>
 8002270:	4b43      	ldr	r3, [pc, #268]	@ (8002380 <HAL_RCC_OscConfig+0xc58>)
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	e013      	b.n	800229e <HAL_RCC_OscConfig+0xb76>
 8002276:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800227a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800227e:	2202      	movs	r2, #2
 8002280:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002282:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002286:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	fa93 f2a3 	rbit	r2, r3
 8002290:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002294:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	4b39      	ldr	r3, [pc, #228]	@ (8002380 <HAL_RCC_OscConfig+0xc58>)
 800229c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800229e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80022a2:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80022a6:	2102      	movs	r1, #2
 80022a8:	6011      	str	r1, [r2, #0]
 80022aa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80022ae:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80022b2:	6812      	ldr	r2, [r2, #0]
 80022b4:	fa92 f1a2 	rbit	r1, r2
 80022b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80022bc:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80022c0:	6011      	str	r1, [r2, #0]
  return result;
 80022c2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80022c6:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80022ca:	6812      	ldr	r2, [r2, #0]
 80022cc:	fab2 f282 	clz	r2, r2
 80022d0:	b2d2      	uxtb	r2, r2
 80022d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80022d6:	b2d2      	uxtb	r2, r2
 80022d8:	f002 021f 	and.w	r2, r2, #31
 80022dc:	2101      	movs	r1, #1
 80022de:	fa01 f202 	lsl.w	r2, r1, r2
 80022e2:	4013      	ands	r3, r2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d184      	bne.n	80021f2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022e8:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d105      	bne.n	80022fc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022f0:	4b23      	ldr	r3, [pc, #140]	@ (8002380 <HAL_RCC_OscConfig+0xc58>)
 80022f2:	69db      	ldr	r3, [r3, #28]
 80022f4:	4a22      	ldr	r2, [pc, #136]	@ (8002380 <HAL_RCC_OscConfig+0xc58>)
 80022f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022fa:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002300:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	69db      	ldr	r3, [r3, #28]
 8002308:	2b00      	cmp	r3, #0
 800230a:	f000 8242 	beq.w	8002792 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800230e:	4b1c      	ldr	r3, [pc, #112]	@ (8002380 <HAL_RCC_OscConfig+0xc58>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f003 030c 	and.w	r3, r3, #12
 8002316:	2b08      	cmp	r3, #8
 8002318:	f000 8213 	beq.w	8002742 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800231c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002320:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	69db      	ldr	r3, [r3, #28]
 8002328:	2b02      	cmp	r3, #2
 800232a:	f040 8162 	bne.w	80025f2 <HAL_RCC_OscConfig+0xeca>
 800232e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002332:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002336:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800233a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002340:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	fa93 f2a3 	rbit	r2, r3
 800234a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800234e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002352:	601a      	str	r2, [r3, #0]
  return result;
 8002354:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002358:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800235c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800235e:	fab3 f383 	clz	r3, r3
 8002362:	b2db      	uxtb	r3, r3
 8002364:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002368:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	461a      	mov	r2, r3
 8002370:	2300      	movs	r3, #0
 8002372:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002374:	f7fe fdc4 	bl	8000f00 <HAL_GetTick>
 8002378:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800237c:	e00c      	b.n	8002398 <HAL_RCC_OscConfig+0xc70>
 800237e:	bf00      	nop
 8002380:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002384:	f7fe fdbc 	bl	8000f00 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b02      	cmp	r3, #2
 8002392:	d901      	bls.n	8002398 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e1fd      	b.n	8002794 <HAL_RCC_OscConfig+0x106c>
 8002398:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800239c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80023a0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023aa:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	fa93 f2a3 	rbit	r2, r3
 80023b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023b8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80023bc:	601a      	str	r2, [r3, #0]
  return result;
 80023be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023c2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80023c6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023c8:	fab3 f383 	clz	r3, r3
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	095b      	lsrs	r3, r3, #5
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	f043 0301 	orr.w	r3, r3, #1
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d102      	bne.n	80023e2 <HAL_RCC_OscConfig+0xcba>
 80023dc:	4bb0      	ldr	r3, [pc, #704]	@ (80026a0 <HAL_RCC_OscConfig+0xf78>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	e027      	b.n	8002432 <HAL_RCC_OscConfig+0xd0a>
 80023e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023e6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80023ea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023f4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	fa93 f2a3 	rbit	r2, r3
 80023fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002402:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800240c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002410:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800241a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	fa93 f2a3 	rbit	r2, r3
 8002424:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002428:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	4b9c      	ldr	r3, [pc, #624]	@ (80026a0 <HAL_RCC_OscConfig+0xf78>)
 8002430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002432:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002436:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800243a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800243e:	6011      	str	r1, [r2, #0]
 8002440:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002444:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002448:	6812      	ldr	r2, [r2, #0]
 800244a:	fa92 f1a2 	rbit	r1, r2
 800244e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002452:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002456:	6011      	str	r1, [r2, #0]
  return result;
 8002458:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800245c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002460:	6812      	ldr	r2, [r2, #0]
 8002462:	fab2 f282 	clz	r2, r2
 8002466:	b2d2      	uxtb	r2, r2
 8002468:	f042 0220 	orr.w	r2, r2, #32
 800246c:	b2d2      	uxtb	r2, r2
 800246e:	f002 021f 	and.w	r2, r2, #31
 8002472:	2101      	movs	r1, #1
 8002474:	fa01 f202 	lsl.w	r2, r1, r2
 8002478:	4013      	ands	r3, r2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d182      	bne.n	8002384 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800247e:	4b88      	ldr	r3, [pc, #544]	@ (80026a0 <HAL_RCC_OscConfig+0xf78>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002486:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800248a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002492:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002496:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	430b      	orrs	r3, r1
 80024a0:	497f      	ldr	r1, [pc, #508]	@ (80026a0 <HAL_RCC_OscConfig+0xf78>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	604b      	str	r3, [r1, #4]
 80024a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024aa:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80024ae:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80024b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024b8:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	fa93 f2a3 	rbit	r2, r3
 80024c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024c6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80024ca:	601a      	str	r2, [r3, #0]
  return result;
 80024cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024d0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80024d4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024d6:	fab3 f383 	clz	r3, r3
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80024e0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	461a      	mov	r2, r3
 80024e8:	2301      	movs	r3, #1
 80024ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ec:	f7fe fd08 	bl	8000f00 <HAL_GetTick>
 80024f0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024f4:	e009      	b.n	800250a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024f6:	f7fe fd03 	bl	8000f00 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e144      	b.n	8002794 <HAL_RCC_OscConfig+0x106c>
 800250a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800250e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002512:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002516:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002518:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800251c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	fa93 f2a3 	rbit	r2, r3
 8002526:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800252a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800252e:	601a      	str	r2, [r3, #0]
  return result;
 8002530:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002534:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002538:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800253a:	fab3 f383 	clz	r3, r3
 800253e:	b2db      	uxtb	r3, r3
 8002540:	095b      	lsrs	r3, r3, #5
 8002542:	b2db      	uxtb	r3, r3
 8002544:	f043 0301 	orr.w	r3, r3, #1
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b01      	cmp	r3, #1
 800254c:	d102      	bne.n	8002554 <HAL_RCC_OscConfig+0xe2c>
 800254e:	4b54      	ldr	r3, [pc, #336]	@ (80026a0 <HAL_RCC_OscConfig+0xf78>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	e027      	b.n	80025a4 <HAL_RCC_OscConfig+0xe7c>
 8002554:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002558:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800255c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002560:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002562:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002566:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	fa93 f2a3 	rbit	r2, r3
 8002570:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002574:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002578:	601a      	str	r2, [r3, #0]
 800257a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800257e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002582:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800258c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	fa93 f2a3 	rbit	r2, r3
 8002596:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800259a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800259e:	601a      	str	r2, [r3, #0]
 80025a0:	4b3f      	ldr	r3, [pc, #252]	@ (80026a0 <HAL_RCC_OscConfig+0xf78>)
 80025a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025a8:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80025ac:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80025b0:	6011      	str	r1, [r2, #0]
 80025b2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025b6:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80025ba:	6812      	ldr	r2, [r2, #0]
 80025bc:	fa92 f1a2 	rbit	r1, r2
 80025c0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025c4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80025c8:	6011      	str	r1, [r2, #0]
  return result;
 80025ca:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025ce:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80025d2:	6812      	ldr	r2, [r2, #0]
 80025d4:	fab2 f282 	clz	r2, r2
 80025d8:	b2d2      	uxtb	r2, r2
 80025da:	f042 0220 	orr.w	r2, r2, #32
 80025de:	b2d2      	uxtb	r2, r2
 80025e0:	f002 021f 	and.w	r2, r2, #31
 80025e4:	2101      	movs	r1, #1
 80025e6:	fa01 f202 	lsl.w	r2, r1, r2
 80025ea:	4013      	ands	r3, r2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d082      	beq.n	80024f6 <HAL_RCC_OscConfig+0xdce>
 80025f0:	e0cf      	b.n	8002792 <HAL_RCC_OscConfig+0x106a>
 80025f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025f6:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80025fa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80025fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002600:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002604:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	fa93 f2a3 	rbit	r2, r3
 800260e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002612:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002616:	601a      	str	r2, [r3, #0]
  return result;
 8002618:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800261c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002620:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002622:	fab3 f383 	clz	r3, r3
 8002626:	b2db      	uxtb	r3, r3
 8002628:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800262c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	461a      	mov	r2, r3
 8002634:	2300      	movs	r3, #0
 8002636:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002638:	f7fe fc62 	bl	8000f00 <HAL_GetTick>
 800263c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002640:	e009      	b.n	8002656 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002642:	f7fe fc5d 	bl	8000f00 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e09e      	b.n	8002794 <HAL_RCC_OscConfig+0x106c>
 8002656:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800265a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800265e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002662:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002664:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002668:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	fa93 f2a3 	rbit	r2, r3
 8002672:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002676:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800267a:	601a      	str	r2, [r3, #0]
  return result;
 800267c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002680:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002684:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002686:	fab3 f383 	clz	r3, r3
 800268a:	b2db      	uxtb	r3, r3
 800268c:	095b      	lsrs	r3, r3, #5
 800268e:	b2db      	uxtb	r3, r3
 8002690:	f043 0301 	orr.w	r3, r3, #1
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b01      	cmp	r3, #1
 8002698:	d104      	bne.n	80026a4 <HAL_RCC_OscConfig+0xf7c>
 800269a:	4b01      	ldr	r3, [pc, #4]	@ (80026a0 <HAL_RCC_OscConfig+0xf78>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	e029      	b.n	80026f4 <HAL_RCC_OscConfig+0xfcc>
 80026a0:	40021000 	.word	0x40021000
 80026a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026a8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80026ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026b6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	fa93 f2a3 	rbit	r2, r3
 80026c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026c4:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80026c8:	601a      	str	r2, [r3, #0]
 80026ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ce:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80026d2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026dc:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	fa93 f2a3 	rbit	r2, r3
 80026e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ea:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	4b2b      	ldr	r3, [pc, #172]	@ (80027a0 <HAL_RCC_OscConfig+0x1078>)
 80026f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026f8:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80026fc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002700:	6011      	str	r1, [r2, #0]
 8002702:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002706:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800270a:	6812      	ldr	r2, [r2, #0]
 800270c:	fa92 f1a2 	rbit	r1, r2
 8002710:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002714:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002718:	6011      	str	r1, [r2, #0]
  return result;
 800271a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800271e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002722:	6812      	ldr	r2, [r2, #0]
 8002724:	fab2 f282 	clz	r2, r2
 8002728:	b2d2      	uxtb	r2, r2
 800272a:	f042 0220 	orr.w	r2, r2, #32
 800272e:	b2d2      	uxtb	r2, r2
 8002730:	f002 021f 	and.w	r2, r2, #31
 8002734:	2101      	movs	r1, #1
 8002736:	fa01 f202 	lsl.w	r2, r1, r2
 800273a:	4013      	ands	r3, r2
 800273c:	2b00      	cmp	r3, #0
 800273e:	d180      	bne.n	8002642 <HAL_RCC_OscConfig+0xf1a>
 8002740:	e027      	b.n	8002792 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002742:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002746:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	69db      	ldr	r3, [r3, #28]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d101      	bne.n	8002756 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e01e      	b.n	8002794 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002756:	4b12      	ldr	r3, [pc, #72]	@ (80027a0 <HAL_RCC_OscConfig+0x1078>)
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800275e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002762:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002766:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800276a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	429a      	cmp	r2, r3
 8002774:	d10b      	bne.n	800278e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002776:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800277a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800277e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002782:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800278a:	429a      	cmp	r2, r3
 800278c:	d001      	beq.n	8002792 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e000      	b.n	8002794 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	40021000 	.word	0x40021000

080027a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b09e      	sub	sp, #120	@ 0x78
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80027ae:	2300      	movs	r3, #0
 80027b0:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d101      	bne.n	80027bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e162      	b.n	8002a82 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027bc:	4b90      	ldr	r3, [pc, #576]	@ (8002a00 <HAL_RCC_ClockConfig+0x25c>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d910      	bls.n	80027ec <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ca:	4b8d      	ldr	r3, [pc, #564]	@ (8002a00 <HAL_RCC_ClockConfig+0x25c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f023 0207 	bic.w	r2, r3, #7
 80027d2:	498b      	ldr	r1, [pc, #556]	@ (8002a00 <HAL_RCC_ClockConfig+0x25c>)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027da:	4b89      	ldr	r3, [pc, #548]	@ (8002a00 <HAL_RCC_ClockConfig+0x25c>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0307 	and.w	r3, r3, #7
 80027e2:	683a      	ldr	r2, [r7, #0]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d001      	beq.n	80027ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e14a      	b.n	8002a82 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d008      	beq.n	800280a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027f8:	4b82      	ldr	r3, [pc, #520]	@ (8002a04 <HAL_RCC_ClockConfig+0x260>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	497f      	ldr	r1, [pc, #508]	@ (8002a04 <HAL_RCC_ClockConfig+0x260>)
 8002806:	4313      	orrs	r3, r2
 8002808:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b00      	cmp	r3, #0
 8002814:	f000 80dc 	beq.w	80029d0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d13c      	bne.n	800289a <HAL_RCC_ClockConfig+0xf6>
 8002820:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002824:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002826:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002828:	fa93 f3a3 	rbit	r3, r3
 800282c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800282e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002830:	fab3 f383 	clz	r3, r3
 8002834:	b2db      	uxtb	r3, r3
 8002836:	095b      	lsrs	r3, r3, #5
 8002838:	b2db      	uxtb	r3, r3
 800283a:	f043 0301 	orr.w	r3, r3, #1
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b01      	cmp	r3, #1
 8002842:	d102      	bne.n	800284a <HAL_RCC_ClockConfig+0xa6>
 8002844:	4b6f      	ldr	r3, [pc, #444]	@ (8002a04 <HAL_RCC_ClockConfig+0x260>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	e00f      	b.n	800286a <HAL_RCC_ClockConfig+0xc6>
 800284a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800284e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002850:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002852:	fa93 f3a3 	rbit	r3, r3
 8002856:	667b      	str	r3, [r7, #100]	@ 0x64
 8002858:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800285c:	663b      	str	r3, [r7, #96]	@ 0x60
 800285e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002860:	fa93 f3a3 	rbit	r3, r3
 8002864:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002866:	4b67      	ldr	r3, [pc, #412]	@ (8002a04 <HAL_RCC_ClockConfig+0x260>)
 8002868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800286e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002870:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002872:	fa92 f2a2 	rbit	r2, r2
 8002876:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002878:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800287a:	fab2 f282 	clz	r2, r2
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	f042 0220 	orr.w	r2, r2, #32
 8002884:	b2d2      	uxtb	r2, r2
 8002886:	f002 021f 	and.w	r2, r2, #31
 800288a:	2101      	movs	r1, #1
 800288c:	fa01 f202 	lsl.w	r2, r1, r2
 8002890:	4013      	ands	r3, r2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d17b      	bne.n	800298e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e0f3      	b.n	8002a82 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d13c      	bne.n	800291c <HAL_RCC_ClockConfig+0x178>
 80028a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028a6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028aa:	fa93 f3a3 	rbit	r3, r3
 80028ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80028b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028b2:	fab3 f383 	clz	r3, r3
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	095b      	lsrs	r3, r3, #5
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	f043 0301 	orr.w	r3, r3, #1
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d102      	bne.n	80028cc <HAL_RCC_ClockConfig+0x128>
 80028c6:	4b4f      	ldr	r3, [pc, #316]	@ (8002a04 <HAL_RCC_ClockConfig+0x260>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	e00f      	b.n	80028ec <HAL_RCC_ClockConfig+0x148>
 80028cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80028d4:	fa93 f3a3 	rbit	r3, r3
 80028d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80028da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028de:	643b      	str	r3, [r7, #64]	@ 0x40
 80028e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028e2:	fa93 f3a3 	rbit	r3, r3
 80028e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028e8:	4b46      	ldr	r3, [pc, #280]	@ (8002a04 <HAL_RCC_ClockConfig+0x260>)
 80028ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028f0:	63ba      	str	r2, [r7, #56]	@ 0x38
 80028f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80028f4:	fa92 f2a2 	rbit	r2, r2
 80028f8:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80028fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80028fc:	fab2 f282 	clz	r2, r2
 8002900:	b2d2      	uxtb	r2, r2
 8002902:	f042 0220 	orr.w	r2, r2, #32
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	f002 021f 	and.w	r2, r2, #31
 800290c:	2101      	movs	r1, #1
 800290e:	fa01 f202 	lsl.w	r2, r1, r2
 8002912:	4013      	ands	r3, r2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d13a      	bne.n	800298e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e0b2      	b.n	8002a82 <HAL_RCC_ClockConfig+0x2de>
 800291c:	2302      	movs	r3, #2
 800291e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002922:	fa93 f3a3 	rbit	r3, r3
 8002926:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800292a:	fab3 f383 	clz	r3, r3
 800292e:	b2db      	uxtb	r3, r3
 8002930:	095b      	lsrs	r3, r3, #5
 8002932:	b2db      	uxtb	r3, r3
 8002934:	f043 0301 	orr.w	r3, r3, #1
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b01      	cmp	r3, #1
 800293c:	d102      	bne.n	8002944 <HAL_RCC_ClockConfig+0x1a0>
 800293e:	4b31      	ldr	r3, [pc, #196]	@ (8002a04 <HAL_RCC_ClockConfig+0x260>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	e00d      	b.n	8002960 <HAL_RCC_ClockConfig+0x1bc>
 8002944:	2302      	movs	r3, #2
 8002946:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800294a:	fa93 f3a3 	rbit	r3, r3
 800294e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002950:	2302      	movs	r3, #2
 8002952:	623b      	str	r3, [r7, #32]
 8002954:	6a3b      	ldr	r3, [r7, #32]
 8002956:	fa93 f3a3 	rbit	r3, r3
 800295a:	61fb      	str	r3, [r7, #28]
 800295c:	4b29      	ldr	r3, [pc, #164]	@ (8002a04 <HAL_RCC_ClockConfig+0x260>)
 800295e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002960:	2202      	movs	r2, #2
 8002962:	61ba      	str	r2, [r7, #24]
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	fa92 f2a2 	rbit	r2, r2
 800296a:	617a      	str	r2, [r7, #20]
  return result;
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	fab2 f282 	clz	r2, r2
 8002972:	b2d2      	uxtb	r2, r2
 8002974:	f042 0220 	orr.w	r2, r2, #32
 8002978:	b2d2      	uxtb	r2, r2
 800297a:	f002 021f 	and.w	r2, r2, #31
 800297e:	2101      	movs	r1, #1
 8002980:	fa01 f202 	lsl.w	r2, r1, r2
 8002984:	4013      	ands	r3, r2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e079      	b.n	8002a82 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800298e:	4b1d      	ldr	r3, [pc, #116]	@ (8002a04 <HAL_RCC_ClockConfig+0x260>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f023 0203 	bic.w	r2, r3, #3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	491a      	ldr	r1, [pc, #104]	@ (8002a04 <HAL_RCC_ClockConfig+0x260>)
 800299c:	4313      	orrs	r3, r2
 800299e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029a0:	f7fe faae 	bl	8000f00 <HAL_GetTick>
 80029a4:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029a6:	e00a      	b.n	80029be <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029a8:	f7fe faaa 	bl	8000f00 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e061      	b.n	8002a82 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029be:	4b11      	ldr	r3, [pc, #68]	@ (8002a04 <HAL_RCC_ClockConfig+0x260>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f003 020c 	and.w	r2, r3, #12
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d1eb      	bne.n	80029a8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002a00 <HAL_RCC_ClockConfig+0x25c>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0307 	and.w	r3, r3, #7
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d214      	bcs.n	8002a08 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029de:	4b08      	ldr	r3, [pc, #32]	@ (8002a00 <HAL_RCC_ClockConfig+0x25c>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f023 0207 	bic.w	r2, r3, #7
 80029e6:	4906      	ldr	r1, [pc, #24]	@ (8002a00 <HAL_RCC_ClockConfig+0x25c>)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ee:	4b04      	ldr	r3, [pc, #16]	@ (8002a00 <HAL_RCC_ClockConfig+0x25c>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0307 	and.w	r3, r3, #7
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d005      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e040      	b.n	8002a82 <HAL_RCC_ClockConfig+0x2de>
 8002a00:	40022000 	.word	0x40022000
 8002a04:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d008      	beq.n	8002a26 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a14:	4b1d      	ldr	r3, [pc, #116]	@ (8002a8c <HAL_RCC_ClockConfig+0x2e8>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	491a      	ldr	r1, [pc, #104]	@ (8002a8c <HAL_RCC_ClockConfig+0x2e8>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0308 	and.w	r3, r3, #8
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d009      	beq.n	8002a46 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a32:	4b16      	ldr	r3, [pc, #88]	@ (8002a8c <HAL_RCC_ClockConfig+0x2e8>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	4912      	ldr	r1, [pc, #72]	@ (8002a8c <HAL_RCC_ClockConfig+0x2e8>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002a46:	f000 f829 	bl	8002a9c <HAL_RCC_GetSysClockFreq>
 8002a4a:	4601      	mov	r1, r0
 8002a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8002a8c <HAL_RCC_ClockConfig+0x2e8>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a54:	22f0      	movs	r2, #240	@ 0xf0
 8002a56:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	fa92 f2a2 	rbit	r2, r2
 8002a5e:	60fa      	str	r2, [r7, #12]
  return result;
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	fab2 f282 	clz	r2, r2
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	40d3      	lsrs	r3, r2
 8002a6a:	4a09      	ldr	r2, [pc, #36]	@ (8002a90 <HAL_RCC_ClockConfig+0x2ec>)
 8002a6c:	5cd3      	ldrb	r3, [r2, r3]
 8002a6e:	fa21 f303 	lsr.w	r3, r1, r3
 8002a72:	4a08      	ldr	r2, [pc, #32]	@ (8002a94 <HAL_RCC_ClockConfig+0x2f0>)
 8002a74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002a76:	4b08      	ldr	r3, [pc, #32]	@ (8002a98 <HAL_RCC_ClockConfig+0x2f4>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7fe f9fc 	bl	8000e78 <HAL_InitTick>
  
  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3778      	adds	r7, #120	@ 0x78
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	08004204 	.word	0x08004204
 8002a94:	20000008 	.word	0x20000008
 8002a98:	2000000c 	.word	0x2000000c

08002a9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b087      	sub	sp, #28
 8002aa0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60fb      	str	r3, [r7, #12]
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	60bb      	str	r3, [r7, #8]
 8002aaa:	2300      	movs	r3, #0
 8002aac:	617b      	str	r3, [r7, #20]
 8002aae:	2300      	movs	r3, #0
 8002ab0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002ab6:	4b1e      	ldr	r3, [pc, #120]	@ (8002b30 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f003 030c 	and.w	r3, r3, #12
 8002ac2:	2b04      	cmp	r3, #4
 8002ac4:	d002      	beq.n	8002acc <HAL_RCC_GetSysClockFreq+0x30>
 8002ac6:	2b08      	cmp	r3, #8
 8002ac8:	d003      	beq.n	8002ad2 <HAL_RCC_GetSysClockFreq+0x36>
 8002aca:	e026      	b.n	8002b1a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002acc:	4b19      	ldr	r3, [pc, #100]	@ (8002b34 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ace:	613b      	str	r3, [r7, #16]
      break;
 8002ad0:	e026      	b.n	8002b20 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	0c9b      	lsrs	r3, r3, #18
 8002ad6:	f003 030f 	and.w	r3, r3, #15
 8002ada:	4a17      	ldr	r2, [pc, #92]	@ (8002b38 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002adc:	5cd3      	ldrb	r3, [r2, r3]
 8002ade:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002ae0:	4b13      	ldr	r3, [pc, #76]	@ (8002b30 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae4:	f003 030f 	and.w	r3, r3, #15
 8002ae8:	4a14      	ldr	r2, [pc, #80]	@ (8002b3c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002aea:	5cd3      	ldrb	r3, [r2, r3]
 8002aec:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d008      	beq.n	8002b0a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002af8:	4a0e      	ldr	r2, [pc, #56]	@ (8002b34 <HAL_RCC_GetSysClockFreq+0x98>)
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	fb02 f303 	mul.w	r3, r2, r3
 8002b06:	617b      	str	r3, [r7, #20]
 8002b08:	e004      	b.n	8002b14 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a0c      	ldr	r2, [pc, #48]	@ (8002b40 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b0e:	fb02 f303 	mul.w	r3, r2, r3
 8002b12:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	613b      	str	r3, [r7, #16]
      break;
 8002b18:	e002      	b.n	8002b20 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b1a:	4b06      	ldr	r3, [pc, #24]	@ (8002b34 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b1c:	613b      	str	r3, [r7, #16]
      break;
 8002b1e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b20:	693b      	ldr	r3, [r7, #16]
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	371c      	adds	r7, #28
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	40021000 	.word	0x40021000
 8002b34:	007a1200 	.word	0x007a1200
 8002b38:	08004214 	.word	0x08004214
 8002b3c:	08004224 	.word	0x08004224
 8002b40:	003d0900 	.word	0x003d0900

08002b44 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b092      	sub	sp, #72	@ 0x48
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002b50:	2300      	movs	r3, #0
 8002b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002b54:	2300      	movs	r3, #0
 8002b56:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	f000 80cd 	beq.w	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b68:	4b86      	ldr	r3, [pc, #536]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b6a:	69db      	ldr	r3, [r3, #28]
 8002b6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d10e      	bne.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b74:	4b83      	ldr	r3, [pc, #524]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b76:	69db      	ldr	r3, [r3, #28]
 8002b78:	4a82      	ldr	r2, [pc, #520]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b7e:	61d3      	str	r3, [r2, #28]
 8002b80:	4b80      	ldr	r3, [pc, #512]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b82:	69db      	ldr	r3, [r3, #28]
 8002b84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b88:	60bb      	str	r3, [r7, #8]
 8002b8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b92:	4b7d      	ldr	r3, [pc, #500]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d118      	bne.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b9e:	4b7a      	ldr	r3, [pc, #488]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a79      	ldr	r2, [pc, #484]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002ba4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ba8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002baa:	f7fe f9a9 	bl	8000f00 <HAL_GetTick>
 8002bae:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bb0:	e008      	b.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bb2:	f7fe f9a5 	bl	8000f00 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b64      	cmp	r3, #100	@ 0x64
 8002bbe:	d901      	bls.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e0db      	b.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bc4:	4b70      	ldr	r3, [pc, #448]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d0f0      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bd0:	4b6c      	ldr	r3, [pc, #432]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002bd2:	6a1b      	ldr	r3, [r3, #32]
 8002bd4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d07d      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002be8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d076      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bee:	4b65      	ldr	r3, [pc, #404]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002bf0:	6a1b      	ldr	r3, [r3, #32]
 8002bf2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bf8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002bfc:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c00:	fa93 f3a3 	rbit	r3, r3
 8002c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002c06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c08:	fab3 f383 	clz	r3, r3
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	461a      	mov	r2, r3
 8002c10:	4b5e      	ldr	r3, [pc, #376]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002c12:	4413      	add	r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	461a      	mov	r2, r3
 8002c18:	2301      	movs	r3, #1
 8002c1a:	6013      	str	r3, [r2, #0]
 8002c1c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c20:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c24:	fa93 f3a3 	rbit	r3, r3
 8002c28:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002c2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c2c:	fab3 f383 	clz	r3, r3
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	461a      	mov	r2, r3
 8002c34:	4b55      	ldr	r3, [pc, #340]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002c36:	4413      	add	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c40:	4a50      	ldr	r2, [pc, #320]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c44:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d045      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c50:	f7fe f956 	bl	8000f00 <HAL_GetTick>
 8002c54:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c56:	e00a      	b.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c58:	f7fe f952 	bl	8000f00 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e086      	b.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x238>
 8002c6e:	2302      	movs	r3, #2
 8002c70:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c74:	fa93 f3a3 	rbit	r3, r3
 8002c78:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	623b      	str	r3, [r7, #32]
 8002c7e:	6a3b      	ldr	r3, [r7, #32]
 8002c80:	fa93 f3a3 	rbit	r3, r3
 8002c84:	61fb      	str	r3, [r7, #28]
  return result;
 8002c86:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c88:	fab3 f383 	clz	r3, r3
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	095b      	lsrs	r3, r3, #5
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	f043 0302 	orr.w	r3, r3, #2
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d102      	bne.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002c9c:	4b39      	ldr	r3, [pc, #228]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	e007      	b.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	fa93 f3a3 	rbit	r3, r3
 8002cac:	617b      	str	r3, [r7, #20]
 8002cae:	4b35      	ldr	r3, [pc, #212]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	613a      	str	r2, [r7, #16]
 8002cb6:	693a      	ldr	r2, [r7, #16]
 8002cb8:	fa92 f2a2 	rbit	r2, r2
 8002cbc:	60fa      	str	r2, [r7, #12]
  return result;
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	fab2 f282 	clz	r2, r2
 8002cc4:	b2d2      	uxtb	r2, r2
 8002cc6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002cca:	b2d2      	uxtb	r2, r2
 8002ccc:	f002 021f 	and.w	r2, r2, #31
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	fa01 f202 	lsl.w	r2, r1, r2
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d0bd      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002cdc:	4b29      	ldr	r3, [pc, #164]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	4926      	ldr	r1, [pc, #152]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002cee:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d105      	bne.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cf6:	4b23      	ldr	r3, [pc, #140]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002cf8:	69db      	ldr	r3, [r3, #28]
 8002cfa:	4a22      	ldr	r2, [pc, #136]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002cfc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d00:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d008      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d0e:	4b1d      	ldr	r3, [pc, #116]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d12:	f023 0203 	bic.w	r2, r3, #3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	491a      	ldr	r1, [pc, #104]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0320 	and.w	r3, r3, #32
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d008      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d2c:	4b15      	ldr	r3, [pc, #84]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d30:	f023 0210 	bic.w	r2, r3, #16
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	4912      	ldr	r1, [pc, #72]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d008      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d4e:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	490b      	ldr	r1, [pc, #44]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d008      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002d68:	4b06      	ldr	r3, [pc, #24]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d6c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	4903      	ldr	r1, [pc, #12]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3748      	adds	r7, #72	@ 0x48
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	40021000 	.word	0x40021000
 8002d88:	40007000 	.word	0x40007000
 8002d8c:	10908100 	.word	0x10908100

08002d90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e095      	b.n	8002ece <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d108      	bne.n	8002dbc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002db2:	d009      	beq.n	8002dc8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	61da      	str	r2, [r3, #28]
 8002dba:	e005      	b.n	8002dc8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d106      	bne.n	8002de8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f7fd ff3e 	bl	8000c64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2202      	movs	r2, #2
 8002dec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002dfe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002e08:	d902      	bls.n	8002e10 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	60fb      	str	r3, [r7, #12]
 8002e0e:	e002      	b.n	8002e16 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002e10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e14:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002e1e:	d007      	beq.n	8002e30 <HAL_SPI_Init+0xa0>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002e28:	d002      	beq.n	8002e30 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002e40:	431a      	orrs	r2, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	695b      	ldr	r3, [r3, #20]
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	431a      	orrs	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	69db      	ldr	r3, [r3, #28]
 8002e64:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e68:	431a      	orrs	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e72:	ea42 0103 	orr.w	r1, r2, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e7a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	430a      	orrs	r2, r1
 8002e84:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	0c1b      	lsrs	r3, r3, #16
 8002e8c:	f003 0204 	and.w	r2, r3, #4
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e94:	f003 0310 	and.w	r3, r3, #16
 8002e98:	431a      	orrs	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e9e:	f003 0308 	and.w	r3, r3, #8
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002eac:	ea42 0103 	orr.w	r1, r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b088      	sub	sp, #32
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	60f8      	str	r0, [r7, #12]
 8002ede:	60b9      	str	r1, [r7, #8]
 8002ee0:	603b      	str	r3, [r7, #0]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d101      	bne.n	8002ef8 <HAL_SPI_Transmit+0x22>
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	e15f      	b.n	80031b8 <HAL_SPI_Transmit+0x2e2>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f00:	f7fd fffe 	bl	8000f00 <HAL_GetTick>
 8002f04:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002f06:	88fb      	ldrh	r3, [r7, #6]
 8002f08:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d002      	beq.n	8002f1c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002f16:	2302      	movs	r3, #2
 8002f18:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f1a:	e148      	b.n	80031ae <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d002      	beq.n	8002f28 <HAL_SPI_Transmit+0x52>
 8002f22:	88fb      	ldrh	r3, [r7, #6]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d102      	bne.n	8002f2e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f2c:	e13f      	b.n	80031ae <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2203      	movs	r2, #3
 8002f32:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	68ba      	ldr	r2, [r7, #8]
 8002f40:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	88fa      	ldrh	r2, [r7, #6]
 8002f46:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	88fa      	ldrh	r2, [r7, #6]
 8002f4c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f78:	d10f      	bne.n	8002f9a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f88:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f98:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fa4:	2b40      	cmp	r3, #64	@ 0x40
 8002fa6:	d007      	beq.n	8002fb8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002fb6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002fc0:	d94f      	bls.n	8003062 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d002      	beq.n	8002fd0 <HAL_SPI_Transmit+0xfa>
 8002fca:	8afb      	ldrh	r3, [r7, #22]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d142      	bne.n	8003056 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fd4:	881a      	ldrh	r2, [r3, #0]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fe0:	1c9a      	adds	r2, r3, #2
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	3b01      	subs	r3, #1
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002ff4:	e02f      	b.n	8003056 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f003 0302 	and.w	r3, r3, #2
 8003000:	2b02      	cmp	r3, #2
 8003002:	d112      	bne.n	800302a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003008:	881a      	ldrh	r2, [r3, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003014:	1c9a      	adds	r2, r3, #2
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800301e:	b29b      	uxth	r3, r3
 8003020:	3b01      	subs	r3, #1
 8003022:	b29a      	uxth	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003028:	e015      	b.n	8003056 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800302a:	f7fd ff69 	bl	8000f00 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	429a      	cmp	r2, r3
 8003038:	d803      	bhi.n	8003042 <HAL_SPI_Transmit+0x16c>
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003040:	d102      	bne.n	8003048 <HAL_SPI_Transmit+0x172>
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d106      	bne.n	8003056 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003054:	e0ab      	b.n	80031ae <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800305a:	b29b      	uxth	r3, r3
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1ca      	bne.n	8002ff6 <HAL_SPI_Transmit+0x120>
 8003060:	e080      	b.n	8003164 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d002      	beq.n	8003070 <HAL_SPI_Transmit+0x19a>
 800306a:	8afb      	ldrh	r3, [r7, #22]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d174      	bne.n	800315a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003074:	b29b      	uxth	r3, r3
 8003076:	2b01      	cmp	r3, #1
 8003078:	d912      	bls.n	80030a0 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800307e:	881a      	ldrh	r2, [r3, #0]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800308a:	1c9a      	adds	r2, r3, #2
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003094:	b29b      	uxth	r3, r3
 8003096:	3b02      	subs	r3, #2
 8003098:	b29a      	uxth	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800309e:	e05c      	b.n	800315a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	330c      	adds	r3, #12
 80030aa:	7812      	ldrb	r2, [r2, #0]
 80030ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030b2:	1c5a      	adds	r2, r3, #1
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030bc:	b29b      	uxth	r3, r3
 80030be:	3b01      	subs	r3, #1
 80030c0:	b29a      	uxth	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80030c6:	e048      	b.n	800315a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d12b      	bne.n	800312e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030da:	b29b      	uxth	r3, r3
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d912      	bls.n	8003106 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030e4:	881a      	ldrh	r2, [r3, #0]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030f0:	1c9a      	adds	r2, r3, #2
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	3b02      	subs	r3, #2
 80030fe:	b29a      	uxth	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003104:	e029      	b.n	800315a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	330c      	adds	r3, #12
 8003110:	7812      	ldrb	r2, [r2, #0]
 8003112:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003118:	1c5a      	adds	r2, r3, #1
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003122:	b29b      	uxth	r3, r3
 8003124:	3b01      	subs	r3, #1
 8003126:	b29a      	uxth	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800312c:	e015      	b.n	800315a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800312e:	f7fd fee7 	bl	8000f00 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	429a      	cmp	r2, r3
 800313c:	d803      	bhi.n	8003146 <HAL_SPI_Transmit+0x270>
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003144:	d102      	bne.n	800314c <HAL_SPI_Transmit+0x276>
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d106      	bne.n	800315a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003158:	e029      	b.n	80031ae <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800315e:	b29b      	uxth	r3, r3
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1b1      	bne.n	80030c8 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	6839      	ldr	r1, [r7, #0]
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f000 fb35 	bl	80037d8 <SPI_EndRxTxTransaction>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d002      	beq.n	800317a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2220      	movs	r2, #32
 8003178:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d10a      	bne.n	8003198 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003182:	2300      	movs	r3, #0
 8003184:	613b      	str	r3, [r7, #16]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	613b      	str	r3, [r7, #16]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	613b      	str	r3, [r7, #16]
 8003196:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800319c:	2b00      	cmp	r3, #0
 800319e:	d002      	beq.n	80031a6 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	77fb      	strb	r3, [r7, #31]
 80031a4:	e003      	b.n	80031ae <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80031b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3720      	adds	r7, #32
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b087      	sub	sp, #28
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	4613      	mov	r3, r2
 80031cc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80031ce:	2300      	movs	r3, #0
 80031d0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));


  if ((pData == NULL) || (Size == 0U))
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d002      	beq.n	80031de <HAL_SPI_Transmit_IT+0x1e>
 80031d8:	88fb      	ldrh	r3, [r7, #6]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d102      	bne.n	80031e4 <HAL_SPI_Transmit_IT+0x24>
  {
    errorcode = HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80031e2:	e06d      	b.n	80032c0 <HAL_SPI_Transmit_IT+0x100>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d002      	beq.n	80031f6 <HAL_SPI_Transmit_IT+0x36>
  {
    errorcode = HAL_BUSY;
 80031f0:	2302      	movs	r3, #2
 80031f2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80031f4:	e064      	b.n	80032c0 <HAL_SPI_Transmit_IT+0x100>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d101      	bne.n	8003204 <HAL_SPI_Transmit_IT+0x44>
 8003200:	2302      	movs	r3, #2
 8003202:	e05e      	b.n	80032c2 <HAL_SPI_Transmit_IT+0x102>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2203      	movs	r2, #3
 8003210:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	68ba      	ldr	r2, [r7, #8]
 800321e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	88fa      	ldrh	r2, [r7, #6]
 8003224:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	88fa      	ldrh	r2, [r7, #6]
 800322a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxISR       = NULL;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003250:	d903      	bls.n	800325a <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	4a1e      	ldr	r2, [pc, #120]	@ (80032d0 <HAL_SPI_Transmit_IT+0x110>)
 8003256:	651a      	str	r2, [r3, #80]	@ 0x50
 8003258:	e002      	b.n	8003260 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	4a1d      	ldr	r2, [pc, #116]	@ (80032d4 <HAL_SPI_Transmit_IT+0x114>)
 800325e:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003268:	d10f      	bne.n	800328a <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003278:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003288:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003294:	2b40      	cmp	r3, #64	@ 0x40
 8003296:	d007      	beq.n	80032a8 <HAL_SPI_Transmit_IT+0xe8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032a6:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f042 02a0 	orr.w	r2, r2, #160	@ 0xa0
 80032be:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 80032c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	371c      	adds	r7, #28
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	08003559 	.word	0x08003559
 80032d4:	08003513 	.word	0x08003513

080032d8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b088      	sub	sp, #32
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10e      	bne.n	8003318 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003300:	2b00      	cmp	r3, #0
 8003302:	d009      	beq.n	8003318 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800330a:	2b00      	cmp	r3, #0
 800330c:	d004      	beq.n	8003318 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	4798      	blx	r3
    return;
 8003316:	e0ce      	b.n	80034b6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d009      	beq.n	8003336 <HAL_SPI_IRQHandler+0x5e>
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003328:	2b00      	cmp	r3, #0
 800332a:	d004      	beq.n	8003336 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	4798      	blx	r3
    return;
 8003334:	e0bf      	b.n	80034b6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	f003 0320 	and.w	r3, r3, #32
 800333c:	2b00      	cmp	r3, #0
 800333e:	d10a      	bne.n	8003356 <HAL_SPI_IRQHandler+0x7e>
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003346:	2b00      	cmp	r3, #0
 8003348:	d105      	bne.n	8003356 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003350:	2b00      	cmp	r3, #0
 8003352:	f000 80b0 	beq.w	80034b6 <HAL_SPI_IRQHandler+0x1de>
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	f003 0320 	and.w	r3, r3, #32
 800335c:	2b00      	cmp	r3, #0
 800335e:	f000 80aa 	beq.w	80034b6 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003368:	2b00      	cmp	r3, #0
 800336a:	d023      	beq.n	80033b4 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003372:	b2db      	uxtb	r3, r3
 8003374:	2b03      	cmp	r3, #3
 8003376:	d011      	beq.n	800339c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800337c:	f043 0204 	orr.w	r2, r3, #4
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003384:	2300      	movs	r3, #0
 8003386:	617b      	str	r3, [r7, #20]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	617b      	str	r3, [r7, #20]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	617b      	str	r3, [r7, #20]
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	e00b      	b.n	80033b4 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800339c:	2300      	movs	r3, #0
 800339e:	613b      	str	r3, [r7, #16]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	613b      	str	r3, [r7, #16]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	613b      	str	r3, [r7, #16]
 80033b0:	693b      	ldr	r3, [r7, #16]
        return;
 80033b2:	e080      	b.n	80034b6 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	f003 0320 	and.w	r3, r3, #32
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d014      	beq.n	80033e8 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033c2:	f043 0201 	orr.w	r2, r3, #1
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80033ca:	2300      	movs	r3, #0
 80033cc:	60fb      	str	r3, [r7, #12]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	60fb      	str	r3, [r7, #12]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80033e4:	601a      	str	r2, [r3, #0]
 80033e6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00c      	beq.n	800340c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033f6:	f043 0208 	orr.w	r2, r3, #8
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80033fe:	2300      	movs	r3, #0
 8003400:	60bb      	str	r3, [r7, #8]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	60bb      	str	r3, [r7, #8]
 800340a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003410:	2b00      	cmp	r3, #0
 8003412:	d04f      	beq.n	80034b4 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	685a      	ldr	r2, [r3, #4]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003422:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d104      	bne.n	8003440 <HAL_SPI_IRQHandler+0x168>
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	2b00      	cmp	r3, #0
 800343e:	d034      	beq.n	80034aa <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	685a      	ldr	r2, [r3, #4]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 0203 	bic.w	r2, r2, #3
 800344e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003454:	2b00      	cmp	r3, #0
 8003456:	d011      	beq.n	800347c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800345c:	4a17      	ldr	r2, [pc, #92]	@ (80034bc <HAL_SPI_IRQHandler+0x1e4>)
 800345e:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003464:	4618      	mov	r0, r3
 8003466:	f7fd fed3 	bl	8001210 <HAL_DMA_Abort_IT>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d005      	beq.n	800347c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003474:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003480:	2b00      	cmp	r3, #0
 8003482:	d016      	beq.n	80034b2 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003488:	4a0c      	ldr	r2, [pc, #48]	@ (80034bc <HAL_SPI_IRQHandler+0x1e4>)
 800348a:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003490:	4618      	mov	r0, r3
 8003492:	f7fd febd 	bl	8001210 <HAL_DMA_Abort_IT>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d00a      	beq.n	80034b2 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034a0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80034a8:	e003      	b.n	80034b2 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 f812 	bl	80034d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80034b0:	e000      	b.n	80034b4 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80034b2:	bf00      	nop
    return;
 80034b4:	bf00      	nop
  }
}
 80034b6:	3720      	adds	r7, #32
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	080034e9 	.word	0x080034e9

080034c0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003504:	68f8      	ldr	r0, [r7, #12]
 8003506:	f7ff ffe5 	bl	80034d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800350a:	bf00      	nop
 800350c:	3710      	adds	r7, #16
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b082      	sub	sp, #8
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	330c      	adds	r3, #12
 8003524:	7812      	ldrb	r2, [r2, #0]
 8003526:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800352c:	1c5a      	adds	r2, r3, #1
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003536:	b29b      	uxth	r3, r3
 8003538:	3b01      	subs	r3, #1
 800353a:	b29a      	uxth	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003544:	b29b      	uxth	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d102      	bne.n	8003550 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f98a 	bl	8003864 <SPI_CloseTx_ISR>
  }
}
 8003550:	bf00      	nop
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003564:	881a      	ldrh	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003570:	1c9a      	adds	r2, r3, #2
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800357a:	b29b      	uxth	r3, r3
 800357c:	3b01      	subs	r3, #1
 800357e:	b29a      	uxth	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003588:	b29b      	uxth	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d102      	bne.n	8003594 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 f968 	bl	8003864 <SPI_CloseTx_ISR>
  }
}
 8003594:	bf00      	nop
 8003596:	3708      	adds	r7, #8
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b088      	sub	sp, #32
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	603b      	str	r3, [r7, #0]
 80035a8:	4613      	mov	r3, r2
 80035aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80035ac:	f7fd fca8 	bl	8000f00 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035b4:	1a9b      	subs	r3, r3, r2
 80035b6:	683a      	ldr	r2, [r7, #0]
 80035b8:	4413      	add	r3, r2
 80035ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80035bc:	f7fd fca0 	bl	8000f00 <HAL_GetTick>
 80035c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80035c2:	4b39      	ldr	r3, [pc, #228]	@ (80036a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	015b      	lsls	r3, r3, #5
 80035c8:	0d1b      	lsrs	r3, r3, #20
 80035ca:	69fa      	ldr	r2, [r7, #28]
 80035cc:	fb02 f303 	mul.w	r3, r2, r3
 80035d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035d2:	e054      	b.n	800367e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035da:	d050      	beq.n	800367e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80035dc:	f7fd fc90 	bl	8000f00 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	69fa      	ldr	r2, [r7, #28]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d902      	bls.n	80035f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d13d      	bne.n	800366e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	685a      	ldr	r2, [r3, #4]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003600:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800360a:	d111      	bne.n	8003630 <SPI_WaitFlagStateUntilTimeout+0x94>
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003614:	d004      	beq.n	8003620 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800361e:	d107      	bne.n	8003630 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800362e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003634:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003638:	d10f      	bne.n	800365a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003648:	601a      	str	r2, [r3, #0]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003658:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2201      	movs	r2, #1
 800365e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e017      	b.n	800369e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d101      	bne.n	8003678 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003674:	2300      	movs	r3, #0
 8003676:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	3b01      	subs	r3, #1
 800367c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	689a      	ldr	r2, [r3, #8]
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	4013      	ands	r3, r2
 8003688:	68ba      	ldr	r2, [r7, #8]
 800368a:	429a      	cmp	r2, r3
 800368c:	bf0c      	ite	eq
 800368e:	2301      	moveq	r3, #1
 8003690:	2300      	movne	r3, #0
 8003692:	b2db      	uxtb	r3, r3
 8003694:	461a      	mov	r2, r3
 8003696:	79fb      	ldrb	r3, [r7, #7]
 8003698:	429a      	cmp	r2, r3
 800369a:	d19b      	bne.n	80035d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3720      	adds	r7, #32
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	20000008 	.word	0x20000008

080036ac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b08a      	sub	sp, #40	@ 0x28
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]
 80036b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80036ba:	2300      	movs	r3, #0
 80036bc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80036be:	f7fd fc1f 	bl	8000f00 <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036c6:	1a9b      	subs	r3, r3, r2
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	4413      	add	r3, r2
 80036cc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80036ce:	f7fd fc17 	bl	8000f00 <HAL_GetTick>
 80036d2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	330c      	adds	r3, #12
 80036da:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80036dc:	4b3d      	ldr	r3, [pc, #244]	@ (80037d4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	4613      	mov	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4413      	add	r3, r2
 80036e6:	00da      	lsls	r2, r3, #3
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	0d1b      	lsrs	r3, r3, #20
 80036ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036ee:	fb02 f303 	mul.w	r3, r2, r3
 80036f2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80036f4:	e060      	b.n	80037b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80036fc:	d107      	bne.n	800370e <SPI_WaitFifoStateUntilTimeout+0x62>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d104      	bne.n	800370e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	b2db      	uxtb	r3, r3
 800370a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800370c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003714:	d050      	beq.n	80037b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003716:	f7fd fbf3 	bl	8000f00 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	6a3b      	ldr	r3, [r7, #32]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003722:	429a      	cmp	r2, r3
 8003724:	d902      	bls.n	800372c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003728:	2b00      	cmp	r3, #0
 800372a:	d13d      	bne.n	80037a8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	685a      	ldr	r2, [r3, #4]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800373a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003744:	d111      	bne.n	800376a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800374e:	d004      	beq.n	800375a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003758:	d107      	bne.n	800376a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003768:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800376e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003772:	d10f      	bne.n	8003794 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003782:	601a      	str	r2, [r3, #0]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003792:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e010      	b.n	80037ca <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80037ae:	2300      	movs	r3, #0
 80037b0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	3b01      	subs	r3, #1
 80037b6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689a      	ldr	r2, [r3, #8]
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	4013      	ands	r3, r2
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d196      	bne.n	80036f6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3728      	adds	r7, #40	@ 0x28
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	20000008 	.word	0x20000008

080037d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af02      	add	r7, sp, #8
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	9300      	str	r3, [sp, #0]
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	f7ff ff5b 	bl	80036ac <SPI_WaitFifoStateUntilTimeout>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d007      	beq.n	800380c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003800:	f043 0220 	orr.w	r2, r3, #32
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e027      	b.n	800385c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	9300      	str	r3, [sp, #0]
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	2200      	movs	r2, #0
 8003814:	2180      	movs	r1, #128	@ 0x80
 8003816:	68f8      	ldr	r0, [r7, #12]
 8003818:	f7ff fec0 	bl	800359c <SPI_WaitFlagStateUntilTimeout>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d007      	beq.n	8003832 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003826:	f043 0220 	orr.w	r2, r3, #32
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e014      	b.n	800385c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	9300      	str	r3, [sp, #0]
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	2200      	movs	r2, #0
 800383a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f7ff ff34 	bl	80036ac <SPI_WaitFifoStateUntilTimeout>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d007      	beq.n	800385a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800384e:	f043 0220 	orr.w	r2, r3, #32
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e000      	b.n	800385c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	3710      	adds	r7, #16
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800386c:	f7fd fb48 	bl	8000f00 <HAL_GetTick>
 8003870:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	685a      	ldr	r2, [r3, #4]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003880:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	2164      	movs	r1, #100	@ 0x64
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7ff ffa6 	bl	80037d8 <SPI_EndRxTxTransaction>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d005      	beq.n	800389e <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003896:	f043 0220 	orr.w	r2, r3, #32
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d10a      	bne.n	80038bc <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80038a6:	2300      	movs	r3, #0
 80038a8:	60bb      	str	r3, [r7, #8]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	60bb      	str	r3, [r7, #8]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	60bb      	str	r3, [r7, #8]
 80038ba:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d003      	beq.n	80038d4 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f7ff fe01 	bl	80034d4 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80038d2:	e002      	b.n	80038da <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f7ff fdf3 	bl	80034c0 <HAL_SPI_TxCpltCallback>
}
 80038da:	bf00      	nop
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80038e2:	b480      	push	{r7}
 80038e4:	b089      	sub	sp, #36	@ 0x24
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	60f8      	str	r0, [r7, #12]
 80038ea:	60b9      	str	r1, [r7, #8]
 80038ec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	fa93 f3a3 	rbit	r3, r3
 80038fc:	613b      	str	r3, [r7, #16]
  return result;
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	fab3 f383 	clz	r3, r3
 8003904:	b2db      	uxtb	r3, r3
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	2103      	movs	r1, #3
 800390a:	fa01 f303 	lsl.w	r3, r1, r3
 800390e:	43db      	mvns	r3, r3
 8003910:	401a      	ands	r2, r3
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	fa93 f3a3 	rbit	r3, r3
 800391c:	61bb      	str	r3, [r7, #24]
  return result;
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	fab3 f383 	clz	r3, r3
 8003924:	b2db      	uxtb	r3, r3
 8003926:	005b      	lsls	r3, r3, #1
 8003928:	6879      	ldr	r1, [r7, #4]
 800392a:	fa01 f303 	lsl.w	r3, r1, r3
 800392e:	431a      	orrs	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	601a      	str	r2, [r3, #0]
}
 8003934:	bf00      	nop
 8003936:	3724      	adds	r7, #36	@ 0x24
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	685a      	ldr	r2, [r3, #4]
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	43db      	mvns	r3, r3
 8003954:	401a      	ands	r2, r3
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	6879      	ldr	r1, [r7, #4]
 800395a:	fb01 f303 	mul.w	r3, r1, r3
 800395e:	431a      	orrs	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	605a      	str	r2, [r3, #4]
}
 8003964:	bf00      	nop
 8003966:	3714      	adds	r7, #20
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8003970:	b480      	push	{r7}
 8003972:	b089      	sub	sp, #36	@ 0x24
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	689a      	ldr	r2, [r3, #8]
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	fa93 f3a3 	rbit	r3, r3
 800398a:	613b      	str	r3, [r7, #16]
  return result;
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	fab3 f383 	clz	r3, r3
 8003992:	b2db      	uxtb	r3, r3
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	2103      	movs	r1, #3
 8003998:	fa01 f303 	lsl.w	r3, r1, r3
 800399c:	43db      	mvns	r3, r3
 800399e:	401a      	ands	r2, r3
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	fa93 f3a3 	rbit	r3, r3
 80039aa:	61bb      	str	r3, [r7, #24]
  return result;
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	fab3 f383 	clz	r3, r3
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	005b      	lsls	r3, r3, #1
 80039b6:	6879      	ldr	r1, [r7, #4]
 80039b8:	fa01 f303 	lsl.w	r3, r1, r3
 80039bc:	431a      	orrs	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80039c2:	bf00      	nop
 80039c4:	3724      	adds	r7, #36	@ 0x24
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr

080039ce <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80039ce:	b480      	push	{r7}
 80039d0:	b089      	sub	sp, #36	@ 0x24
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	60f8      	str	r0, [r7, #12]
 80039d6:	60b9      	str	r1, [r7, #8]
 80039d8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	68da      	ldr	r2, [r3, #12]
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	fa93 f3a3 	rbit	r3, r3
 80039e8:	613b      	str	r3, [r7, #16]
  return result;
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	fab3 f383 	clz	r3, r3
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	2103      	movs	r1, #3
 80039f6:	fa01 f303 	lsl.w	r3, r1, r3
 80039fa:	43db      	mvns	r3, r3
 80039fc:	401a      	ands	r2, r3
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	fa93 f3a3 	rbit	r3, r3
 8003a08:	61bb      	str	r3, [r7, #24]
  return result;
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	fab3 f383 	clz	r3, r3
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	6879      	ldr	r1, [r7, #4]
 8003a16:	fa01 f303 	lsl.w	r3, r1, r3
 8003a1a:	431a      	orrs	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	60da      	str	r2, [r3, #12]
}
 8003a20:	bf00      	nop
 8003a22:	3724      	adds	r7, #36	@ 0x24
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b089      	sub	sp, #36	@ 0x24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6a1a      	ldr	r2, [r3, #32]
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	fa93 f3a3 	rbit	r3, r3
 8003a46:	613b      	str	r3, [r7, #16]
  return result;
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	fab3 f383 	clz	r3, r3
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	210f      	movs	r1, #15
 8003a54:	fa01 f303 	lsl.w	r3, r1, r3
 8003a58:	43db      	mvns	r3, r3
 8003a5a:	401a      	ands	r2, r3
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	fa93 f3a3 	rbit	r3, r3
 8003a66:	61bb      	str	r3, [r7, #24]
  return result;
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	fab3 f383 	clz	r3, r3
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	6879      	ldr	r1, [r7, #4]
 8003a74:	fa01 f303 	lsl.w	r3, r1, r3
 8003a78:	431a      	orrs	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8003a7e:	bf00      	nop
 8003a80:	3724      	adds	r7, #36	@ 0x24
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr

08003a8a <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	b089      	sub	sp, #36	@ 0x24
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	60f8      	str	r0, [r7, #12]
 8003a92:	60b9      	str	r1, [r7, #8]
 8003a94:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	0a1b      	lsrs	r3, r3, #8
 8003a9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	fa93 f3a3 	rbit	r3, r3
 8003aa6:	613b      	str	r3, [r7, #16]
  return result;
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	fab3 f383 	clz	r3, r3
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	210f      	movs	r1, #15
 8003ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab8:	43db      	mvns	r3, r3
 8003aba:	401a      	ands	r2, r3
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	0a1b      	lsrs	r3, r3, #8
 8003ac0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	fa93 f3a3 	rbit	r3, r3
 8003ac8:	61bb      	str	r3, [r7, #24]
  return result;
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	fab3 f383 	clz	r3, r3
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	6879      	ldr	r1, [r7, #4]
 8003ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8003ada:	431a      	orrs	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8003ae0:	bf00      	nop
 8003ae2:	3724      	adds	r7, #36	@ 0x24
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b088      	sub	sp, #32
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	fa93 f3a3 	rbit	r3, r3
 8003b02:	613b      	str	r3, [r7, #16]
  return result;
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	fab3 f383 	clz	r3, r3
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003b0e:	e051      	b.n	8003bb4 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	2101      	movs	r1, #1
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	fa01 f303 	lsl.w	r3, r1, r3
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d043      	beq.n	8003bae <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d003      	beq.n	8003b36 <LL_GPIO_Init+0x4a>
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d10e      	bne.n	8003b54 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	69b9      	ldr	r1, [r7, #24]
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f7ff ff16 	bl	8003970 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	6819      	ldr	r1, [r3, #0]
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f7ff fef6 	bl	8003940 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	461a      	mov	r2, r3
 8003b5a:	69b9      	ldr	r1, [r7, #24]
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f7ff ff36 	bl	80039ce <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d11a      	bne.n	8003ba0 <LL_GPIO_Init+0xb4>
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	fa93 f3a3 	rbit	r3, r3
 8003b74:	60bb      	str	r3, [r7, #8]
  return result;
 8003b76:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003b78:	fab3 f383 	clz	r3, r3
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b07      	cmp	r3, #7
 8003b80:	d807      	bhi.n	8003b92 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	461a      	mov	r2, r3
 8003b88:	69b9      	ldr	r1, [r7, #24]
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f7ff ff4e 	bl	8003a2c <LL_GPIO_SetAFPin_0_7>
 8003b90:	e006      	b.n	8003ba0 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	461a      	mov	r2, r3
 8003b98:	69b9      	ldr	r1, [r7, #24]
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f7ff ff75 	bl	8003a8a <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	69b9      	ldr	r1, [r7, #24]
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f7ff fe9a 	bl	80038e2 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	fa22 f303 	lsr.w	r3, r2, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1a6      	bne.n	8003b10 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3720      	adds	r7, #32
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <LL_I2C_Enable>:
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f043 0201 	orr.w	r2, r3, #1
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	601a      	str	r2, [r3, #0]
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <LL_I2C_Disable>:
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f023 0201 	bic.w	r2, r3, #1
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	601a      	str	r2, [r3, #0]
}
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <LL_I2C_ConfigFilters>:
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	0219      	lsls	r1, r3, #8
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	430b      	orrs	r3, r1
 8003c28:	431a      	orrs	r2, r3
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	601a      	str	r2, [r3, #0]
}
 8003c2e:	bf00      	nop
 8003c30:	3714      	adds	r7, #20
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr

08003c3a <LL_I2C_SetOwnAddress1>:
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	b085      	sub	sp, #20
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	60f8      	str	r0, [r7, #12]
 8003c42:	60b9      	str	r1, [r7, #8]
 8003c44:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003c4e:	f023 0307 	bic.w	r3, r3, #7
 8003c52:	68b9      	ldr	r1, [r7, #8]
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	430a      	orrs	r2, r1
 8003c58:	431a      	orrs	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	609a      	str	r2, [r3, #8]
}
 8003c5e:	bf00      	nop
 8003c60:	3714      	adds	r7, #20
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr

08003c6a <LL_I2C_EnableOwnAddress1>:
{
 8003c6a:	b480      	push	{r7}
 8003c6c:	b083      	sub	sp, #12
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	609a      	str	r2, [r3, #8]
}
 8003c7e:	bf00      	nop
 8003c80:	370c      	adds	r7, #12
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr

08003c8a <LL_I2C_DisableOwnAddress1>:
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	b083      	sub	sp, #12
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	609a      	str	r2, [r3, #8]
}
 8003c9e:	bf00      	nop
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr

08003caa <LL_I2C_SetTiming>:
{
 8003caa:	b480      	push	{r7}
 8003cac:	b083      	sub	sp, #12
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
 8003cb2:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	683a      	ldr	r2, [r7, #0]
 8003cb8:	611a      	str	r2, [r3, #16]
}
 8003cba:	bf00      	nop
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr

08003cc6 <LL_I2C_SetMode>:
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b083      	sub	sp, #12
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
 8003cce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	601a      	str	r2, [r3, #0]
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <LL_I2C_AcknowledgeNextData>:
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	431a      	orrs	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	605a      	str	r2, [r3, #4]
}
 8003d06:	bf00      	nop
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, const LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b082      	sub	sp, #8
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
 8003d1a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f7ff ff65 	bl	8003bec <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	6899      	ldr	r1, [r3, #8]
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f7ff ff6d 	bl	8003c0c <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	4619      	mov	r1, r3
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f7ff ffb6 	bl	8003caa <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f7ff ff44 	bl	8003bcc <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f7ff ffa0 	bl	8003c8a <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	6919      	ldr	r1, [r3, #16]
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	461a      	mov	r2, r3
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f7ff ff70 	bl	8003c3a <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d002      	beq.n	8003d68 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f7ff ff81 	bl	8003c6a <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7ff ffa9 	bl	8003cc6 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	695b      	ldr	r3, [r3, #20]
 8003d78:	4619      	mov	r1, r3
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f7ff ffb6 	bl	8003cec <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3708      	adds	r7, #8
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
	...

08003d8c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003d90:	4904      	ldr	r1, [pc, #16]	@ (8003da4 <MX_FATFS_Init+0x18>)
 8003d92:	4805      	ldr	r0, [pc, #20]	@ (8003da8 <MX_FATFS_Init+0x1c>)
 8003d94:	f000 f8b0 	bl	8003ef8 <FATFS_LinkDriver>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	4b03      	ldr	r3, [pc, #12]	@ (8003dac <MX_FATFS_Init+0x20>)
 8003d9e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003da0:	bf00      	nop
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	20000100 	.word	0x20000100
 8003da8:	20000014 	.word	0x20000014
 8003dac:	200000fc 	.word	0x200000fc

08003db0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	4603      	mov	r3, r0
 8003db8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8003dba:	4b06      	ldr	r3, [pc, #24]	@ (8003dd4 <USER_initialize+0x24>)
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	701a      	strb	r2, [r3, #0]
    return Stat;
 8003dc0:	4b04      	ldr	r3, [pc, #16]	@ (8003dd4 <USER_initialize+0x24>)
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	20000011 	.word	0x20000011

08003dd8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	4603      	mov	r3, r0
 8003de0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8003de2:	4b06      	ldr	r3, [pc, #24]	@ (8003dfc <USER_status+0x24>)
 8003de4:	2201      	movs	r2, #1
 8003de6:	701a      	strb	r2, [r3, #0]
    return Stat;
 8003de8:	4b04      	ldr	r3, [pc, #16]	@ (8003dfc <USER_status+0x24>)
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	370c      	adds	r7, #12
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	20000011 	.word	0x20000011

08003e00 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b085      	sub	sp, #20
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60b9      	str	r1, [r7, #8]
 8003e08:	607a      	str	r2, [r7, #4]
 8003e0a:	603b      	str	r3, [r7, #0]
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8003e10:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3714      	adds	r7, #20
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr

08003e1e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b085      	sub	sp, #20
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
 8003e28:	603b      	str	r3, [r7, #0]
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8003e2e:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3714      	adds	r7, #20
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	4603      	mov	r3, r0
 8003e44:	603a      	str	r2, [r7, #0]
 8003e46:	71fb      	strb	r3, [r7, #7]
 8003e48:	460b      	mov	r3, r1
 8003e4a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	73fb      	strb	r3, [r7, #15]
    return res;
 8003e50:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3714      	adds	r7, #20
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
	...

08003e60 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b087      	sub	sp, #28
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8003e72:	2300      	movs	r3, #0
 8003e74:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8003e76:	4b1f      	ldr	r3, [pc, #124]	@ (8003ef4 <FATFS_LinkDriverEx+0x94>)
 8003e78:	7a5b      	ldrb	r3, [r3, #9]
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d831      	bhi.n	8003ee4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8003e80:	4b1c      	ldr	r3, [pc, #112]	@ (8003ef4 <FATFS_LinkDriverEx+0x94>)
 8003e82:	7a5b      	ldrb	r3, [r3, #9]
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	461a      	mov	r2, r3
 8003e88:	4b1a      	ldr	r3, [pc, #104]	@ (8003ef4 <FATFS_LinkDriverEx+0x94>)
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8003e8e:	4b19      	ldr	r3, [pc, #100]	@ (8003ef4 <FATFS_LinkDriverEx+0x94>)
 8003e90:	7a5b      	ldrb	r3, [r3, #9]
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	4a17      	ldr	r2, [pc, #92]	@ (8003ef4 <FATFS_LinkDriverEx+0x94>)
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	4413      	add	r3, r2
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8003e9e:	4b15      	ldr	r3, [pc, #84]	@ (8003ef4 <FATFS_LinkDriverEx+0x94>)
 8003ea0:	7a5b      	ldrb	r3, [r3, #9]
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	4b13      	ldr	r3, [pc, #76]	@ (8003ef4 <FATFS_LinkDriverEx+0x94>)
 8003ea8:	4413      	add	r3, r2
 8003eaa:	79fa      	ldrb	r2, [r7, #7]
 8003eac:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8003eae:	4b11      	ldr	r3, [pc, #68]	@ (8003ef4 <FATFS_LinkDriverEx+0x94>)
 8003eb0:	7a5b      	ldrb	r3, [r3, #9]
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	1c5a      	adds	r2, r3, #1
 8003eb6:	b2d1      	uxtb	r1, r2
 8003eb8:	4a0e      	ldr	r2, [pc, #56]	@ (8003ef4 <FATFS_LinkDriverEx+0x94>)
 8003eba:	7251      	strb	r1, [r2, #9]
 8003ebc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8003ebe:	7dbb      	ldrb	r3, [r7, #22]
 8003ec0:	3330      	adds	r3, #48	@ 0x30
 8003ec2:	b2da      	uxtb	r2, r3
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	3301      	adds	r3, #1
 8003ecc:	223a      	movs	r2, #58	@ 0x3a
 8003ece:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	3302      	adds	r3, #2
 8003ed4:	222f      	movs	r2, #47	@ 0x2f
 8003ed6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	3303      	adds	r3, #3
 8003edc:	2200      	movs	r2, #0
 8003ede:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8003ee4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	371c      	adds	r7, #28
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	20000104 	.word	0x20000104

08003ef8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8003f02:	2200      	movs	r2, #0
 8003f04:	6839      	ldr	r1, [r7, #0]
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f7ff ffaa 	bl	8003e60 <FATFS_LinkDriverEx>
 8003f0c:	4603      	mov	r3, r0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3708      	adds	r7, #8
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <memset>:
 8003f16:	4402      	add	r2, r0
 8003f18:	4603      	mov	r3, r0
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d100      	bne.n	8003f20 <memset+0xa>
 8003f1e:	4770      	bx	lr
 8003f20:	f803 1b01 	strb.w	r1, [r3], #1
 8003f24:	e7f9      	b.n	8003f1a <memset+0x4>
	...

08003f28 <__libc_init_array>:
 8003f28:	b570      	push	{r4, r5, r6, lr}
 8003f2a:	4d0d      	ldr	r5, [pc, #52]	@ (8003f60 <__libc_init_array+0x38>)
 8003f2c:	4c0d      	ldr	r4, [pc, #52]	@ (8003f64 <__libc_init_array+0x3c>)
 8003f2e:	1b64      	subs	r4, r4, r5
 8003f30:	10a4      	asrs	r4, r4, #2
 8003f32:	2600      	movs	r6, #0
 8003f34:	42a6      	cmp	r6, r4
 8003f36:	d109      	bne.n	8003f4c <__libc_init_array+0x24>
 8003f38:	4d0b      	ldr	r5, [pc, #44]	@ (8003f68 <__libc_init_array+0x40>)
 8003f3a:	4c0c      	ldr	r4, [pc, #48]	@ (8003f6c <__libc_init_array+0x44>)
 8003f3c:	f000 f826 	bl	8003f8c <_init>
 8003f40:	1b64      	subs	r4, r4, r5
 8003f42:	10a4      	asrs	r4, r4, #2
 8003f44:	2600      	movs	r6, #0
 8003f46:	42a6      	cmp	r6, r4
 8003f48:	d105      	bne.n	8003f56 <__libc_init_array+0x2e>
 8003f4a:	bd70      	pop	{r4, r5, r6, pc}
 8003f4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f50:	4798      	blx	r3
 8003f52:	3601      	adds	r6, #1
 8003f54:	e7ee      	b.n	8003f34 <__libc_init_array+0xc>
 8003f56:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f5a:	4798      	blx	r3
 8003f5c:	3601      	adds	r6, #1
 8003f5e:	e7f2      	b.n	8003f46 <__libc_init_array+0x1e>
 8003f60:	08004234 	.word	0x08004234
 8003f64:	08004234 	.word	0x08004234
 8003f68:	08004234 	.word	0x08004234
 8003f6c:	08004238 	.word	0x08004238

08003f70 <memcpy>:
 8003f70:	440a      	add	r2, r1
 8003f72:	4291      	cmp	r1, r2
 8003f74:	f100 33ff 	add.w	r3, r0, #4294967295
 8003f78:	d100      	bne.n	8003f7c <memcpy+0xc>
 8003f7a:	4770      	bx	lr
 8003f7c:	b510      	push	{r4, lr}
 8003f7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f86:	4291      	cmp	r1, r2
 8003f88:	d1f9      	bne.n	8003f7e <memcpy+0xe>
 8003f8a:	bd10      	pop	{r4, pc}

08003f8c <_init>:
 8003f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f8e:	bf00      	nop
 8003f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f92:	bc08      	pop	{r3}
 8003f94:	469e      	mov	lr, r3
 8003f96:	4770      	bx	lr

08003f98 <_fini>:
 8003f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f9a:	bf00      	nop
 8003f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f9e:	bc08      	pop	{r3}
 8003fa0:	469e      	mov	lr, r3
 8003fa2:	4770      	bx	lr
